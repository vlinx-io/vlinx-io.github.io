(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[264],{6304:function(module,__unused_webpack_exports,__webpack_require__){module=__webpack_require__.nmd(module),function _f(self){"use strict";let Y;try{module&&(self=module)}catch(e){}function u(o){return void 0===o||o}function aa(o){let i=Array(o);for(let s=0;s<o;s++)i[s]=v();return i}function v(){return Object.create(null)}function ba(o,i){return i.length-o.length}function x(o){return"string"==typeof o}function C(o){return"object"==typeof o}function D(o){return"function"==typeof o}function ca(o,i){var s=da;if(o&&(i&&(o=E(o,i)),this.H&&(o=E(o,this.H)),this.J&&1<o.length&&(o=E(o,this.J)),s||""===s)&&(o=o.split(s),this.filter)){i=this.filter,s=o.length;let j=[];for(let _=0,$=0;_<s;_++){let s=o[_];s&&!i[s]&&(j[$++]=s)}o=j}return o}self._factory=_f;let da=/[\p{Z}\p{S}\p{P}\p{C}]+/u,ea=/[\u0300-\u036f]/g;function fa(o,i){let s=Object.keys(o),j=s.length,_=[],$="",ee=0;for(let et=0,eo,ei;et<j;et++)(ei=o[eo=s[et]])?(_[ee++]=F(i?"(?!\\b)"+eo+"(\\b|_)":eo),_[ee++]=ei):$+=($?"|":"")+eo;return $&&(_[ee++]=F(i?"(?!\\b)("+$+")(\\b|_)":"("+$+")"),_[ee]=""),_}function E(o,i){for(let s=0,j=i.length;s<j&&(o=o.replace(i[s],i[s+1]));s+=2);return o}function F(o){return RegExp(o,"g")}function ha(o){let i="",s="";for(let j=0,_=o.length,$;j<_;j++)($=o[j])!==s&&(i+=s=$);return i}var t,ja={encode:ia,F:!1,G:""};function ia(o){return ca.call(this,(""+o).toLowerCase(),!1)}let ka={},G={};function la(o){I(o,"add"),I(o,"append"),I(o,"search"),I(o,"update"),I(o,"remove")}function I(o,i){o[i+"Async"]=function(){let o;let s=this,j=arguments;var _=j[j.length-1];return D(_)&&(o=_,delete j[j.length-1]),_=new Promise(function(o){setTimeout(function(){s.async=!0;let _=s[i].apply(s,j);s.async=!1,o(_)})}),o?(_.then(o),this):_}}function ma(o,i,s,j){let _=o.length,$=[],ee,et,eo=0;j&&(j=[]);for(let ei=_-1;0<=ei;ei--){let en=o[ei],es=en.length,er=v(),el=!ee;for(let o=0;o<es;o++){let es=en[o],ec=es.length;if(ec)for(let o=0,en,eh;o<ec;o++)if(eh=es[o],ee){if(ee[eh]){if(!ei){if(s)s--;else if($[eo++]=eh,eo===i)return $}(ei||j)&&(er[eh]=1),el=!0}if(j&&(en=(et[eh]||0)+1,et[eh]=en,en<_)){let o=j[en-2]||(j[en-2]=[]);o[o.length]=eh}}else er[eh]=1}if(j)ee||(et=er);else if(!el)return[];ee=er}if(j)for(let o=j.length-1,_,et;0<=o;o--){et=(_=j[o]).length;for(let o=0,j;o<et;o++)if(!ee[j=_[o]]){if(s)s--;else if($[eo++]=j,eo===i)return $;ee[j]=1}}return $}function na(o,i){let s=v(),j=v(),_=[];for(let i=0;i<o.length;i++)s[o[i]]=1;for(let o=0,$;o<i.length;o++){$=i[o];for(let o=0,i;o<$.length;o++)s[i=$[o]]&&!j[i]&&(j[i]=1,_[_.length]=i)}return _}function J(o){this.l=!0!==o&&o,this.cache=v(),this.h=[]}function oa(o,i,s){C(o)&&(o=o.query);let j=this.cache.get(o);return j||(j=this.search(o,i,s),this.cache.set(o,j)),j}J.prototype.set=function(o,i){if(!this.cache[o]){var s=this.h.length;for(s===this.l?delete this.cache[this.h[s-1]]:s++,--s;0<s;s--)this.h[s]=this.h[s-1];this.h[0]=o}this.cache[o]=i},J.prototype.get=function(o){let i=this.cache[o];if(this.l&&i&&(o=this.h.indexOf(o))){let i=this.h[o-1];this.h[o-1]=this.h[o],this.h[o]=i}return i};let qa={memory:{charset:"latin:extra",D:3,B:4,m:!1},performance:{D:3,B:3,s:!1,context:{depth:2,D:1}},match:{charset:"latin:extra",G:"reverse"},score:{charset:"latin:advanced",D:20,B:3,context:{depth:3,D:9}},default:{}};function ra(o,i,s,j,_,$,ee){setTimeout(function(){let et=o(s?s+"."+j:j,JSON.stringify(ee));et&&et.then?et.then(function(){i.export(o,i,s,_,$+1)}):i.export(o,i,s,_,$+1)})}function K(o,i){if(!(this instanceof K))return new K(o);if(o){x(o)?o=qa[o]:(s=o.preset)&&(o=Object.assign({},s[s],o)),s=o.charset;var s,j=o.lang;x(s)&&(-1===s.indexOf(":")&&(s+=":default"),s=G[s]),x(j)&&(j=ka[j])}else o={};let _,$,ee=o.context||{};if(this.encode=o.encode||s&&s.encode||ia,this.register=i||v(),this.D=_=o.resolution||9,this.G=i=s&&s.G||o.tokenize||"strict",this.depth="strict"===i&&ee.depth,this.l=u(ee.bidirectional),this.s=$=u(o.optimize),this.m=u(o.fastupdate),this.B=o.minlength||1,this.C=o.boost,this.map=$?aa(_):v(),this.A=_=ee.resolution||1,this.h=$?aa(_):v(),this.F=s&&s.F||o.rtl,this.H=(i=o.matcher||j&&j.H)&&fa(i,!1),this.J=(i=o.stemmer||j&&j.J)&&fa(i,!0),s=i=o.filter||j&&j.filter){s=i,j=v();for(let o=0,i=s.length;o<i;o++)j[s[o]]=1;s=j}this.filter=s,this.cache=(i=o.cache)&&new J(i)}function L(o,i,s,j,_){return s&&1<o?i+(j||0)<=o?s+(_||0):(o-1)/(i+(j||0))*(s+(_||0))+1|0:0}function M(o,i,s,j,_,$,ee){let et=ee?o.h:o.map;(!i[s]||ee&&!i[s][ee])&&(o.s&&(et=et[j]),ee?((i=i[s]||(i[s]=v()))[ee]=1,et=et[ee]||(et[ee]=v())):i[s]=1,et=et[s]||(et[s]=[]),o.s||(et=et[j]||(et[j]=[])),$&&et.includes(_)||(et[et.length]=_,o.m&&((o=o.register[_]||(o.register[_]=[]))[o.length]=et)))}function sa(o,i,s,j,_,$,ee,et){let eo=[],ei=et?o.h:o.map;if(o.s||(ei=ua(ei,ee,et,o.l)),ei){let s=0,en=Math.min(ei.length,et?o.A:o.D);for(let i=0,es=0,er,el;i<en&&(!(er=ei[i])||(o.s&&(er=ua(er,ee,et,o.l)),_&&er&&$&&((el=er.length)<=_?(_-=el,er=null):(er=er.slice(_),_=0)),!er||(eo[s++]=er,!$||!((es+=er.length)>=j))));i++);if(s)return $?ta(eo,j,0):void(i[i.length]=eo)}return!s&&eo}function ta(o,i,s){return o=1===o.length?o[0]:[].concat.apply([],o),s||o.length>i?o.slice(s,s+i):o}function ua(o,i,s,j){return o=s?(o=o[(j=j&&i>s)?i:s])&&o[j?s:i]:o[i]}function N(o,i,s,j,_){let $=0;if(o.constructor===Array){if(_)-1!==(i=o.indexOf(i))?1<o.length&&(o.splice(i,1),$++):$++;else{_=Math.min(o.length,s);for(let ee=0,et;ee<_;ee++)(et=o[ee])&&($=N(et,i,s,j,_),j||$||delete o[ee])}}else for(let ee in o)($=N(o[ee],i,s,j,_))||delete o[ee];return $}function va(o){o=o.data;var i=self._index;let s=o.args;var j=o.task;"init"===j?(j=o.options||{},o=o.factory,i=j.encode,j.cache=!1,i&&0===i.indexOf("function")&&(j.encode=Function("return "+i)()),o?(Function("return "+o)()(self),self._index=new self.FlexSearch.Index(j),delete self.FlexSearch):self._index=new K(j)):(o=o.id,i=i[j].apply(i,s),postMessage("search"===j?{id:o,msg:i}:{id:o}))}t=K.prototype,t.append=function(o,i){return this.add(o,i,!0)},t.add=function(o,i,s,j){if(i&&(o||0===o)){if(!j&&!s&&this.register[o])return this.update(o,i);if(j=(i=this.encode(i)).length){let ei=v(),en=v(),es=this.depth,er=this.D;for(let el=0;el<j;el++){let ec=i[this.F?j-1-el:el];var _=ec.length;if(ec&&_>=this.B&&(es||!en[ec])){var $=L(er,j,el),ee="";switch(this.G){case"full":if(2<_){for($=0;$<_;$++)for(var et=_;et>$;et--)if(et-$>=this.B){var eo=L(er,j,el,_,$);M(this,en,ee=ec.substring($,et),eo,o,s)}break}case"reverse":if(1<_){for(et=_-1;0<et;et--)(ee=ec[et]+ee).length>=this.B&&M(this,en,ee,L(er,j,el,_,et),o,s);ee=""}case"forward":if(1<_){for(et=0;et<_;et++)(ee+=ec[et]).length>=this.B&&M(this,en,ee,$,o,s);break}default:if(this.C&&($=Math.min($/this.C(i,ec,el)|0,er-1)),M(this,en,ec,$,o,s),es&&1<j&&el<j-1){for(_=v(),ee=this.A,$=ec,et=Math.min(es+1,j-el),_[$]=1,eo=1;eo<et;eo++)if((ec=i[this.F?j-1-el-eo:el+eo])&&ec.length>=this.B&&!_[ec]){_[ec]=1;let i=this.l&&ec>$;M(this,ei,i?$:ec,L(ee+(j/2>ee?0:1),j,el,et-1,eo-1),o,s,i?ec:$)}}}}}this.m||(this.register[o]=1)}}return this},t.search=function(o,i,s){let j,_,$;s||(!i&&C(o)?o=(s=o).query:C(i)&&(s=i));let ee=[],et,eo,ei=0;if(s){o=s.query||o,i=s.limit,ei=s.offset||0;var en=s.context;eo=s.suggest}if(o&&1<(et=(o=this.encode(""+o)).length)){s=v();var es=[];for(let i=0,j=0,_;i<et;i++)if((_=o[i])&&_.length>=this.B&&!s[_]){if(!this.s&&!eo&&!this.map[_])return ee;es[j++]=_,s[_]=1}et=(o=es).length}if(!et)return ee;for(i||(i=100),en=this.depth&&1<et&&!1!==en,s=0,en?(j=o[0],s=1):1<et&&o.sort(ba);s<et;s++){if($=o[s],en?(_=sa(this,ee,eo,i,ei,2===et,$,j),eo&&!1===_&&ee.length||(j=$)):_=sa(this,ee,eo,i,ei,1===et,$),_)return _;if(eo&&s===et-1){if(!(es=ee.length)){if(en){en=0,s=-1;continue}return ee}if(1===es)return ta(ee[0],i,ei)}}return ma(ee,i,ei,eo)},t.contain=function(o){return!!this.register[o]},t.update=function(o,i){return this.remove(o).add(o,i)},t.remove=function(o,i){let s=this.register[o];if(s){if(this.m)for(let i=0,j;i<s.length;i++)(j=s[i]).splice(j.indexOf(o),1);else N(this.map,o,this.D,this.s),this.depth&&N(this.h,o,this.A,this.s);if(i||delete this.register[o],this.cache){i=this.cache;for(let s=0,j;s<i.h.length;s++)j=i.h[s],i.cache[j].includes(o)&&(i.h.splice(s--,1),delete i.cache[j])}}return this},t.searchCache=oa,t.export=function(o,i,s,j,_){let $,ee;switch(_||(_=0)){case 0:if($="reg",this.m)for(let o in ee=v(),this.register)ee[o]=1;else ee=this.register;break;case 1:$="cfg",ee={doc:0,opt:this.s?1:0};break;case 2:$="map",ee=this.map;break;case 3:$="ctx",ee=this.h;break;default:return}return ra(o,i||this,s,$,j,_,ee),!0},t.import=function(o,i){if(i)switch(x(i)&&(i=JSON.parse(i)),o){case"cfg":this.s=!!i.opt;break;case"reg":this.m=!1,this.register=i;break;case"map":this.map=i;break;case"ctx":this.h=i}},la(K.prototype);let wa=0;function O(o){var i;if(!(this instanceof O))return new O(o);o?D(i=o.encode)&&(o.encode=i.toString()):o={},(i=(self||window)._factory)&&(i=i.toString());let s="undefined"==typeof window&&self.exports,j=this;this.o=xa(i,s,o.worker),this.h=v(),this.o&&(s?this.o.on("message",function(o){j.h[o.id](o.msg),delete j.h[o.id]}):this.o.onmessage=function(o){o=o.data,j.h[o.id](o.msg),delete j.h[o.id]},this.o.postMessage({task:"init",factory:i,options:o}))}function P(o){O.prototype[o]=O.prototype[o+"Async"]=function(){let i;let s=this,j=[].slice.call(arguments);var _=j[j.length-1];return D(_)&&(i=_,j.splice(j.length-1,1)),_=new Promise(function(i){setTimeout(function(){s.h[++wa]=i,s.o.postMessage({task:o,id:wa,args:j})})}),i?(_.then(i),this):_}}function xa(a,b,c){let d;try{d=b?eval('new (require("worker_threads")["Worker"])("../dist/node/node.js")'):a?new Worker(URL.createObjectURL(new Blob(["onmessage="+va.toString()],{type:"text/javascript"}))):new Worker(x(c)?c:"worker/worker.js",{type:"module"})}catch(e){}return d}function Q(o){if(!(this instanceof Q))return new Q(o);var i,s=o.document||o.doc||o;this.K=[],this.h=[],this.A=[],this.register=v(),this.key=(i=s.key||s.id)&&S(i,this.A)||"id",this.m=u(o.fastupdate),this.C=(i=s.store)&&!0!==i&&[],this.store=i&&v(),this.I=(i=s.tag)&&S(i,this.A),this.l=i&&v(),this.cache=(i=o.cache)&&new J(i),o.cache=!1,this.o=o.worker,this.async=!1,i=v();let j=s.index||s.field||s;x(j)&&(j=[j]);for(let s=0,_,$;s<j.length;s++)x(_=j[s])||($=_,_=_.field),$=C($)?Object.assign({},o,$):o,this.o&&(i[_]=new O($),i[_].o||(this.o=!1)),this.o||(i[_]=new K($,this.register)),this.K[s]=S(_,this.A),this.h[s]=_;if(this.C)for(x(o=s.store)&&(o=[o]),s=0;s<o.length;s++)this.C[s]=S(o[s],this.A);this.index=i}function S(o,i){let s=o.split(":"),j=0;for(let _=0;_<s.length;_++)0<=(o=s[_]).indexOf("[]")&&(o=o.substring(0,o.length-2))&&(i[j]=!0),o&&(s[j++]=o);return j<s.length&&(s.length=j),1<j?s:s[0]}function T(o,i){if(x(i))o=o[i];else for(let s=0;o&&s<i.length;s++)o=o[i[s]];return o}function U(o,i,s,j,_){if(o=o[_],j===s.length-1)i[_]=o;else if(o){if(o.constructor===Array)for(i=i[_]=Array(o.length),_=0;_<o.length;_++)U(o,i,s,j,_);else i=i[_]||(i[_]=v()),_=s[++j],U(o,i,s,j,_)}}function V(o,i,s,j,_,$,ee,et){if(o=o[ee]){if(j===i.length-1){if(o.constructor===Array){if(s[j]){for(i=0;i<o.length;i++)_.add($,o[i],!0,!0);return}o=o.join(" ")}_.add($,o,et,!0)}else if(o.constructor===Array)for(ee=0;ee<o.length;ee++)V(o,i,s,j,_,$,ee,et);else ee=i[++j],V(o,i,s,j,_,$,ee,et)}}function ya(o,i,s,j){let _=this.l[o],$=_&&_.length-s;if($&&0<$)return($>i||s)&&(_=_.slice(s,s+i)),j&&(_=za.call(this,_)),{tag:o,result:_}}function za(o){let i=Array(o.length);for(let s=0,j;s<o.length;s++)j=o[s],i[s]={id:j,doc:this.store[j]};return i}P("add"),P("append"),P("search"),P("update"),P("remove"),t=Q.prototype,t.add=function(o,i,s){if(C(o)&&(o=T(i=o,this.key)),i&&(o||0===o)){if(!s&&this.register[o])return this.update(o,i);for(let j=0,_,$;j<this.h.length;j++)$=this.h[j],x(_=this.K[j])&&(_=[_]),V(i,_,this.A,0,this.index[$],o,_[0],s);if(this.I){let j=T(i,this.I),_=v();x(j)&&(j=[j]);for(let i=0,$,ee;i<j.length;i++)if(!_[$=j[i]]&&(_[$]=1,ee=this.l[$]||(this.l[$]=[]),!s||!ee.includes(o))&&(ee[ee.length]=o,this.m)){let i=this.register[o]||(this.register[o]=[]);i[i.length]=ee}}if(this.store&&(!s||!this.store[o])){let s;if(this.C){s=v();for(let o=0,j;o<this.C.length;o++)x(j=this.C[o])?s[j]=i[j]:U(i,s,j,0,j[0])}this.store[o]=s||i}}return this},t.append=function(o,i){return this.add(o,i,!0)},t.update=function(o,i){return this.remove(o).add(o,i)},t.remove=function(o){if(C(o)&&(o=T(o,this.key)),this.register[o]){for(var i=0;i<this.h.length&&(this.index[this.h[i]].remove(o,!this.o),!this.m);i++);if(this.I&&!this.m)for(let s in this.l){i=this.l[s];let j=i.indexOf(o);-1!==j&&(1<i.length?i.splice(j,1):delete this.l[s])}this.store&&delete this.store[o],delete this.register[o]}return this},t.search=function(o,i,s,j){s||(!i&&C(o)?(s=o,o=""):C(i)&&(s=i,i=0));let _=[],$=[],ee,et,eo,ei,en,es,er=0;if(s){if(s.constructor===Array)eo=s,s=null;else{if(o=s.query||o,eo=(ee=s.pluck)||s.index||s.field,ei=s.tag,et=this.store&&s.enrich,en="and"===s.bool,i=s.limit||i||100,es=s.offset||0,ei&&(x(ei)&&(ei=[ei]),!o)){for(let o=0,s;o<ei.length;o++)(s=ya.call(this,ei[o],i,es,et))&&(_[_.length]=s,er++);return er?_:[]}x(eo)&&(eo=[eo])}}eo||(eo=this.h),en=en&&(1<eo.length||ei&&1<ei.length);let el=!j&&(this.o||this.async)&&[];for(let ee=0,et,ec,eh;ee<eo.length;ee++){let ep;if(x(ec=eo[ee])||(ec=(ep=ec).field,o=ep.query||o,i=ep.limit||i),el)el[ee]=this.index[ec].searchAsync(o,i,ep||s);else{if(eh=(et=j?j[ee]:this.index[ec].search(o,i,ep||s))&&et.length,ei&&eh){let o=[],s=0;en&&(o[0]=[et]);for(let i=0,j,_;i<ei.length;i++)j=ei[i],(eh=(_=this.l[j])&&_.length)&&(s++,o[o.length]=en?[_]:_);s&&(eh=(et=en?ma(o,i||100,es||0):na(et,o)).length)}if(eh)$[er]=ec,_[er++]=et;else if(en)return[]}}if(el){let j=this;return new Promise(function(_){Promise.all(el).then(function($){_(j.search(o,i,s,$))})})}if(!er)return[];if(ee&&(!et||!this.store))return _[0];for(let o=0,i;o<$.length;o++){if((i=_[o]).length&&et&&(i=za.call(this,i)),ee)return i;_[o]={field:$[o],result:i}}return _},t.contain=function(o){return!!this.register[o]},t.get=function(o){return this.store[o]},t.set=function(o,i){return this.store[o]=i,this},t.searchCache=oa,t.export=function(o,i,s,j,_){if(_||(_=0),j||(j=0),j<this.h.length){let s=this.h[j],$=this.index[s];i=this,setTimeout(function(){$.export(o,i,_?s:"",j,_++)||(j++,_=1,i.export(o,i,s,j,_))})}else{let i,$;switch(_){case 1:i="tag",$=this.l;break;case 2:i="store",$=this.store;break;default:return}ra(o,this,s,i,j,_,$)}},t.import=function(o,i){if(i)switch(x(i)&&(i=JSON.parse(i)),o){case"tag":this.l=i;break;case"reg":this.m=!1,this.register=i;for(let o=0,s;o<this.h.length;o++)(s=this.index[this.h[o]]).register=i,s.m=!1;break;case"store":this.store=i;break;default:o=o.split(".");let s=o[0];o=o[1],s&&o&&this.index[s].import(o,i)}},la(Q.prototype);var Ba={encode:Aa,F:!1,G:""};let Ca=[F("[\xe0\xe1\xe2\xe3\xe4\xe5]"),"a",F("[\xe8\xe9\xea\xeb]"),"e",F("[\xec\xed\xee\xef]"),"i",F("[\xf2\xf3\xf4\xf5\xf6ő]"),"o",F("[\xf9\xfa\xfb\xfcű]"),"u",F("[\xfdŷ\xff]"),"y",F("\xf1"),"n",F("[\xe7c]"),"k",F("\xdf"),"s",F(" & ")," and "];function Aa(o){var i=o=""+o;return i.normalize&&(i=i.normalize("NFD").replace(ea,"")),ca.call(this,i.toLowerCase(),!o.normalize&&Ca)}var Ea={encode:Da,F:!1,G:"strict"};let Fa=/[^a-z0-9]+/,Ga={b:"p",v:"f",w:"f",z:"s",x:"s",ß:"s",d:"t",n:"m",c:"k",g:"k",j:"k",q:"k",i:"e",y:"e",u:"o"};function Da(o){o=Aa.call(this,o).join(" ");let i=[];if(o){let s=o.split(Fa),j=s.length;for(let _=0,$,ee=0;_<j;_++)if((o=s[_])&&(!this.filter||!this.filter[o])){let s=Ga[$=o[0]]||$,j=s;for(let i=1;i<o.length;i++){$=o[i];let _=Ga[$]||$;_&&_!==j&&(s+=_,j=_)}i[ee++]=s}}return i}var Ia={encode:Ha,F:!1,G:""};let Ja=[F("ae"),"a",F("oe"),"o",F("sh"),"s",F("th"),"t",F("ph"),"f",F("pf"),"f",F("(?![aeo])h(?![aeo])"),"",F("(?!^[aeo])h(?!^[aeo])"),""];function Ha(o,i){return o&&(2<(o=Da.call(this,o).join(" ")).length&&(o=E(o,Ja)),i||(1<o.length&&(o=ha(o)),o&&(o=o.split(" ")))),o||[]}var La={encode:Ka,F:!1,G:""};let Ma=F("(?!\\b)[aeo]");function Ka(o){return o&&(1<(o=Ha.call(this,o,!0)).length&&(o=o.replace(Ma,"")),1<o.length&&(o=ha(o)),o&&(o=o.split(" "))),o||[]}G["latin:default"]=ja,G["latin:simple"]=Ba,G["latin:balance"]=Ea,G["latin:advanced"]=Ia,G["latin:extra"]=La;let W=self,Z={Index:K,Document:Q,Worker:O,registerCharset:function(o,i){G[o]=i},registerLanguage:function(o,i){ka[o]=i}};(Y=W.define)&&Y.amd?Y([],function(){return Z}):W.exports?W.exports=Z:W.FlexSearch=Z}(this)},9264:function(o,i,s){"use strict";s.r(i),s.d(i,{search:function(){return _}});let j=new(s(6304)).Document({tokenize:"full",document:{id:"url",index:"content",store:["title","pageTitle"]},context:{resolution:9,depth:2,bidirectional:!0}});for(let{url:o,sections:i}of[{url:"/eula",sections:[["License Agreement.",null,["This is a legal agreement between VLINX Software,Inc. (United States Company EIN 32-0705532) and you the user. It applies only to releases of Protector4J. If you do not agree to these terms and conditions then you may not download, install or use the Protector4J software."]],["1. License, Ownership and Use.","1-license-ownership-and-use",["The Protector4J software is NOT public domain or freeware. It and its accompanying files and/or documents are owned and copyrighted by VLINX Software,Inc. VLINX Software,Inc. grants the user a non-exclusive non-transferable license to use the Protector4J software on one computer. The Protector4J software is considered in use on a computer when it is loaded into temporary memory or installed into permanent memory. The software must be useable on the one computer by only one user at a time and the user must be an employee or contractor of the licensee. You may not reverse engineer, disassemble, decompile or alter this software in any way except to the extent that the foregoing restriction is expressly prohibited by applicable law. Also, you may not reverse engineer, disassemble, decompile or alter in any way any file generated by the Protector4J software except to the extent that the foregoing restriction is expressly prohibited by applicable law."]],["2. Distribution.","2-distribution",["You may NOT reproduce and/or distribute copies of the Protector4J distribution files or any of their constituent or associated files or materials to third parties."]],["3. Warranty Disclaimer and Limitation of Liability.","3-warranty-disclaimer-and-limitation-of-liability",['The Protector4J software is licensed to the user on an "AS IS" basis. VLINX SOFTWARE,INC. MAKES NO WARRANTIES, EITHER EXPRESS OR IMPLIED, WITH RESPECT TO THIS PROTECTOR4J SOFTWARE AND ITS ASSOCIATED FILES AND DOCUMENTS INCLUDING BUT NOT LIMITED TO ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. VLINX SOFTWARE,INC DOES NOT WARRANT THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, OR THAT DEFECTS IN THE SOFTWARE WILL BE CORRECTED. You the user are solely responsible for determining the appropriateness of the software for your use and accept full responsibility for all risks associated with its use. VLINX Software,Inc. is not and will not be liable for any direct, indirect, special or incidental damages (including loss of profits or interruption of business) however caused even if Zelix Pty Ltd has been advised of the possibility of such damages.']],["4. Severability.","4-severability",["If any provision of this Agreement is held to be unlawful or unenforceable, or otherwise invalid, this Agreement will remain in effect with the invalid provisions omitted, unless omission would frustrate the intent of the parties, in which case this Agreement will immediately terminate."]],["5. Complete Agreement.","5-complete-agreement",["This Agreement is the entire agreement between you and VLINX Software, Inc. relating to its subject matter. It supersedes all prior or contemporaneous oral or written communications, proposals, conditions, representations and warranties and prevails over any conflicting or additional terms of any quote, order, acknowledgment, or other communication between the parties relating to its subject matter during the term of this Agreement. No modification to this Agreement will be binding, unless in writing and signed by an authorized representative of each party."]]]},{url:"/privacy",sections:[["Privacy Policy",null,["VLINX Software,Inc. respects your privacy. From time to time, you may choose to provide us with personal information. We will not reveal any of your personal information to third parties unless you have specifically requested that we do so or if we are required to do so by law.\nPlease note that VLINX Software,Inc. reserves the right to modify its Privacy Policy at any time without notice. Any changes to the policy will be posted on this page. Your continued use of this Web site will be deemed conclusive acceptance of such modification. If you have any comments or questions concerning this policy please feel free to contact us at protector4j@vlinx.io"]]]},{url:"/terms",sections:[["Website Terms of Use",null,[]],["Use of this website.","use-of-this-website",['Your access and use of this website constitutes your agreement to these Terms of Use. "This website" means all webpages located on the protector4j.com domain name.',"This website is for your personal and non-commercial use. You may not modify, copy, distribute, transmit, display, perform, reproduce, publish, license, create derivative works from, transfer, or sell any information, software, products or services obtained from or through this website. Note that this website and any VLINX Software,Inc. publications and material which may be accessed from it are protected under all applicable copyright laws.","As a condition of your use of this website, you will not use the website for any purpose that is unlawful or prohibited by these terms of use. You may not use the website in any manner that could damage, disable, overburden, or impair any server or networks, or interfere with any other party's use of this website. You may not obtain or attempt to obtain any materials or information through any means not intentionally made available through this website."]],["Links to third party sites","links-to-third-party-sites",["Any third party websites which may be accessed through this website are the sole responsibility of the third party posting the website. VLINX Software,Inc. makes no warranty, express or implied, as to the accuracy of any information on third party websites and accepts no liability whatsoever for any errors and omissions or for any damage or injury to persons or property arising out of the use or operation of any materials, instructions, methods or ideas contained on such websites."]],["Limitation of liability","limitation-of-liability",['This website is provided on an "as is" and "as available" basis. VLINX Software,Inc. expressly disclaims all warranties of any kind, whether express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose and non-infringement. VLINX Software,Inc. is not liable to you for any cost, loss or liability (including loss of profits or interruption of business) however caused even if VLIINX Software,Inc. has been advised of the possibility of such damages.']]]},{url:"/articles/cracking-encrypted-java-applications-jhsdb",sections:[["Cracking encrypted Java applications using jhsdb (hotspot debugger)",null,["One solution for Java code protection is class file encryption. This type of solution loads the encrypted class file or jar file through a self-defined loader, which is useless due to the existence of the JVM’s Attach mechanism and can be easily cracked with the tools that come with the JDK."]],["Sample Application","sample-application",["Below is a sample application with a simple swing window and a button.","https://github.com/3-keys/test-swing-app","img"]],["Encrypt Application","encrypt-application",["Export a runnable jar file with Eclipse and use an encryption tool to encrypt the jar file. After encryption, the structure of the jar file is as follows:","img","test-swing-app.jar is the encrypted jar file data, the Launcher classes are the custom loading classes of this tool, and the encrypted jar package is still run through the standard java -jar command"]],["Crack the encrypted application","crack-the-encrypted-application",["First, run the encrypted jar file, then find the bin directory of JDK and you should be able to find a jshdb file.","1_nsxbwNJrGJB4mpzsQv55VA","Execute jhsdb hsdb, open HotSpot Debugger, if it is under Windows, you may need to run as administrator, click File to select Attach to HotSpot process…,","img","Linux system through ps aux | grep java command, Windows system through the task manager to find the pid of the process, in the following dialog box, enter the process pid","img","After successfully attaching it, click Tools->Class Browser","img","The class Browser contains information about all loaded classes, search for com.example and you may see all the classes under com.example","img","Click on com.example.TestWindow @0x0000…. and then click “Create .class File”","img","cd to the directory where the jhsdb command was executed before, you can see the generated class file","img","Use Luyten or jadx to open the class file and you can see the decompiled code","img"]]]},{url:"/articles/deobfuscate-with-vlx-vmengine",sections:[["使用vlx-vmengine进行反混淆",null,["vlx-vmengine-jvm是一个使用Java实现的Java字节码执行引擎，其使用请参考https://github.com/vlinx-io/vlx-vmengine-jvm","有如下一段简单的Java代码","编译为类文件，并使用某个混淆引擎混淆后，得到如下文件，","a.class","使用jadx打开后发现，除了main 函数之外，其他信息都面目全非，字符串也已经被加密。","image-20230521195209691","但是即使混淆了，类的基本结构与字节码信息仍然是存在的，使用ClassViewer 打开a.class, 可以看到类的方法与字节码信息","image-20230521200149593","无论如何做混淆，也仅能够在静态层面上混淆代码，提升分析的复杂度，在动态运行中仍然需要还原程序原来的运行逻辑，使用vlx-vmengine-jvm","运行混淆后代码的main方法，得到如下输出","从控制台输出可以看到程序还原了原来的行为，即打印输出Hi, George，同时从输出中我们也可以判断字符串的解密函数在private static java.lang.String a.a(int,int)，其参数为7144与-13249，如果继续使用vmengine调试a.a(int,int)方法即可发现该混淆引擎使用的字符串加密方法。"]]]},{url:"/articles/excelsior-jet-alternative",sections:[["Excelsior JET Alternative",null,['On May 15, 2019 Excelsior announced discontinuation of Excelsior JET in an e-mail to their customers[8] and next day also on their website.[9] Support was announced to be stopped and the engineering team to leave completely within only ~2 weeks ("early June 2019") and Website for downloads announced to be offline mid of June (within only ~4 weeks).']],["Protector4J is much more than Excelsior JET Alternative","protector4-j-is-much-more-than-excelsior-jet-alternative",["Protector4J can help you to protect your java source code by encrypting the classes, it made a custom native ClassLoader by modifying the JVM. The Java classes are encrypted by AES and decrypted in the native ClassLoader. And it also introduces some mechanisms to improve the difficulty of cracking.","Protector4J can also help to to create the executable wrapper of your Java App for Windows, Linux, macOS"]]]},{url:"/articles/extract-java-classes-information-from-aot",sections:[["Extract Java classes information from AOT compiled binary file",null,["AOT compilation is a topic that has been discussed in the Java world for a long time, but until GraalVM appeared, there was no tool that could achieve a better AOT compilation, let alone drive the whole ecosystem. Although GraalVM provides the native-image tool that can effectively help developers perform AOT compilation, it is still very difficult to achieve an out-of-the-box AOT compilation for Java applications due to the complexity and diversity of the Java ecosystem, especially since reflection and proxy technologies are widely used in various common frameworks."]],["Spring Native Project","spring-native-project",["Thanks to the Spring Native project from the Spring framework team, they can achieve a one-click AOT compilation of the project through Maven or Gradle plug-ins. Of course, it is currently only available for Spring Boot projects."]],["Use Sping Native to generate AOT compiled Java programs","use-sping-native-to-generate-aot-compiled-java-programs",["Here is the official Spring Native example to generate an AOT-compiled Java application (test environment: Ubuntu 20.04, Docker 20.10.6)","After a relatively long compilation time and a lot of memory consumption, we can get the AOT compiled Java program in the target directory, which is a standalone binary and can run independently without any dependencies.","img","petclinic-jpa is the program compiled by AOT and can be run directly"]],["Extract Java classes information from AOT compiled binary file","extract-java-classes-information-from-aot-compiled-binary-file",["Java code protection has been a very difficult problem in the past, and AOT is also considered a solution for Java code protection, but unfortunately, many Java programs nowadays cannot be separated from the framework, and due to the complexity of the framework, even programs compiled by AOT have to include class information into the final generated binary file, and the class files are actually neatly arranged in the resources area of the binary file.","The following tool can scan and extract class information from AOT compiled binary files","https://github.com/3-keys/binary-classfile-reader","Take the petclinic-jpa obtained in the previous step as an example, extract the class information from it, compare it with the source code, and you can see that Model information, Controller information, and Service information can all be obtained.","img"]]]},{url:"/articles/graalvm-nativeimage-reverse-engineering",sections:[["GraalVM NativeImage 逆向还原",null,["Java代码还原与保护是一个老生常谈的问题，由于Java类文件的采取字节码格式保存，包含了许多元信息，所以可以很容易还原成原始代码。为了保护Java代码，业界采用了许多手段，比如混淆、字节码加密、JNI保护等等，但是无论哪种方法，都仍存在破解的方法和途径。","二进制编译，一直被认为是代码保护较为有效的一种方法，Java的二进制编译被撑为AOT技术(Ahead of Time)，即提前编译。","但是由于Java语言的动态特性，二进制编译需要处理反射、动态代理、JNI加载等问题，存在许多的困难，所以很长时间一来，Java的AOT编译方面一直缺乏一个成熟可靠、适应性强并且可大范围应用于生产环境的工具。（曾经有一个叫做ExcellisorJET，如今似乎已停止维护）","2019年5月，Oracle推出了GraalVM 19.0，一个多语言支持的虚拟机，19.0是它第一个面向生产环境的版本。GraalVM中提供了一个NativeImage工具，能够实现Java程序的AOT编译。经过几年的发展，目前NativeImage已经十分成熟，SpringBoot 3.0已经可以使用它将整个SpringBoot工程编译生成一个可执行文件，编译后的文件，启动速度快，内存占用低，具有非常好的效果。","那么，对于已经迎来二进制编译时代的Java程序来说，其代码是否仍是像字节码时代一样容易被逆向还原呢，NativeImage编译的二进制文件又有哪些特点，二进制编译的强度是否足够用来保护重要的代码？","为了探讨上述问题，笔者近期编写了一个NativeImage分析工具，已经能达到一定的逆向还原效果。"]],["项目地址","",["https://github.com/vlinx-io/NativeImageAnalyzer"]],["生成NativeImage","native-image",["首先我们需要生成一个NativeImage，NativeImage来自于GraalVM，访问https://www.graalvm.org/ 下载Java 17版本，下载完成后设置好环境变量，GraalVM中同样包含了一个JDK，因此可以直接使用它执行Java命令.","添加$GRAALVM_HOME/bin到环境变量，之后执行","编写一个简单Java程序","编写一个简单的Java程序，例如","编译并运行上述Java程序","可以得到程序输出","编译环境准备","如果是Windows用户需要提前安装好Visual Studio, 如果是Linux与macOS用户，需要提前安装好gcc与clang等工具。","Windows用户在执行native-image命令之前，需要先设置好Visual Studio的环境变量，可以通过下述命令设置","如果Visual Studio的安装路径与版本不同，请自行调整相关路径信息。","使用native-image进行编译","现在使用native-image命令将上面这个Java程序编译成二进制文件, native-image命令的格式与java命令格式一致，同样有-cp, -jar这些参数，如何使用java命令来执行程序，就使用同样的方式进行二进制编译，只不过命令从java换成了native-image。执行命令如下","经过一段时间的编译，期间可能会占用较多的CPU与内存，可以得到一个编译后的二进制文件，输出文件名默认为主类名的小写，此处为hello，如果是Windows下则为hello.exe，使用file命令来查看这个文件的类型，可以看到这确实是个二进制文件了","执行这个文件，其输出与前面使用java -cp . Hello的结果一致"]],["分析NativeImage","native-image-2",["使用IDA进行分析","使用IDA打开上面步骤编译的hello，点击Exports查看符号表，可以看到个svm_code_section符号，其地址就是Java Main函数的入口地址","image-20230218194013099","定位到这个地址，查看汇编代码","image-20230218194126014","可以看到已经是标准的汇编函数的样子了，使用F5进行反编译","image-20230218194235234","可以看到进行了一些函数调用 ，传递了一些参数，但是不容易看出逻辑。","我们双击sub_1000C0020，看看调用函数的内部，IDA提示分析失败","image-20230218194449494","NativeImage 反编译的逻辑","因为NativeImage的编译是基于JVM的编译，也可以理解为给二进码代码套了一层VM保护，所以IDA这类工具，在缺乏相应信息以及针对性处理措施的情况下，是无法很好的对其进行逆向还原的。","但是不论何种形式，以字节码的形式，还是以二进制的形式，JVM的执行的一些基本要素必然是存在的，例如类的信息，字段的信息，函数的调用与参数的传递等，基于这个思路，笔者编写的分析工具已能达到一定的还原效果，并且再加以完善的话，有能力达到足够高级别的还原度。","使用NativeImageAnalyzer进行分析","访问https://github.com/vlinx-io/NativeImageAnalyzer下载NativeImageAnalyzer","执行下述命令进行逆向分析，目前仅分析主类的Main函数","得到输出如下","我们再来看下原来的代码","我们现在来看下System.out的定义","可以看到System类的out变量是一个PrintStream类型的变量，并且是一个静态变量，NativeImage在编译的时候直接将这个类的实例编译到一个叫做Heap的区域，二进制代码直接从Heap区域获取这个类的实例进行调用，我们再来看下还原后的代码","这里的java.io.PrintStream@0x554fe8 就是从Heap区域中读出的java.io.PrintStream的实例变量，其在内存中的地址为0x554fe8","我们再来看下java.io.PrintStream.writeln 函数的定义","我们这里可以看到writelin函数中有一个String类型的参数，而还原的代码中为什么传递了三个参数了，首先writeln是一个类成员方法，只默认隐藏了一个this变量指向调用者，即传递的第一个参数java.io.PrintStream@0x554fe8，至于第三个参数rcx，是因为在进行汇编代码分析的过程中判断这个函数调用了三个参数，但实际上看定义我们知道这个函数实只调用两个参数，这也是本工具后续需要改进的地方。"]],["一个复杂点的程序","",["我们接下来分析一个复杂点的程序，比如计算一个Fibonacci数列，代码如下","编译并执行","使用NativeImageAnalyzer还原后获得代码如下","把还原后的代码与原代码比较下","对应的是","rdi是用来传递函数的第一个参数的寄存器，如果在Windows下则是rdx，rdi=rdi[0]即对应了args[0]，之后调用java.lang.Integer.parseInt解析获得一个int数值，然后将返回值赋值给一个栈上变量sp_0x44","对应的是","我们在Java代码中非常简单的字符串相加操作，在Java背后实际转为了StringConcatHelper.mix，StringConcatHelper.prepend,StringConcatHelper.newString三个函数的调用，其中StringConcatHelper.mix计算字符串相加后的长度，StringConcatHelper.prepend用来将具体承载字符串内容的byte[]数组组合在一起，StringConcatHelper.newString则通过byte[]数组生成一个新的String对象","我们在上面这段代码看到了两个类型的变量名称，sp_0x18与tlab_0，sp_开头的变量，表示这是一个在栈上分配的变量，tlab_开头的变量表示在Thread Local Allocation Buffers上分配的变量，这里仅是对这两种变量名称的由来做一个说明，在还原代码中这两类变量没有区别，关于Thread Local Allocation Buffers的相关资料，大家可以自行查找。","我们这里给tlab_0赋值为Class{[B}_1, Class{[B}_1的含义是这是byte[]类型的对象实例, [B为byte[]类型的Java描述符，_1表示是这个类型的第一个变量，后续如果再定义了对应类型的变量则序号相应增加，如Class{[B]}_2,Class{[B]}_3等，如果是其他类型也是同样的表示方式如Class{java.lang.String}_1, Class{java.util.HashMap}_2等","上面这段代码的逻辑简单解释了创建一个byte[]数组实例，并赋值给tlab0，数组长度为ret_2 &lt;&lt; ret_2 &gt;&gt;32，数组的长度之所以是ret_2 &lt;&lt; ret_2 &gt;&gt; 32，是因为String计算长度时需要根据编码对数组长度进行一定的换算，大家可以查找java.lang.String.java中的相关代码。接下来即通过prepend函数将0，1还有空格都并入到tlab0，再从tlab_0中生成一个新的String对象ret_30，传递给java.io.PrintStream.write函数打印输出。其实这里还原出来的prepend函数的参数，并不是很正确，参数的位置也不正确，这也是后面需要再完善的一个地方。","两行的Java代码转换成实际的执行逻辑之后，还是比较复杂的，后续可以在目前已还原代码的基础上通过分析整合为简化的模式。","继续往下走","对应的是","sp_0x44为我们输入给程序的参数，即为count，count只有>=3才会执行Java代码中的for循环，这里将for循环还原为while循环，本质上语义是一质的，在while循环之外，程序代码执行了count=3的逻辑，如果count<=3，程序即执行完成，不会再进入while循环，这可能也是GraalVM在编译时做得一个优化。","我们再看下循环的跳出条件","此处即对应了","同时rcx在每次循环过程中也在累加","即对应了","接下来，我们看看循环体中关于数值相加的逻辑如何在还原后的代码中体现，原始代码为","还原后的代码为","循环体中的其他代码即跟前面一样执行字符串相加与输出操作，还原后的代码基本体现了原代码的执行逻辑。"]],["还需要进一步完善的地方","",["目前这个工具已能够基本还原程序控制流，实现一定程度的数据流分析与函数名称还原，要成为一个完善可用的工具，还需要完成下面几点：","较为准确的函数名称、函数参数、函数返回值还原","较为准确的对象信息与字段的还原","较为准确的表达式与对象类型推断","语句整合与简化"]],["关于二进制保护的思考","",["本项目的目的在于探讨NativeImage逆向还原的可行性，从目前的成果来看，NativeImage的逆向还原是可行的，这也给代码保护带来了更高的挑战，许多的开发者认为，将软件编译为二进制即可高枕无忧了，而忽略了对二进制代码的保护。对于C/C++编写的软件，目前许多工具，比如IDA已经有了非常好的还原效果，甚至暴露程度不低于Java程序，笔者甚至看到有些以二进制形式发行的软件，连函数名称的符号信息都不去除，此种情况下无异于裸奔。","任何的代码都是由逻辑组成，只要其包含逻辑，就有可能通过逆向的手段还原其逻辑，只不过在于还原难度的差别而已，而代码保护工作就是尽最大程度是加大这种还原的难度。","最后，在此求个关注，这是本公众号的第一篇文章，大家如果觉得文章内容有价值，欢迎转发关注。后续将努力为大家奉献关于程序开发、逆向保护、网络安全等方面有价值的内容，与大家共同交流学习，谢谢！"]]]},{url:"/articles/jvm-bytecode-engine-written-with-java-and-kotlin",sections:[["使用Java/Kotln编写的JVM字节码执行引擎",null,[]],["JAVA 字节码执行引擎","java",["传统的Java动态调试仅能够基于源码级别，如果没有源码，或者被混淆后的Java类文件，则无法进行动态调试。","Java程序的运行基于JVM虚拟机， JVM虚拟机以字节码作为执行的基础，我们使用Kotlin构造了一个JVM字节码执行引擎，可以借助现代的IDE，如IDEA，在字节码层面对Java程序进行调试，以观察程序的运行行为。","注意，本项目仅用于学习和研究JVM的运行原理以及对恶意程序进行分析，严禁将其应用于非法用途。"]],["前置知识基础","",["使用本项目前，请确保你已经有如下知识基础","了解Java类文件的格式","了解JVM的各个字节码的作用和含义"]],["使用IDEA在字节码层面进行调试","idea",["使用IDEA打开本项目(需要JDK17)，并转到TestCases","TestCases中有两个测试用例，一个用于执行静态方法，一个用于执行实例方法，分别为executeStaticMethod与executeVirtualMethod,","在对应的方法上，填充上classPath, className, methodName, methodSignature这些信息，\n类文件的详细信息可以使用ClassViewer查看。","直接运行","以下面这段代码编译的类文件为例","执行executeVirtualMethod, 运行该类的hello方法","可以在控制台得到如下输出","控制台输出展示了该方法所有的字节码指令，在指令执行中堆栈的变化情况，以及每个字节码指令运行的结果","断点调试","如果需要断点调试字节码指令，可以在VMExecutor中的execute()方法上下断点","调试子方法字节码","默认情况下，虚拟引擎仅解释执行指定方法的字节码，在指定方法中调用的子方法，仍然在JVM中运行，避免多层调用的巨大性能开销，如果希望所有的方法都通过虚拟引擎\n解释执行，请修改io.vlinx.vmengine.Options，将handleSubMethod修改为true"]]]},{url:"/articles/protecting-java-source-code-beyond-obfuscation",sections:[["Protecting Java Source Code Beyond Obfuscation",null,["Java class files are easy to reverse-engineer. The very properties that enable Java applications to run anywhere make reverse translation straightforward.","There are a number of Java decompilers on the market that produce amazingly readable source code. Any person of ordinary skills in programming can download a Java decompiler, run your application through it and read the source code almost as if it was open source."]],["Obfuscation","obfuscation",["An obfuscator can make the decompiled code less comprehensible. However, name obfuscation may cause reflection and JNI failures, whereas extensive control flow obfuscation negatively impacts performance and may provoke a VerifyError. To make things worse, these problems only manifest themselves when the respective class is actually loaded at application run time, and thus may slip through the QA process. And reverse engineering of an equivalent C++ program passed through an optimizing compiler would still be more difficult."]],["Strengthening Protection with Protector4J","strengthening-protection-with-protector4-j",["Protector4J can help to protect your java source code by encrypting the classes, it made a custom native ClassLoader by modifying the JVM. The Java classes are encrypted by AES and decrypted in the native ClassLoader. And it also introduces some mechanisms to improve the difficulty of cracking.","Encrypting your code protects your intellectual property and substantially improves the security of your Applications. It makes IP theft, code tampering, and discovery of security vulnerabilities involve an expensive reverse engineering effort, whereas practically anyone can download and run a free Java decompiler.","Protector4J can also help to to create the executable wrapper of your Java App for Windows, Linux, macOS"]]]},{url:"/articles/the-issues-of-aot-protection",sections:[["AOT编译存在的问题",null,["AOT编译即将Java代码编码为本地代码，不仅大大提高了Java程序的运行速度，而且由于将Java代码转换为机器代码，因此也间接达到了保护Java代码的目的。","对于Java程序来说，特别对于基于各类框架的Java程序，由于包含了许多动态特性，进行AOT编译是一个巨大的挑战，同时为了向动态性做出妥协，编译完成后的二进制文件中仍然可能包含大量类文件信息。下面这篇文章即介绍了一个项目，通过扫描编译好的二进制文件获取到类信息\nhttps://protector4j.com/articles/extract-java-classes-information-from-aot/","即使二进制程序中不包含类文件信息，但是其运行逻辑仍然是同样存在的，只不过表示形式由原来的字节码表示转换为机器代码表示，并没有进行特别的保护，如果能够了解其本身的编译与运行机制，仍然能够逆向还原出可读性的代码。下面这篇文章即介绍了这样一个项目","https://protector4j.com/articles/graalvm-nativeimage-reverse-engineering/"]],["结论","",["AOT编译配置难度大，编译难度大，编译失败概率高，即使编译成功，代码逻辑也仅是由原来的字节码表示转换为机器代码表示，其本身的运行逻辑仍然存在，并没有进行特别的保护，如果能够了解其本身的编译与运行机制，仍然能够逆向还原出可读性的代码。"]]]},{url:"/articles/the-issues-of-class-encryption",sections:[["Java类文件加密存在的问题",null,["除了混淆之外，类文件加密是一种很容易被想到的代码保护方式，许多方案采用agent的方式对类文件进行加密，并在类加载的时候解密。但这些方案都忽略了很重要的一点，即JVM自带的附加机制"]],["JVM附加机制","jvm",["为了便于对程序的运行状况进行分析与监测，普通的JVM都带有附加自制，用户可以使用jhsdb这类工具，附加到JVM进程，对其内存数据进行查看和分析，并且这些内存数据还是按照源文件中的数据结构被妥善组织好的，这也可以理解为JVM自带的一种后门机制。","下面这篇文章介绍了如何使用JVM附加机制读取并保存内存中的类文件信息","https://protector4j.com/articles/cracking-encrypted-java-applications-jhsdb/","除了可以使用JDK自带的jhsdb工具之外，还可以使用阿里巴巴的Arthas对运行中的Java进程进行分析。"]],["结论","",["由于JVM附加机制的存在，所有未脱离普通JVM运行的所谓加密代码，都可以使用附加工具轻松读取，因此这是一种最无效的保护方案。"]]]},{url:"/articles/the-issues-of-code-obfuscation",sections:[["代码混淆存在的问题",null,["代码混淆是最早应用于Java代码保护的方案，也是一个最直接的方案。","代码混淆通常有下面四种方法：","包名、类名、变量名转换","控制结构改变，如控制流平坦化、添加不可变谓词等","字符串混淆或加密","添加无用代码","代码混淆可以大幅降低反编译代码的可读性，提升静态分析的难度，但是无论如何进行代码混淆，程序的运行逻辑是不会改变的。","JVM字节码上是一种语义很清晰明确，且极为阅读的中间代码，对于被混淆的class文件，即使无法还原成可读的Java源代码，仍然可以在字节码层面进行分析，由于Java字节码的高语义性，这个过程其实还是比较容易的","我们曾使用Java与Kotlin语言开发了一个JVM字节码执行引擎，用户可以使用这个项目在IDEA中对Java程序进行字节码级别的动态调试。具体可参考下面这篇文章","https://protector4j.com/articles/jvm-bytecode-engine-written-with-java-and-kotlin/","并且我们使用这个引擎尝试破解一个较为有名的混淆引擎混淆后的代码，具体过程可参见下面这篇文章","http://protector4j.com/articles/deobfuscate-with-vlx-vmengine/"]],["结论","",["从上面的分析中可以看到，由于JVM字节码的高语义性，使得期极为容易被分析与阅读，使用动态调试的方式可以很容易分析出其运行逻辑，而动态调试工具的编写并不是一件十分复杂的事情，因此混淆并不是一种可靠的保护方案。"]]]},{url:"/articles/the-issues-of-vm-protection",sections:[["虚拟化保护方案存在的问题",null,["混淆能够提升静态分析的难度，但无法有效防范动态分析，代码虚拟化的目的即在于提高动态分析的难度。","Java的代码虚拟化即通过构建自定义的虚拟化引擎，使原来可以直接即使的字节码，通过虚拟化引擎执行，由于是自定义的虚拟化引擎，外界无法直接获取到其执行方式，指令格式等信息，并且产生了大量的代码膨胀，因此难以逆向出包含其原语义信息的代码。"]],["虚拟化对于性能的影响","",["虚拟化保护是一种强度极高的代码保护方案，但是虚拟化保护存在的一个最大的问题即是：性能，自定义的虚拟化引擎难以像JVM一样采取众多的性能优化措施，\n也无法应用JIT这类的性能优化技术。你们可以尝试使用我们之前提到过的JVM引擎与普通JVM执行相同的代码，然后比较下性能，可能会得到百倍以上的性能差距。","由于虚拟化对于性能的严重影响，所以虚拟化保护无法应用于全部代码，只能应用于部分关键代码，其他代码仍然需要使用混淆或者加密的方式进行保护，由于其他部分代码未使用虚拟化进行保护，就可以在其他代码中找到虚拟化代码的入口，从而在入口与出口处直接分析代码功能，而不需要理解整段代码的逻辑。"]],["结论","",["虚拟化保护是强度最高的一种代码保护方式，但是由于期对性能的严重影响，因此无法应用到程序中的全部代码，而只能保护关键代码，其他代码仍然有暴露的风险，而以其他部分代码来切入口，就可以获取到虚拟化部分代码的功能信息。"]]]},{url:"/articles/what-is-jarx-file",sections:[["What is jarx file",null,["Jarx files are our proprietary archive file format, which uses the same Deflate compression algorithm as Zip, and AES encryption algorithm to encrypt data.","The structure of a Jarx file is similar to all archive file types, consisting of entries, which is organized in our proprietary way, and the names and contents of the entries are encrypted using the AES algorithm.","Since the jarx file format is not publicly available, and the contents and names of the entries are encrypted, and there are no tools available to decompress and jarx files directly, using Jarx files not only protects the content of your class files, but also protects the entire structure of the jar file, that is, the outside world can not even get the name of your class, which will make it more difficult to crack."]]]},{url:"/docs/changelog",sections:[["Changelog",null,[]],["3.0.2 2023-05-29","3-0-2-2023-05-29",["Fix the decoding issue under Windows"]],["3.0.1 2023-05-25","3-0-1-2023-05-25",["Fix the startup issue of mac-aarch64 version"]],["3.0.0 2023-05-20","3-0-0-2023-05-20",["New application launch system","New decoding system","Java 8 can now run programs with the -jar command"]],["2.12.5 2023-05-12","2-12-5-2023-05-12",["Fix the issue that jdk8 can't find freetype on macOS"]],["2.12.4 2023-02-28","2-12-4-2023-02-28",["Update backend"]],["2.12.3 2023-02-24","2-12-3-2023-02-24",["Fix an error in decoder"]],["2.12.2 2023-02-21","2-12-2-2023-02-21",["Enhanced encryption security"]],["2.12.1 2023-02-03","2-12-1-2023-02-03",["In order to avoid download failures due to temporary network problems, all downloads will throw an exception after 3 failed attempts"]],["2.12.0 2023-01-20","2-12-0-2023-01-20",["Update JDK17 to 17.0.6+9"]],["2.11.2 2022-12-22","2-11-2-2022-12-22",["Fix antother ZipFileSystem error about Java 17"]],["2.11.1 2022-10-10","2-11-1-2022-10-10",["Fix the ZipFileSystem error under Java 17"]],["2.11.0 2022-10-06","2-11-0-2022-10-06",["Add application startup script","Add duplicate class detection"]],["2.10.2 2022-10-04","2-10-2-2022-10-04",["Fix the network connection error caused by low timeout setting"]],["2.10.1 2022-09-30","2-10-1-2022-09-30",["Fix the issue that the application will automatically quit when launched with different users under Linux"]],["2.10.0 2022-08-27","2-10-0-2022-08-27",["Resign with new certificate for Windows"]],["2.9.3 2022-08-12","2-9-3-2022-08-12",["Fix the issue of not being abile to read dir entry while the name is without slash."]],["2.9.2 2022-08-09","2-9-2-2022-08-09",["Fix the issue that when the size of ZipEntry is 0, reading resources generates exception."]],["2.9.1 2022-08-03","2-9-1-2022-08-03",["Fix the bug that tomcat cannot read secondary directory resources","An error message is given when the main class is not specified"]],["2.9.0 2022-07-13","2-9-0-2022-07-13",["Fix the issue that resources cannot be correctly read from encrypted jar packages","Provide support for spring boot application with war packaging structure"]],["2.8.1 2022-06-16","2-8-1-2022-06-16",["Fix a issue about running the new release Java 8 under Windows"]],["2.8.0 2022-06-14","2-8-0-2022-06-14",["Provides support for Vaadin applications"]],["2.7.3 2022-05-23","2-7-3-2022-05-23",["Update JDK17 version to 17.0.4+3"]],["2.7.2 2022-05-22","2-7-2-2022-05-22",["Fix java 8 splash screen parameter issue","tomcat-launcher supports adding JVM parameters"]],["2.7.1 2022-05-18","2-7-1-2022-05-18",["Fix the error of decompressing JDK8 when generating Tomcat applications under Windows"]],["2.7.0 2022-02-23","2-7-0-2022-02-23",["Update Java 17 to 17.0.3-2","Fix the issue of missing vcruntime140.dll in Java8"]],["2.6.6 2022-02-17","2-6-6-2022-02-17",["Fix the issue when there is no WEB-INF/lib folder in the war package"]],["2.6.5 2022-01-17","2-6-5-2022-01-17",["Under Apple Silicon, if Java 8 or Java 11 is selected as the target Java version, applications for x86 platforms are generated without selecting a specific platform"]],["2.6.4 2022-01-16","2-6-4-2022-01-16",["Add service creator for Linux x86 and Linux ARM64","Fix the issue of Java 8 FontManager under macOS"]],["2.6.3 2021-12-27","2-6-3-2021-12-27",["Fix the issue while processing not standard Tomcat war file"]],["2.6.2 2021-12-21","2-6-2-2021-12-21",["Fix the issue that the wrapper does not read JVM parameters correctly under Java 8"]],["2.6.1 2021-11-29","2-6-1-2021-11-29",["Fix the issue that the program cannot run correctly under the space path or non-English character path","Fix the issue that Java 17 cannot run jar package with -jar command"]],["2.6.0 2021-11-22","2-6-0-2021-11-22",["Added support for Java 8, Java 11 and Java 17, remove Java 15","Add support for Apple Silicon","Fix the issue that the application automatically exit in some cases"]],["2.5.7 2021-10-12","2-5-7-2021-10-12",["Fix the issue that exe wrapper cannot read the configuration file correctly"]],["2.5.6 2021-09-25","2-5-6-2021-09-25",["Add support for Spring Boot war packaging"]],["2.5.5 2021-08-22","2-5-5-2021-08-22",["Improve the communication mechanism between parent and child processes","Fix the issue of wrapper exiting incorrectly"]],["2.5.4 2021-08-17","2-5-4-2021-08-17",["Fix the issue about win32 platform"]],["2.5.3 2021-08-15","2-5-3-2021-08-15",["Provides support for subfolder library dependencies"]],["2.5.2 2021-08-05","2-5-2-2021-08-05",["Fix the issue that the program automatically quits after resuming from sleep mode","Fix the issue of not running correctly under Windows Server 2012"]],["2.5.1 2021-07-30","2-5-1-2021-07-30",["Fix the issue that some configuration files of Tomcat and Spring Boot application cannot be read correctly",'"Include Removed JavaEE Modules" is selected by default now']],["2.5.0 2021-07-25","2-5-0-2021-07-25",["Add service creator","Reseuming java process",'"Only Encrypt Jar files" can only be selected by Licensed User']],["2.4.0 2021-07-18","2-4-0-2021-07-18",["Provides support for Windows x86","Provides support for Linux x86","Provides support for Linux AArch64","Bugs fixed and improvement"]],["2.3.0 2021-07-11","2-3-0-2021-07-11",["Change the encrypted file extension from jarx to jar","Provides encrypted file format support for NIO","Provides support for Quarkus framework","Improve the ui of task completion dialog","Fix issues in add-executable-permission script"]],["2.2.2 2021-07-06","2-2-2-2021-07-06",["Fix the issue that resources cannot be loaded properly because of the incorrect value of java.class.path"]],["2.2.1 2021-06-29","2-2-1-2021-06-29",["Fix incorrect name of resources when exporting to multiple platforms"]],["2.2.0 2021-06-28","2-2-0-2021-06-28",["Fix the issue about ClassLoader resource loading","Adjust the structure of wrapper.json file","Fix some issues about file lock","Other issue fixes and improvements"]],["2.1.3 2021-06-20","2-1-3-2021-06-20",['Fix the issue of "=" display in configuration file',"Add some hints about features on the UI"]],["2.1.2 2021-06-08","2-1-2-2021-06-08",["Fix the issue of jar-launcher getting lib folder path error"]],["2.1.1 2021-06-05","2-1-1-2021-06-05",["Fix the issue about creating mult executable files"]],["2.1.0 2021-05-12","2-1-0-2021-05-12",["Upgrade JavaWrapper to support specifying lib folder for multiple program runs","Provides java/security/acl/Group support which remove since Java 13","Fix issue about module checking","Fix the issue about javaxw on Windows"]],["2.0.2 2021-05-04","2-0-2-2021-05-04",["Provides a javax process that can run java programs in the traditional way","Fix the issue of repeatedly running spring boot tasks in GUI"]],["2.0.1 2021-04-29","2-0-1-2021-04-29",["Fix the error about space path in macOS and Linux","Fix the issue that InfoDialog has no scroll bar","Update  task file templates and remove some useless fields","Fix the issue of wrong deployment path of readme files","Fix the issue that the task file cannot be loaded correctly due to inconsistent field names","Other bug fixes"]],["2.0.0 2021-04-22","2-0-0-2021-04-22",["Major version upgrade","Change the encryption solution from class file encryption to jar file encryption, which not only protects the content of class files, but also protects the entire application structure.","Upgrade the Java version, based on Java 15, and no longer provide other Java version options.","Change the way to run the generated application, no longer use the jre/bin/java -jar xxx.jar to run it, but directly use the executable file generated during the encryption task. Tomcat still runs in the same way as before.","The user information is no longer written into the task file, but as the arguments of the command line tool. The password parameter is just the password now, not longer the md5 value.","Optimize the encryption process, greatly shorten the encryption time.","Disable Java memory dump and analysis","Disable Java attach mechanism","Disable Java agent","Other upgrades and fixes."]],["1.11.0 2021-02-14","1-11-0-2021-02-14",["Builtin jdk update"]],["1.10.4 2021-01-26","1-10-4-2021-01-26",["Fix the issue about javafx11 under macOS"]],["1.10.3 2020-12-18","1-10-3-2020-12-18",["Fix an issue about Tomcat-9.0.39","Fix an issue about loading task file"]],["1.10.2 2020-12-02","1-10-2-2020-12-02",["Fix the error of reading non-standard jar files"]],["1.10.1 2020-12-04","1-10-1-2020-12-04",["Update version of jdk11 to 11.0.9+1 and version of jdk8 to 8u272"]],["1.9.8 2020-11-14","1-9-8-2020-11-14",["Update tomcat versions to 8.5.59 and 9.0.39"]],["1.9.7 2020-09-24","1-9-7-2020-09-24",["Export and load task file in UI Tool","Update some documentations","Bug fixes"]],["1.9.6 2020-09-05","1-9-6-2020-09-05",["Fix the issue about the binary files in jre/bin"]],["1.9.5 2020-08-29","1-9-5-2020-08-29",["Fix the issue about file descriptors leak in Linux"]],["1.9.4 2020-08-23","1-9-4-2020-08-23",["Fix the error about login on UI tool"]],["1.9.3 2020-08-22","1-9-3-2020-08-22",["ProtectAll and ProtectInnerJars can't set to true together","Bug fixes"]],["1.9.2 2020-08-02","1-9-2-2020-08-02",["Signed Application Package of Windows","Signed Application Package of Mac","Sigend JRE/JDK Package of Windows","Signed JRE/JDK Package of macOS","Bug fixes"]],["1.9.0 2020-04-21","1-9-0-2020-04-21",["Update executable wrapper","Update Tomcat service wrapper","Update Spring Boot service wrapper","Adjust the file structure","ClassName Encryption (Alpha)","Bug fixes"]],["1.8.5 2020-03-31","1-8-5-2020-03-31",["Fix argument error of Windows exe wrapper","Add tip about JavaFX for JDK11"]],["1.8.4 2020-03-25","1-8-4-2020-03-25",["Add exclusion list","Optimize encryption workflow","Bug fixes"]],["1.8.3 2020-03-11","1-8-3-2020-03-11",["Add support for all versions of ASM library"]],["1.8.2 2020-03-08","1-8-2-2020-03-08",["Add key seed to generate the fixed key"]],["1.8.0 2020-03-05","1-8-0-2020-03-05",["Update windows executable wrapper","Add single instance support of exe wrapper","Update encrypt classes page","Restore to SWT UI","Bug fixes"]],["1.7.3 2020-02-22","1-7-3-2020-02-22",["Fix JavaFX distribution error"]],["1.7.2 2020-02-12","1-7-2-2020-02-12",["Add Windows service wrapper","Fix platform selection error"]],["1.7.1 2020-02-08","1-7-1-2020-02-08",["Add support for jlink to create  custom/mod JVM","Fix tomcat distribution error"]],["1.7.0 2020-02-07","1-7-0-2020-02-07",["Add executable wrapper"]],["1.6.0 2020-01-23","1-6-0-2020-01-23",["Add support for ARM(aarch64) platform"]],["1.5.2 2019-12-17","1-5-2-2019-12-17",["Add readme tips","Fix an error about waiting for background task to finish"]],["1.5.1 2019-12-09","1-5-1-2019-12-09",["Update communication protocol"]],["1.5.0 2019-12-03","1-5-0-2019-12-03",["Important security enhancements","Add support for JavaFX","Add support for CentOS 6"]],["1.4.6 2019-11-19","1-4-6-2019-11-19",["Fix the some errors about the path with space"]],["1.4.5 2019-10-28","1-4-5-2019-10-28",["Add support for 32bit platforms","Change config file format to yaml"]],["1.4.2 2019-10-11","1-4-2-2019-10-11",["Fix some errors on new ui"]],["1.4.1 2019-10-04","1-4-1-2019-10-04",["Add support for eclipse plugin"]],["1.4.0 2019-10-03","1-4-0-2019-10-03",["New ui components and theme","Fix an error about inner jars"]],["1.3.1 2019-09-21","1-3-1-2019-09-21",["Fix an error about GlassFish App"]],["1.3.0 2019-09-17","1-3-0-2019-09-17",["Add support for full versions of spring framework"]],["1.2.0 2019-09-06","1-2-0-2019-09-06",["Add support for GlassFish App","Add support for Payara App"]],["1.1.5 2019-09-02","1-1-5-2019-09-02",["Add support for inner jars","Update UI operation about large jar/war files"]],["1.0.2  2019-08-22","1-0-2-2019-08-22",["Fix some errors on Tomcat Web App"]],["1.0.0  2019-07-13","1-0-0-2019-07-13",["First version of Protector4J","Protect Java App","Protect Tomcat Web App","Protect Spring Boot App"]]]},{url:"/docs/classname-encryption",sections:[["ClassName Encryption",null,["This feature is still in alpha stage, and only supports JavaSE App now."]],["The CLI Tool","the-cli-tool",["There is a classname-encoder[.exe] in the Protecotor4J folder, that's the tool performing ClassName Encryption. In order to run this tool, we need a configuration file first."]],["Configuration File","configuration-file",["The template of the configuration is in the task-templates folder, the filename is classname-encryption.yml","The account information","This feature is just valid for licensed user now, you need to fill your email address and the password in the configuration file.","jarsPath","The jarsPath field is an array, which you could specify one or multi jar files that need to be processed.","classesToEncryptName:","In this field, you can specify the classes that need to encrypt name. It can be a full class name, or wildcard- case ones,  just like:","or","> * means all the classes in the package, but exclude the classes in the sub packages.\n>\n> ** means all the classes in the package including the classes in the sub packages.","protectInnerJars","If this value is true, the classes in the inner jars will be processed too.","exclude","In this field, you can specify the classes to exclude from encryption, the format is the same as classesToEncrypt field.","stored","If the app is spring-boot app, please set this value to true"]],["Execute the encryption process","execute-the-encryption-process",["Please go to the Protector4J folder, the execute the command below","On Linux or macOS","On Windows","> -t task type\n>\n> -f task file","You can execute classname-encoder --help to see the detail arguments."]]]},{url:"/docs/create-multiple-executable-files",sections:[["How to create multiple executable files",null,["Normally Protector4J creates an executable file for each encryption task to run your application.","However, in some cases, an application may need to have more than one executable files, such as a main program, an update program or others.",'If you open the output directory, you can see an executable file, and a configuration file with the same name and ".json" extension. If you need to create additional executables, just copy and rename them, for example app01[.exe] with app01.json, then open the app01.json file and modify "LibFolder" and "MainClass"',"By default the executable will take all the jar files under vlxlib as the class path, you can create different LibFolder for different executables and copy the corresponding jar files to the corresponding LibFolder. For example, create an app01 folder and move all the jar files corresponding to app01 from vlxlib into it, the following file configuration shows that."]]]},{url:"/docs/get-started",sections:[["Get Started",null,[]],["Download","download",["Visit https://protector4j.com/download to download the latest version.","Platforms supported","Windows","Linux","macOS (10.14+)"]],["Installation","installation",["Windows and Linux","No special installation steps are required, just download and extract the archive.","macOS","Download the dmg file and drag Protector4J to Applications, the actual contents of this tool are in Protector4J.app/Contents/protector4j-mac",""]],["Structure","structure",["We provide both GUI Tool and CLI Tool,  You can choose the corresponding tool according to your requirement.","GUI Tool","p4j-ui[.exe] is the GUI Tool. You can complete the encryption process step by step with the wizard.","","CLI Tool","p4j[.exe] is the CLI Tool.  Execute p4j -h to view the detailed usage.","For macOS users, you can find the files in Protector4J.app/Contents/protector4j-mac","","Task File Templates","It needs to specify a task file as an argument to the command-line tool. You can modify the task file templates according to the project requirement.  The task files templates are in the task-templates folder.",""]],["Protect your Java App","protect-your-java-app",["Protect JavaSE App","Protect Tomcat Web App","Protect Spring Boot App"]]]},{url:"/docs/index",sections:[["Get Started",null,[]],["Download","download",["Visit https://protector4j.com/download to download the latest version.","Platforms supported","Windows","Linux","macOS (10.14+)"]],["Installation","installation",["Windows and Linux","No special installation steps are required, just download and extract the archive.","macOS","Download the dmg file and drag Protector4J to Applications, the actual contents of this tool are in Protector4J.app/Contents/protector4j-mac",""]],["Structure","structure",["We provide both GUI Tool and CLI Tool,  You can choose the corresponding tool according to your requirement.","GUI Tool","p4j-ui[.exe] is the GUI Tool. You can complete the encryption process step by step with the wizard.","","CLI Tool","p4j[.exe] is the CLI Tool.  Execute p4j -h to view the detailed usage.","For macOS users, you can find the files in Protector4J.app/Contents/protector4j-mac","","Task File Templates","It needs to specify a task file as an argument to the command-line tool. You can modify the task file templates according to the project requirement.  The task files templates are in the task-templates folder.",""]],["Protect your Java App","protect-your-java-app",["Protect JavaSE App","Protect Tomcat Web App","Protect Spring Boot App"]]]},{url:"/docs/install-eclipse-plugin",sections:[["Install eclipse plugin",null,["Update Site","https://protector4j.com/eclipse/","Step1","Help -> Install New Software....","","Step 2","Input the update site url and select the Protector4J Feature","","Step3","After Installation, Window -> Show View, search the protector4j view and open it.","",""]],["Download standalone version","download-standalone-version",["You also can download the standalone version from https://protector4j.com/download.html"]],["Detailed Usage","detailed-usage",["For detailed usage, please visit https://protector4j.com/docs/get-started"]]]},{url:"/docs/protect-glassfish-app",sections:[["Protect Glassfish App",null,[]],["Get Started","get-started",["If you haven't read the get started article, please read it first, it described the basic structure and concepts of Protector4J."]],["GUI Tool","gui-tool",["Execute protector4j-ui[.exe] in the folder of Protector4J, you will see the interface below","For users of macOS, please just double click the Protector4J.app","","Login","If you have got the license, you can click the login button on the top-right corner and type your account information. Although, without the license, you can also try it too.","","Choose app type",'Click the "Glassfish/Payara Application" button on the app types page.',"","Choose war/jar files to protect","Choose the war/jar files to protect, you can add single or multi jar files here.","","Options","","Protect all classes","if this option is selected, all the classes will be encrypted","Protect the specified classes","If this option is selected, you can choose which classes to be encrypted in the next step","Protect inner jars","If this option is checked, the classes in the inner jars will be encrypted too.","Choose classes to protect",'If you selected "Protect the specified classes", you should type the classes that need to protect here manually,  but also the classes need to exclude from the encryption',"","You can input the full class name like:","If you want to encrypt all the classes in the package, you can input a wildcard case like:","One * means all the classes in the package, but exclude the classes in sub packages","if you want to encrypt all the classes in the package including the classes in sub packages,  please use the wildcard case like:",'The class names or the package names above apply to all jar files, just like the classpath. We have the class information in the jars mixed together, and any classes in any jar files that meet the conditions will be encrypted or excluded, if you selected "Protect inner jars", the classes in the inner jars will be processed too.',"Although it needs to type the classes information manually, but we provide the class info tree on the right, you can view the struct there, and there is a context menu that could help you to edit the class list.","","Output options",'On this page, you can specify the Java version, the server version and the output folder. After this is done, click the "Next" button on the bottom, it will start the encryption process.',"","KeySeed","The seed to generate the encryption key,  the same key seed will generate the same encryption key. If you want jars generated from  encryption task can be used together, you can input the same keySeed. This feature is only valid for licensed user.","Encryption process","It will take some time to finish the encryption process. After it is done, you can check the result in the output folder.","","Check the result","After the encryption process complete, please go to the output folder to check the result, we have placed the glassfish folder, the java runtime and the encrypted jar/war files in it.","Run the encrypted app","For Linux and macOS","Go to the output folder, modify the glassfish/glassfish/config/asenv.conf file, set  AS_JAVA to the absolute path of our custom JRE which you can find in the output folder","Start domain1","For Windows","Go to the output folder, modify the glassfish/glassfish/config/asenv.bat file, set  AS_JAVA to the absolute path of our custom JRE which you can find in the output folder","Start domain1","Every encryption task will request a new and unique key. The files encrypted in different tasks can not be used together unless providing the key seed."]],["CLI Tool","cli-tool",["The configuration of task file","It needs to specify a task file as an argument to the command-line tool.","Please find the task.glassfish.yml in the task-templates directory, copy and modify a new one.","The account information","If you have purchased  our product, you would have got your account information including the email address and the password for the license. Please type them in the appropriate fields, the value of the password field should be the md5 value of the password, not the password itself. or you can leave the email and the password fields empty, just have a try.","Specify the jars and the classes need to be encrypted.","jarsPath","The jarsPath field is an array, which you could specify one or multi jar/war files that need to be processed in the encryption work.","or","protectAll","If this value is true, all the classes in the jar will be encrypted.","protectInnerJars","If this value is true, the classes in the inner jars will be encrypted too.","classesToProtect","In this field, you can specify the classes that need to be encrypted. it can be a full class name, or wildcard case ones","or","> * means all the classes in the package, but exclude the classes in the sub package\n>\n> ** means all the classes in the package including the classes in the sub package.","If the protectAll is true, this field will be ignored.","if you are using the version before 1.8.0,  please add WEB-INF.classes prefix for each item for the classes in WEB-INF/classes, like BOOF-INF.classes.vlinx.test.TestClass1","exclude","In this field, you can specify the classes to exclude from encryption, the format is the same as classesToProtect field.","javaVersion",'The java versions supported now are Java 8 and Java 11, you can type "java-8" for Java 8 and type "java-11" for Java 11',"serverVersion","the serverVersion is always to be glassfish-5 now.","tempFolder","The temp folder for the files generated during the encryption process, after the task completed, the files in the temp folder will be cleaned.","outputFolder","The encrypted app and the custom Java runtime will be placed into the output folder.","includeJavaFX","Whether include the JavaFX framework","keySeed","The seed to generate the encryption key,  the same key seed will generate the same encryption key. If you want to jars generated from different encryption tasks can be used together, you can input the same keySeed. This feature is only valid for licensed user.","targetPlatforms","This field is an array, the available values are [linux64, win64, mac],  you can set one or multi target platforms according to the requirement. Or leave it empty, if you just want to generate the app for current platform.","On windows, currently only supports win64 as the target platforms.","or","Execute the encryption process","Go to the folder of Protector4J and type the command below to execute the encryption process","On Linux and macOS","For users of macOS, you can find the cli tool in Protector4J.app/Contents/protector4j-mac","On Windows","> -t task type\n>\n> -f task file","You can type protector4j --help to see the detail arguments.","Check the result","After the encryption process complete, please go to the output folder to check the result, we have placed the glassfish folder, the java runtime and the encrypted jar/war files in it.","Run the encrypted app","For Linux and macOS","Go to the output folder, modify the glassfish/glassfish/config/asenv.conf file, set  AS_JAVA to the absolute path of our custom JRE which you can find in the output folder","Start domain1","For Windows","Go to the output folder, modify the glassfish/glassfish/config/asenv.bat file, set  AS_JAVA to the absolute path of our custom JRE which you can find in the output folder","Start domain1","Every encryption task will request a new and unique key. The files encrypted in different tasks can not be used together unless providing the key seed."]]]},{url:"/docs/protect-javase-app",sections:[["Protect JavaSE Applications",null,[]],["Video Tutorial","video-tutorial",["▶️ https://www.youtube.com/watch?v=MQf9IiDHQ18","▶️ https://www.bilibili.com/video/BV1EK4y137oC/"]],["Download","download",["Visit https://protector4j.com/download to download the latest version."]],["Installation","installation",["Windows and Linux","No special installation steps are required, just download and extract the archive.","macOS","Download  the dmg file and drag Protector4J to Applications, the actual contents of this tool are in Protector4J.app/Contents/protector4j-mac.",""]],["USE GUI tool to encrypt the JavaSE Application","use-gui-tool-to-encrypt-the-java-se-application",["Go to the folder of Protector4J then execute p4j-ui[.exe] , you will see the interface below","For macOS, just double click the Protector4J.app","","Login","If you have got the license,  please click the login button on the top-right corner and input your account information. Although you can still try this tool free without the license.","","Choose app type",'Click the "JavaSE Application" button on the app type page.',"","Choose jar/war files to encrypt","Choose the jar files to protect, you can add single or multi jar files.","","Options","Just encrypt jar files","If this option is selected, only the encrypted jar files will be generated and the JRE will not be deployed, this option is usually used in combination with key seed for updating existing applications.","Create executable file","Create the executable file to launch the application. Please do not add the .exe extension.","","Hide Console","This option is only valid for Windows, applicable to gui applications.","JVM Options","Set the arguments to be passed to the JVM, such as -Xmx and -Xms, separated by spaces or newlines.","Output","","Java Version","Select the target Java version, Java 8, Java 11 and Java 17 are supported","Create new folder","Checked by default, the task will create a folder like p4j-[task-id] in the output folder, the final result is in the there.","Include JavaFX","Check this option if this is a JavaFX Application.","SWT Application","Check this option if this is a SWT application.","KeySeed",'Every encryption task will request a random key from the server by default, the jar files generated in different encryption tasks can\'t be used together. However, the same key seed will generate the same key,  this option can used in combination with "Only Encrypt Jar Files"  to update existing applications.  This option is only valid for Licensed user.',"Encryption process","It will take some time to finish the encryption process. You can check the result in the output folder after it is done.","","Run the encrypted app","There are three ways to launch the encrypted application","Run with the executable file","Run the executable file that you specified during the encryption task.","Run with the script","Run the script the with the same name as the exe file.\nIf you open this script file, you can see how we use traditional Java commands to run the program.","Run with the tranditional way","You can also directly use the Java command to run the program manually, the format of the command is the same as traditional Java.\nour custom jre to launch the encrypted application is vlxjre, you can find it in the output folder, and the encrypted JAR files are in the vlxlib folder.","Java 8 doesn't support the vlxjre/bin/java -jar option for now, please use the vlxjre/bin/java -cp way","Notice","If the application is for macOS or Linux and generated under Windows, please execute add-executable-permission.sh first to give the program executable permission.","Modify the JVM Options of the exe wrapper","If you need to modify the JVM options of the exectuabler file, edit the exe-name.json file, there is an array called JArgs,  you can edit and add the JVM options there."]],["Use CLI Tool to Encrypt the JavaSE Application","use-cli-tool-to-encrypt-the-java-se-application",["The configuration of task file","It needs to specify a task file as an argument to the command-line tool.","Find  java-task.yml in  task-templates folder, copy and modify a new one.","Execute the encryption task","Go to the folder of Protector4J and execute the command below to run the encryption task.","On Linux or macOS","For macOS users, you can find the cli tool in Protector4J.app/Contents/protector4j-mac","On Windows","> -t task type\n>\n> -f task file","You can execute p4j --help to see the detail arguments.","Run with account information","Check the result","After the encryption task is completed, please go to the output folder to check the result.","Run the encrypted app","There are three ways to launch the encrypted application","Run with the executable file","Run the executable file that you specified during the encryption task.","Run with the script","Run the script with the same name as the exe file.\nIf you open this script file, you can see how we use traditional Java commands to run the program.","Run with the tranditional way","You can also directly use the Java command to run the program manually, the format of the command is the same as traditional Java.\nour custom jre to launch the encrypted application is vlxjre, you can find it in the output folder, and the encrypted JAR files are in the vlxlib folder.","Java 8 doesn't support the vlxjre/bin/java -jar option for now, please use the vlxjre/bin/java -cp way","Notice","If the application is for macOS or Linux and generated under Windows, please execute add-executable-permission.sh first to give the program executable permission.","Modify the JVM Options of the exe wrapper","If you need to modify the JVM options of the exectuabler file, edit the exe-name.json file, there is an array called JArgs,  you can edit and add the JVM options there."]]]},{url:"/docs/protect-payara-app",sections:[["Protect Payara App",null,[]],["Get Started","get-started",["If you haven't read the get started article, please read it first, it described the basic structure and concepts of Protector4J."]],["GUI Tool","gui-tool",["Execute protector4j-ui[.exe] in the folder of Protector4J, you will see the interface below","For users of macOS, please just double click the Protector4J.app","","Login","If you have got the license, you can click the login button on the top-right corner and type your account information. Although, without the license, you can also try it too.","","Choose app type",'Click the "Glassfish/Payara Application" button on the app types page.',"","Choose war/jar files to protect","Choose the war/jar files to protect, you can add single or multi jar files here.","","Options","","Protect all classes","if this option is selected, all the classes will be encrypted during the task","Protect the specified classes","If this option is selected, you can choose which classes to be encrypted in the next step","Protect inner jars","If this option is checked, the classes in the inner jars will be encrypted too.",'If you selected "Protect the specified classes", you should type the classes that need to protect here manually.',"","You can input the full class name like:","If you want to encrypt all the classes in the package, you can input a wildcard case like:","One * means all the classes in the package, but exclude the classes in sub packages","if you want to encrypt all the classes in the package including the classes in sub packages,  please use the wildcard case like:",'The class names or the package names above apply to all jar files, just like the classpath. We have the class information in the jars mixed together, and any classes in any jar files that meet the conditions will be encrypted, if you selected "Protect inner jars", the classes in the inner jars will be encrypted too.',"Although it needs to type the classes information manually, but we provide the class info tree on the right, you can view the struct there, and there is a context menu that could help you to edit the class list more easily.","","Output options",'On this page, you can specify the Java version, the server version and the output folder. After this is done, click the "Next" button on the bottom, it will start the encryption process.',"","KeySeed","The seed to generate the encryption key,  the same key seed will generate the same encryption key. If you want jars generated from different encryption tasks can be used together, you can input the same keySeed. This feature is only valid for licensed user.","Encryption process","It will take some time to finish the encryption process. After it is done, you can check the result in the output folder.","","Check the result","After the encryption process complete, please go to the output folder to check the result, we have placed the glassfish folder, the java runtime and the encrypted jar/war files in it.","Run the encrypted app","For Linux and macOS","Go to the output folder, modify the payara/glassfish/config/asenv.conf file, set  AS_JAVA to the absolute path of our custom JRE which you can find in the output folder","Start domain1","For Windows","Go to the output folder, modify the payara/glassfish/config/asenv.bat file, set  AS_JAVA to the absolute path of our custom JRE which you can find in the output folder","Start domain1","Every encryption task will request a new and unique key. The files encrypted in different tasks can not be used together unless providing the key seed."]],["CLI Tool","cli-tool",["The configuration of task file","It needs to specify a task file as an argument to the command-line tool.","Please find the task.glassfish.yml in the task-templates directory, copy and modify a new one.","The account information","If you have purchased  our product, you would have got your account information including the email address and the password for the license. Please type them in the appropriate fields, the value of the password field should be the md5 value of the password, not the password itself. or you can leave the email and the password fields empty, just have a try.","Specify the jars and the classes need to be encrypted.","jarsPath","The jarsPath field is an array, which you could specify one or multi jar/war files that need to be processed in the encryption work.","or","protectAll","If this value is true, all the classes in the jar will be encrypted.","protectInnerJars","If this value is true, the classes in the inner jars will be encrypted too.","classesToProtect","In this field, you can specify the classes that need to be encrypted. it can be a full class name, or wildcard case ones","or","> * means all the classes in the package, but exclude the classes in the sub package\n>\n> ** means all the classes in the package including the classes in the sub package.","If the protectAll is true, this field will be ignored.","if you are using the version before 1.8.0,  please add WEB-INF.classes prefix for each item for the classes in WEB-INF/classes, like BOOF-INF.classes.vlinx.test.TestClass1","exclude","In this field, you can specify the classes to exclude from encryption, the format is the same as classesToProtect field.","javaVersion",'The java versions supported now are Java 8 and Java 11, you can type "java-8" for Java 8 and type "java-11" for Java 11',"serverVersion","the serverVersion is always to be payara-5 now.","tempFolder","The temp folder for the files generated during the encryption process, after the task completed, the files in the temp folder will be cleaned.","outputFolder","The encrypted app and the custom Java runtime will be placed into the output folder.","includeJavaFX","Whether include the JavaFX framework","keySeed","The seed to generate the encryption key,  the same key seed will generate the same encryption key. If you want to jars generated from different encryption tasks can be used together, you can input the same keySeed. This feature is only valid for licensed user.","targetPlatforms","This field is an array, the available values are [linux64, win64, mac],  you can set one or multi target platforms according to the requirement. Or leave it empty, if you just want to generate the app for current platform.","On windows, currently only supports win64 as the target platforms.","or","Execute the encryption process","Go to the folder of Protector4J and type the command below to execute the encryption process","On Linux and macOS","For users of macOS, you can find the cli tool in Protector4J.app/Contents/protector4j-mac","On Windows","> -t task type\n>\n> -f task file","You can type protector4j --help to see the detail arguments.","Check the result","After the encryption process complete, please go to the output folder to check the result, we have placed the glassfish folder, the java runtime and the encrypted jar/war files in it.","Run the encrypted app","For Linux and macOS","Go to the output folder, modify the glassfish/glassfish/config/asenv.conf file, set  AS_JAVA to the absolute path of our custom JRE which you can find in the output folder","Start domain1","For Windows","Go to the output folder, modify the glassfish/glassfish/config/asenv.bat file, set  AS_JAVA to the absolute path of our custom JRE which you can find in the output folder","Start domain1","Every encryption task will request a new and unique key. The files encrypted in different tasks can not be used together unless providing the key seed."]]]},{url:"/docs/protect-spring-boot-app",sections:[["Protect Spring Boot Applications",null,[]],["Video Tutorial","video-tutorial",["▶️ https://www.youtube.com/watch?v=FKqruAJAJFw","▶️ https://www.bilibili.com/video/BV1M44y1B7nT/"]],["Download","download",["Visit https://protector4j.com/download to download the latest version."]],["Installation","installation",["Windows and Linux","No special installation steps are required, just download and extract the archive.","macOS","Download the dmg file and drag Protector4J to Applications, the actual contents of this tool are in Protector4J.app/Contents/protector4j-mac",""]],["Use GUI Tool to Encrypt the SpringBoot Applications","use-gui-tool-to-encrypt-the-spring-boot-applications",["Go to the folder of Protector4J then execute p4j-ui[.exe] , you will see the interface below","For macOS, please just double click the Protector4J.app","","Login","If you have got the license, please click the login button on the top-right corner and input your account information. Although you can still try this tool free without the license.","","Choose app type",'Click the "Spring Boot Application" button on the app type page.',"","Choose jar/war files to encrypt","Choose the Spring Boot Jar File to protect, only one file can be selected here.","","Options","Just encrypt jar files","If this option is selected, only the encrypted jar files will be generated and the Java runtime will not be deployed, this option is usually used in combination with key seed for updating existing applications","Create executable file","Create the executable file to launch the application here.","Hide Console","This option is only valid for windows, applicable to gui applications","JVM Options","Set the arguments to be passed to the JVM here, such as -Xmx and -Xms, separated by spaces or newlines","Output","","Java Version","Select the target Java version, support Java 8, Java 11 and Java 17","Create new folder","Selected by default, the task will create a folder like p4j-<task-id> in the output folder, the final output result is in this folder","Include JavaFX","Check this option, if this is a JavaFX Application","SWT Application","Check this option if this is a SWT gui application","KeySeed",'Every encryption task will request a random key from the server by default, so the jar files generated in different encryption tasks can\'t be used together. However, the same key seed will generate the same key,  this option can used in combination with "Only Encrypt Jar Files"  to update existing applications. And This option is only valid for Licensed user.',"Encryption process","It will take some time to finish the encryption process. After it is done, you can check the result in the output folder.","","Run the encrypted app","There are three ways to launch the encrypted application","Run with the executable file","Run the executable file that you specified during the encryption task.","Run with the script","Run the script with the same name as the exe file.\nIf you open this script file, you can see how we use traditional Java commands to run the program.","Run with the tranditional way","You can also directly use the Java command to run the program manually, the format of the command is the same as traditional Java.\nour custom jre to launch the encrypted application is vlxjre, you can find it in the output folder, and the encrypted JAR files are in the vlxlib folder."]],["Use CLI Tool to Encrypt Spring Boot Application","use-cli-tool-to-encrypt-spring-boot-application",["The configuration of task file","It needs to specify a task file as an argument to the command-line tool.","Find  spring-boot-task.yml in  task-templates folder, copy and modify a new one.","Execute the encryption process","Go to the folder of Protector4J and execute the command below to run the encryption task","On Linux or macOS","For macOS users, you can find the cli tool in Protector4J.app/Contents/protector4j-mac","On Windows","> -t task type\n>\n> -f task file","You can execute p4j --help to see the detail arguments.","Run with account information","Check the result","After the encryption task, please go to the output folder to check the result.","Run the encrypted app","There are three ways to launch the encrypted application","Run with the executable file","Run the executable file that you specified during the encryption task.","Run with the script","Run the script with the same name as the exe file.\nIf you open this script file, you can see how we use traditional Java commands to run the program.","Run with the tranditional way","You can also directly use the Java command to run the program manually, the format of the command is the same as traditional Java.\nour custom jre to launch the encrypted application is vlxjre, you can find it in the output folder, and the encrypted JAR files are in the vlxlib folder."]]]},{url:"/docs/protect-tomcat-web-app",sections:[["Protect Tomcat Web Applications",null,[]],["Video Tutorial","video-tutorial",["▶️ https://www.youtube.com/watch?v=7d8afvHc2V4","▶️ https://www.bilibili.com/video/BV1v54y1G7mM/"]],["Download","download",["Visit https://protector4j.com/download to download the latest version."]],["Installation","installation",["Windows and Linux","No special installation steps are required, just download and extract the archive.","macOS","Download  the dmg file and drag Protector4J to Applications, the actual contents of this tool are in Protector4J.app/Contents/protector4j-mac",""]],["Use GUI Tool to Encrypt Tomcat Web Applications","use-gui-tool-to-encrypt-tomcat-web-applications",["Go to the folder of Protector4J then execute p4j-ui[.exe] , you will see the interface below","For macOS,  just double click the Protector4J.app","","Login","If you have got the license, please click the login button on the top-right corner and input your account information. Although you can still try this tool free without the license.","","Choose app type",'Click the "Tomcat Web Application" button on the app type page.',"","Choose jar/war files to encrypt","Choose the war files to protect","","Options","Just encrypt jar files","If this option is selected, only the encrypted jar files will be generated and the Java runtime will not be deployed, this option is usually used in combination with key seed for updating existing applications","Output","","Java Version","Select the target Java version, supports Java 8, Java 11 and Java 17","Create new folder","Selected by default, the task will create a folder like p4j-[task-id] in the output folder, the final result is in the folder","KeySeed",'Every encryption task will request a random key from the server by default, so the jar files generated in different encryption tasks can\'t be used together. However, the same key seed will generate the same key,  this option can used in combination with "Only Encrypt Jar Files"  to update existing applications.  This option is only valid for Licensed user.',"Encryption process","It will take some time to finish the encryption process. After it is done, you can check the result in the output folder.","","Run the encrypted app","Go to the output  folder,  execute tomcat/bin/startup.sh or tomcat/bin/startup.bat to launch the application","Where is the META-INF/classes","You can also find your application in the webapps directory, but the original WEB-INF/classes folder no longer exists, in order to protect your application architecture so that external users cannot even obtain the name information of the class, we have packaged the content of WEB-INF/classes into WEB-INF/vlxapp.jar, this is a jarx format file, the jarx format is our private and encrypted java archive format.","Notice","If the application is for macOS or Linux and is generated under Windows,\nplease execute add-executable-permission.sh first to give the program executable permission."]],["Use CLI Tool to Protect Tomcat Web Applications","use-cli-tool-to-protect-tomcat-web-applications",["The configuration of task file","It needs to specify a task file as an argument to the command-line tool.","Find  tomcat-task.yml in  task-templates folder, copy and modify a new one.","Execute the encryption process","Go to the folder of Protector4J and execute the command below to run the encryption task","On Linux or macOS","For macOS users, you can find the cli tool in Protector4J.app/Contents/protector4j-mac","On Windows","> -t task type\n>\n> -f task file","You can execute p4j --help to see the detail arguments.","Run with account information","Check the result","After the encryption task, please go to the output folder to check the result.","Run the encrypted app","Go to the output  folder, execute tomcat/bin/startup.sh or tomcat/bin/startup.bat to launch the application","Where is the META-INF/classes","You can also find your application in the webapps directory, but the original WEB-INF/classes folder no longer exists, in order to protect your application architecture so that external users cannot even obtain the name information of the class, we have packaged the content of WEB-INF/classes into WEB-INF/vlxapp.jar, this is a jarx format file, the jarx format is our private and encrypted java archive format.","Notice","If the application is for macOS or Linux and is generated under Windows,\nplease execute add-executable-permission.sh first to give the program executable permission."]]]},{url:"/docs/service-creator",sections:[["Service Creator",null,["Service creator need the Organization or above edtion"]],["How to include Service Creator","how-to-include-service-creator",["GUI Tool",'Check "Include Service Creator" on the App Output Page',"include-service-creator","CLI Tool","Add includeServiceCreator field to the task file"]],["How to use the Service Creator","how-to-use-the-service-creator",["Windows","The service creator of Windows is just the nssm tool","You can find this tool in the output folder,  It needs to be used with your executable file.","Install the service","Please cd to the output folder,   then execute","Start the service","Stop the service","Check the status","Remove the service","For detailed usage of nssm, please refer to https://nssm.cc/commands","Linux","The service creator of Linux is based on systemctl","Install Service","Please cd to the output folder, then execute","After the service is created, the service is automatically started and is set to boot by default","Check the service status","Stop the service","Star the service","Disable automatic startup","Enable automatic startup","For detaield usage of systemctl, please refer to https://www.shubhamdipt.com/blog/how-to-create-a-systemd-service-in-linux/"]]]},{url:"/docs/update-java-application",sections:[["How to updating existing Java Applications",null,[]],["KeySeed","key-seed",["Protector4J will request a random and unique key from the server for every encryption task, and since the key is different for each task, the encrypted jar files obtained from different tasks cannot be used together. Therefore, we provide a KeySeed feature, the same KeySeed will generate the same key, and the jar files encrypted under the same KeySeed can be used together. Currently KeySeed is only available for licensed users."]],["Updating existing Java Applications","updating-existing-java-applications",["1. Specify a KeySeed when generating the application for the first time","",'2. Select the war or jar file that needs to be updated and check "Only Encrypt Jar Files"',"","3. Specify the same KeySeed on the output page","","4.Check the output folder and copy the newly generated vlxlib folder to the existing application folder, and you may need to remove the old vlxlib folder first if neccessary.",""]],["Create multiple executable files","create-multiple-executable-files",["If you need to create multiple executable files for an application, please refer here"]]]},{url:"/docs/update-tomcat-application",sections:[["How to update existing encrypted Tomcat Applications",null,[]],["The strucutre of Tomcat application generated by Protector4J","the-strucutre-of-tomcat-application-generated-by-protector4-j",["After using Protector4J to process your application, a complete Tomcat runtime environment will be output in the output folder. You can use the startup.sh or startup.bat script in the bin directory to run the Tomcat program as in the past. Our customized version JRE is also in the bin directory, you can find a vlxjre folder there.","webapps","You can also find your application in the webapps directory, but the original WEB-INF/classes folder no longer exists. This is because in order to protect your application architecture so that external users cannot even obtain the name information of the class, we have packaged the content of WEB-INF/classes into WEB-INF/vlxapp.jar, which is a jarx format, It is the newly introduced format in Protector4J 2.0."]],["How to update existing applications","how-to-update-existing-applications",["You may want to be able to update existing applications directly, without outputting a full Tomcat runtime environment each time","KeySeed","Protector4J will request a random and unique key from the server for every encryption task, and since the key is different for each task, the encrypted jar files obtained from different tasks cannot be used together. Therefore, we provide a KeySeed feature, the same KeySeed will generate the same key, and the jar files encrypted under the same KeySeed can be used together. Currently KeySeed is only available for licensed users.","Updating an existing tomcat application","1. Specify a KeySeed when generating the application for the first time","",'2. Select the war or jar file that needs to be updated and check "Only Encrypt Jar Files"',"","3. Specify the same KeySeed on the output page","","4.Check the output folder and copy the newly generated application directory to webapps",""]]]}])for(let[s,_,$]of i)j.add({url:o+(_?"#"+_:""),title:s,content:[s,...$].join("\n"),pageTitle:_?i[0][0]:void 0});function _(o){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=j.search(o,{...i,enrich:!0});return 0===s.length?[]:s[0].result.map(o=>({url:o.id,title:o.doc.title,pageTitle:o.doc.pageTitle}))}}}]);