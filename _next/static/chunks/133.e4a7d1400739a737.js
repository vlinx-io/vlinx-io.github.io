(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[133],{6304:function(module,__unused_webpack_exports,__webpack_require__){module=__webpack_require__.nmd(module),function _f(self){"use strict";let Y;try{module&&(self=module)}catch(e){}function u(i){return void 0===i||i}function aa(i){let o=Array(i);for(let s=0;s<i;s++)o[s]=v();return o}function v(){return Object.create(null)}function ba(i,o){return o.length-i.length}function x(i){return"string"==typeof i}function C(i){return"object"==typeof i}function D(i){return"function"==typeof i}function ca(i,o){var s=da;if(i&&(o&&(i=E(i,o)),this.H&&(i=E(i,this.H)),this.J&&1<i.length&&(i=E(i,this.J)),s||""===s)&&(i=i.split(s),this.filter)){o=this.filter,s=i.length;let j=[];for(let _=0,$=0;_<s;_++){let s=i[_];s&&!o[s]&&(j[$++]=s)}i=j}return i}self._factory=_f;let da=/[\p{Z}\p{S}\p{P}\p{C}]+/u,ea=/[\u0300-\u036f]/g;function fa(i,o){let s=Object.keys(i),j=s.length,_=[],$="",ee=0;for(let et=0,ei,er;et<j;et++)(er=i[ei=s[et]])?(_[ee++]=F(o?"(?!\\b)"+ei+"(\\b|_)":ei),_[ee++]=er):$+=($?"|":"")+ei;return $&&(_[ee++]=F(o?"(?!\\b)("+$+")(\\b|_)":"("+$+")"),_[ee]=""),_}function E(i,o){for(let s=0,j=o.length;s<j&&(i=i.replace(o[s],o[s+1]));s+=2);return i}function F(i){return RegExp(i,"g")}function ha(i){let o="",s="";for(let j=0,_=i.length,$;j<_;j++)($=i[j])!==s&&(o+=s=$);return o}var t,ja={encode:ia,F:!1,G:""};function ia(i){return ca.call(this,(""+i).toLowerCase(),!1)}let ka={},G={};function la(i){I(i,"add"),I(i,"append"),I(i,"search"),I(i,"update"),I(i,"remove")}function I(i,o){i[o+"Async"]=function(){let i;let s=this,j=arguments;var _=j[j.length-1];return D(_)&&(i=_,delete j[j.length-1]),_=new Promise(function(i){setTimeout(function(){s.async=!0;let _=s[o].apply(s,j);s.async=!1,i(_)})}),i?(_.then(i),this):_}}function ma(i,o,s,j){let _=i.length,$=[],ee,et,ei=0;j&&(j=[]);for(let er=_-1;0<=er;er--){let en=i[er],eo=en.length,es=v(),el=!ee;for(let i=0;i<eo;i++){let eo=en[i],ec=eo.length;if(ec)for(let i=0,en,eh;i<ec;i++)if(eh=eo[i],ee){if(ee[eh]){if(!er){if(s)s--;else if($[ei++]=eh,ei===o)return $}(er||j)&&(es[eh]=1),el=!0}if(j&&(en=(et[eh]||0)+1,et[eh]=en,en<_)){let i=j[en-2]||(j[en-2]=[]);i[i.length]=eh}}else es[eh]=1}if(j)ee||(et=es);else if(!el)return[];ee=es}if(j)for(let i=j.length-1,_,et;0<=i;i--){et=(_=j[i]).length;for(let i=0,j;i<et;i++)if(!ee[j=_[i]]){if(s)s--;else if($[ei++]=j,ei===o)return $;ee[j]=1}}return $}function na(i,o){let s=v(),j=v(),_=[];for(let o=0;o<i.length;o++)s[i[o]]=1;for(let i=0,$;i<o.length;i++){$=o[i];for(let i=0,o;i<$.length;i++)s[o=$[i]]&&!j[o]&&(j[o]=1,_[_.length]=o)}return _}function J(i){this.l=!0!==i&&i,this.cache=v(),this.h=[]}function oa(i,o,s){C(i)&&(i=i.query);let j=this.cache.get(i);return j||(j=this.search(i,o,s),this.cache.set(i,j)),j}J.prototype.set=function(i,o){if(!this.cache[i]){var s=this.h.length;for(s===this.l?delete this.cache[this.h[s-1]]:s++,--s;0<s;s--)this.h[s]=this.h[s-1];this.h[0]=i}this.cache[i]=o},J.prototype.get=function(i){let o=this.cache[i];if(this.l&&o&&(i=this.h.indexOf(i))){let o=this.h[i-1];this.h[i-1]=this.h[i],this.h[i]=o}return o};let qa={memory:{charset:"latin:extra",D:3,B:4,m:!1},performance:{D:3,B:3,s:!1,context:{depth:2,D:1}},match:{charset:"latin:extra",G:"reverse"},score:{charset:"latin:advanced",D:20,B:3,context:{depth:3,D:9}},default:{}};function ra(i,o,s,j,_,$,ee){setTimeout(function(){let et=i(s?s+"."+j:j,JSON.stringify(ee));et&&et.then?et.then(function(){o.export(i,o,s,_,$+1)}):o.export(i,o,s,_,$+1)})}function K(i,o){if(!(this instanceof K))return new K(i);if(i){x(i)?i=qa[i]:(s=i.preset)&&(i=Object.assign({},s[s],i)),s=i.charset;var s,j=i.lang;x(s)&&(-1===s.indexOf(":")&&(s+=":default"),s=G[s]),x(j)&&(j=ka[j])}else i={};let _,$,ee=i.context||{};if(this.encode=i.encode||s&&s.encode||ia,this.register=o||v(),this.D=_=i.resolution||9,this.G=o=s&&s.G||i.tokenize||"strict",this.depth="strict"===o&&ee.depth,this.l=u(ee.bidirectional),this.s=$=u(i.optimize),this.m=u(i.fastupdate),this.B=i.minlength||1,this.C=i.boost,this.map=$?aa(_):v(),this.A=_=ee.resolution||1,this.h=$?aa(_):v(),this.F=s&&s.F||i.rtl,this.H=(o=i.matcher||j&&j.H)&&fa(o,!1),this.J=(o=i.stemmer||j&&j.J)&&fa(o,!0),s=o=i.filter||j&&j.filter){s=o,j=v();for(let i=0,o=s.length;i<o;i++)j[s[i]]=1;s=j}this.filter=s,this.cache=(o=i.cache)&&new J(o)}function L(i,o,s,j,_){return s&&1<i?o+(j||0)<=i?s+(_||0):(i-1)/(o+(j||0))*(s+(_||0))+1|0:0}function M(i,o,s,j,_,$,ee){let et=ee?i.h:i.map;(!o[s]||ee&&!o[s][ee])&&(i.s&&(et=et[j]),ee?((o=o[s]||(o[s]=v()))[ee]=1,et=et[ee]||(et[ee]=v())):o[s]=1,et=et[s]||(et[s]=[]),i.s||(et=et[j]||(et[j]=[])),$&&et.includes(_)||(et[et.length]=_,i.m&&((i=i.register[_]||(i.register[_]=[]))[i.length]=et)))}function sa(i,o,s,j,_,$,ee,et){let ei=[],er=et?i.h:i.map;if(i.s||(er=ua(er,ee,et,i.l)),er){let s=0,en=Math.min(er.length,et?i.A:i.D);for(let o=0,eo=0,es,el;o<en&&(!(es=er[o])||(i.s&&(es=ua(es,ee,et,i.l)),_&&es&&$&&((el=es.length)<=_?(_-=el,es=null):(es=es.slice(_),_=0)),!es||(ei[s++]=es,!$||!((eo+=es.length)>=j))));o++);if(s)return $?ta(ei,j,0):void(o[o.length]=ei)}return!s&&ei}function ta(i,o,s){return i=1===i.length?i[0]:[].concat.apply([],i),s||i.length>o?i.slice(s,s+o):i}function ua(i,o,s,j){return i=s?(i=i[(j=j&&o>s)?o:s])&&i[j?s:o]:i[o]}function N(i,o,s,j,_){let $=0;if(i.constructor===Array){if(_)-1!==(o=i.indexOf(o))?1<i.length&&(i.splice(o,1),$++):$++;else{_=Math.min(i.length,s);for(let ee=0,et;ee<_;ee++)(et=i[ee])&&($=N(et,o,s,j,_),j||$||delete i[ee])}}else for(let ee in i)($=N(i[ee],o,s,j,_))||delete i[ee];return $}function va(i){i=i.data;var o=self._index;let s=i.args;var j=i.task;"init"===j?(j=i.options||{},i=i.factory,o=j.encode,j.cache=!1,o&&0===o.indexOf("function")&&(j.encode=Function("return "+o)()),i?(Function("return "+i)()(self),self._index=new self.FlexSearch.Index(j),delete self.FlexSearch):self._index=new K(j)):(i=i.id,o=o[j].apply(o,s),postMessage("search"===j?{id:i,msg:o}:{id:i}))}t=K.prototype,t.append=function(i,o){return this.add(i,o,!0)},t.add=function(i,o,s,j){if(o&&(i||0===i)){if(!j&&!s&&this.register[i])return this.update(i,o);if(j=(o=this.encode(o)).length){let er=v(),en=v(),eo=this.depth,es=this.D;for(let el=0;el<j;el++){let ec=o[this.F?j-1-el:el];var _=ec.length;if(ec&&_>=this.B&&(eo||!en[ec])){var $=L(es,j,el),ee="";switch(this.G){case"full":if(2<_){for($=0;$<_;$++)for(var et=_;et>$;et--)if(et-$>=this.B){var ei=L(es,j,el,_,$);M(this,en,ee=ec.substring($,et),ei,i,s)}break}case"reverse":if(1<_){for(et=_-1;0<et;et--)(ee=ec[et]+ee).length>=this.B&&M(this,en,ee,L(es,j,el,_,et),i,s);ee=""}case"forward":if(1<_){for(et=0;et<_;et++)(ee+=ec[et]).length>=this.B&&M(this,en,ee,$,i,s);break}default:if(this.C&&($=Math.min($/this.C(o,ec,el)|0,es-1)),M(this,en,ec,$,i,s),eo&&1<j&&el<j-1){for(_=v(),ee=this.A,$=ec,et=Math.min(eo+1,j-el),_[$]=1,ei=1;ei<et;ei++)if((ec=o[this.F?j-1-el-ei:el+ei])&&ec.length>=this.B&&!_[ec]){_[ec]=1;let o=this.l&&ec>$;M(this,er,o?$:ec,L(ee+(j/2>ee?0:1),j,el,et-1,ei-1),i,s,o?ec:$)}}}}}this.m||(this.register[i]=1)}}return this},t.search=function(i,o,s){let j,_,$;s||(!o&&C(i)?i=(s=i).query:C(o)&&(s=o));let ee=[],et,ei,er=0;if(s){i=s.query||i,o=s.limit,er=s.offset||0;var en=s.context;ei=s.suggest}if(i&&1<(et=(i=this.encode(""+i)).length)){s=v();var eo=[];for(let o=0,j=0,_;o<et;o++)if((_=i[o])&&_.length>=this.B&&!s[_]){if(!this.s&&!ei&&!this.map[_])return ee;eo[j++]=_,s[_]=1}et=(i=eo).length}if(!et)return ee;for(o||(o=100),en=this.depth&&1<et&&!1!==en,s=0,en?(j=i[0],s=1):1<et&&i.sort(ba);s<et;s++){if($=i[s],en?(_=sa(this,ee,ei,o,er,2===et,$,j),ei&&!1===_&&ee.length||(j=$)):_=sa(this,ee,ei,o,er,1===et,$),_)return _;if(ei&&s===et-1){if(!(eo=ee.length)){if(en){en=0,s=-1;continue}return ee}if(1===eo)return ta(ee[0],o,er)}}return ma(ee,o,er,ei)},t.contain=function(i){return!!this.register[i]},t.update=function(i,o){return this.remove(i).add(i,o)},t.remove=function(i,o){let s=this.register[i];if(s){if(this.m)for(let o=0,j;o<s.length;o++)(j=s[o]).splice(j.indexOf(i),1);else N(this.map,i,this.D,this.s),this.depth&&N(this.h,i,this.A,this.s);if(o||delete this.register[i],this.cache){o=this.cache;for(let s=0,j;s<o.h.length;s++)j=o.h[s],o.cache[j].includes(i)&&(o.h.splice(s--,1),delete o.cache[j])}}return this},t.searchCache=oa,t.export=function(i,o,s,j,_){let $,ee;switch(_||(_=0)){case 0:if($="reg",this.m)for(let i in ee=v(),this.register)ee[i]=1;else ee=this.register;break;case 1:$="cfg",ee={doc:0,opt:this.s?1:0};break;case 2:$="map",ee=this.map;break;case 3:$="ctx",ee=this.h;break;default:return}return ra(i,o||this,s,$,j,_,ee),!0},t.import=function(i,o){if(o)switch(x(o)&&(o=JSON.parse(o)),i){case"cfg":this.s=!!o.opt;break;case"reg":this.m=!1,this.register=o;break;case"map":this.map=o;break;case"ctx":this.h=o}},la(K.prototype);let wa=0;function O(i){var o;if(!(this instanceof O))return new O(i);i?D(o=i.encode)&&(i.encode=o.toString()):i={},(o=(self||window)._factory)&&(o=o.toString());let s="undefined"==typeof window&&self.exports,j=this;this.o=xa(o,s,i.worker),this.h=v(),this.o&&(s?this.o.on("message",function(i){j.h[i.id](i.msg),delete j.h[i.id]}):this.o.onmessage=function(i){i=i.data,j.h[i.id](i.msg),delete j.h[i.id]},this.o.postMessage({task:"init",factory:o,options:i}))}function P(i){O.prototype[i]=O.prototype[i+"Async"]=function(){let o;let s=this,j=[].slice.call(arguments);var _=j[j.length-1];return D(_)&&(o=_,j.splice(j.length-1,1)),_=new Promise(function(o){setTimeout(function(){s.h[++wa]=o,s.o.postMessage({task:i,id:wa,args:j})})}),o?(_.then(o),this):_}}function xa(a,b,c){let d;try{d=b?eval('new (require("worker_threads")["Worker"])("../dist/node/node.js")'):a?new Worker(URL.createObjectURL(new Blob(["onmessage="+va.toString()],{type:"text/javascript"}))):new Worker(x(c)?c:"worker/worker.js",{type:"module"})}catch(e){}return d}function Q(i){if(!(this instanceof Q))return new Q(i);var o,s=i.document||i.doc||i;this.K=[],this.h=[],this.A=[],this.register=v(),this.key=(o=s.key||s.id)&&S(o,this.A)||"id",this.m=u(i.fastupdate),this.C=(o=s.store)&&!0!==o&&[],this.store=o&&v(),this.I=(o=s.tag)&&S(o,this.A),this.l=o&&v(),this.cache=(o=i.cache)&&new J(o),i.cache=!1,this.o=i.worker,this.async=!1,o=v();let j=s.index||s.field||s;x(j)&&(j=[j]);for(let s=0,_,$;s<j.length;s++)x(_=j[s])||($=_,_=_.field),$=C($)?Object.assign({},i,$):i,this.o&&(o[_]=new O($),o[_].o||(this.o=!1)),this.o||(o[_]=new K($,this.register)),this.K[s]=S(_,this.A),this.h[s]=_;if(this.C)for(x(i=s.store)&&(i=[i]),s=0;s<i.length;s++)this.C[s]=S(i[s],this.A);this.index=o}function S(i,o){let s=i.split(":"),j=0;for(let _=0;_<s.length;_++)0<=(i=s[_]).indexOf("[]")&&(i=i.substring(0,i.length-2))&&(o[j]=!0),i&&(s[j++]=i);return j<s.length&&(s.length=j),1<j?s:s[0]}function T(i,o){if(x(o))i=i[o];else for(let s=0;i&&s<o.length;s++)i=i[o[s]];return i}function U(i,o,s,j,_){if(i=i[_],j===s.length-1)o[_]=i;else if(i){if(i.constructor===Array)for(o=o[_]=Array(i.length),_=0;_<i.length;_++)U(i,o,s,j,_);else o=o[_]||(o[_]=v()),_=s[++j],U(i,o,s,j,_)}}function V(i,o,s,j,_,$,ee,et){if(i=i[ee]){if(j===o.length-1){if(i.constructor===Array){if(s[j]){for(o=0;o<i.length;o++)_.add($,i[o],!0,!0);return}i=i.join(" ")}_.add($,i,et,!0)}else if(i.constructor===Array)for(ee=0;ee<i.length;ee++)V(i,o,s,j,_,$,ee,et);else ee=o[++j],V(i,o,s,j,_,$,ee,et)}}function ya(i,o,s,j){let _=this.l[i],$=_&&_.length-s;if($&&0<$)return($>o||s)&&(_=_.slice(s,s+o)),j&&(_=za.call(this,_)),{tag:i,result:_}}function za(i){let o=Array(i.length);for(let s=0,j;s<i.length;s++)j=i[s],o[s]={id:j,doc:this.store[j]};return o}P("add"),P("append"),P("search"),P("update"),P("remove"),t=Q.prototype,t.add=function(i,o,s){if(C(i)&&(i=T(o=i,this.key)),o&&(i||0===i)){if(!s&&this.register[i])return this.update(i,o);for(let j=0,_,$;j<this.h.length;j++)$=this.h[j],x(_=this.K[j])&&(_=[_]),V(o,_,this.A,0,this.index[$],i,_[0],s);if(this.I){let j=T(o,this.I),_=v();x(j)&&(j=[j]);for(let o=0,$,ee;o<j.length;o++)if(!_[$=j[o]]&&(_[$]=1,ee=this.l[$]||(this.l[$]=[]),!s||!ee.includes(i))&&(ee[ee.length]=i,this.m)){let o=this.register[i]||(this.register[i]=[]);o[o.length]=ee}}if(this.store&&(!s||!this.store[i])){let s;if(this.C){s=v();for(let i=0,j;i<this.C.length;i++)x(j=this.C[i])?s[j]=o[j]:U(o,s,j,0,j[0])}this.store[i]=s||o}}return this},t.append=function(i,o){return this.add(i,o,!0)},t.update=function(i,o){return this.remove(i).add(i,o)},t.remove=function(i){if(C(i)&&(i=T(i,this.key)),this.register[i]){for(var o=0;o<this.h.length&&(this.index[this.h[o]].remove(i,!this.o),!this.m);o++);if(this.I&&!this.m)for(let s in this.l){o=this.l[s];let j=o.indexOf(i);-1!==j&&(1<o.length?o.splice(j,1):delete this.l[s])}this.store&&delete this.store[i],delete this.register[i]}return this},t.search=function(i,o,s,j){s||(!o&&C(i)?(s=i,i=""):C(o)&&(s=o,o=0));let _=[],$=[],ee,et,ei,er,en,eo,es=0;if(s){if(s.constructor===Array)ei=s,s=null;else{if(i=s.query||i,ei=(ee=s.pluck)||s.index||s.field,er=s.tag,et=this.store&&s.enrich,en="and"===s.bool,o=s.limit||o||100,eo=s.offset||0,er&&(x(er)&&(er=[er]),!i)){for(let i=0,s;i<er.length;i++)(s=ya.call(this,er[i],o,eo,et))&&(_[_.length]=s,es++);return es?_:[]}x(ei)&&(ei=[ei])}}ei||(ei=this.h),en=en&&(1<ei.length||er&&1<er.length);let el=!j&&(this.o||this.async)&&[];for(let ee=0,et,ec,eh;ee<ei.length;ee++){let ep;if(x(ec=ei[ee])||(ec=(ep=ec).field,i=ep.query||i,o=ep.limit||o),el)el[ee]=this.index[ec].searchAsync(i,o,ep||s);else{if(eh=(et=j?j[ee]:this.index[ec].search(i,o,ep||s))&&et.length,er&&eh){let i=[],s=0;en&&(i[0]=[et]);for(let o=0,j,_;o<er.length;o++)j=er[o],(eh=(_=this.l[j])&&_.length)&&(s++,i[i.length]=en?[_]:_);s&&(eh=(et=en?ma(i,o||100,eo||0):na(et,i)).length)}if(eh)$[es]=ec,_[es++]=et;else if(en)return[]}}if(el){let j=this;return new Promise(function(_){Promise.all(el).then(function($){_(j.search(i,o,s,$))})})}if(!es)return[];if(ee&&(!et||!this.store))return _[0];for(let i=0,o;i<$.length;i++){if((o=_[i]).length&&et&&(o=za.call(this,o)),ee)return o;_[i]={field:$[i],result:o}}return _},t.contain=function(i){return!!this.register[i]},t.get=function(i){return this.store[i]},t.set=function(i,o){return this.store[i]=o,this},t.searchCache=oa,t.export=function(i,o,s,j,_){if(_||(_=0),j||(j=0),j<this.h.length){let s=this.h[j],$=this.index[s];o=this,setTimeout(function(){$.export(i,o,_?s:"",j,_++)||(j++,_=1,o.export(i,o,s,j,_))})}else{let o,$;switch(_){case 1:o="tag",$=this.l;break;case 2:o="store",$=this.store;break;default:return}ra(i,this,s,o,j,_,$)}},t.import=function(i,o){if(o)switch(x(o)&&(o=JSON.parse(o)),i){case"tag":this.l=o;break;case"reg":this.m=!1,this.register=o;for(let i=0,s;i<this.h.length;i++)(s=this.index[this.h[i]]).register=o,s.m=!1;break;case"store":this.store=o;break;default:i=i.split(".");let s=i[0];i=i[1],s&&i&&this.index[s].import(i,o)}},la(Q.prototype);var Ba={encode:Aa,F:!1,G:""};let Ca=[F("[\xe0\xe1\xe2\xe3\xe4\xe5]"),"a",F("[\xe8\xe9\xea\xeb]"),"e",F("[\xec\xed\xee\xef]"),"i",F("[\xf2\xf3\xf4\xf5\xf6ő]"),"o",F("[\xf9\xfa\xfb\xfcű]"),"u",F("[\xfdŷ\xff]"),"y",F("\xf1"),"n",F("[\xe7c]"),"k",F("\xdf"),"s",F(" & ")," and "];function Aa(i){var o=i=""+i;return o.normalize&&(o=o.normalize("NFD").replace(ea,"")),ca.call(this,o.toLowerCase(),!i.normalize&&Ca)}var Ea={encode:Da,F:!1,G:"strict"};let Fa=/[^a-z0-9]+/,Ga={b:"p",v:"f",w:"f",z:"s",x:"s",ß:"s",d:"t",n:"m",c:"k",g:"k",j:"k",q:"k",i:"e",y:"e",u:"o"};function Da(i){i=Aa.call(this,i).join(" ");let o=[];if(i){let s=i.split(Fa),j=s.length;for(let _=0,$,ee=0;_<j;_++)if((i=s[_])&&(!this.filter||!this.filter[i])){let s=Ga[$=i[0]]||$,j=s;for(let o=1;o<i.length;o++){$=i[o];let _=Ga[$]||$;_&&_!==j&&(s+=_,j=_)}o[ee++]=s}}return o}var Ia={encode:Ha,F:!1,G:""};let Ja=[F("ae"),"a",F("oe"),"o",F("sh"),"s",F("th"),"t",F("ph"),"f",F("pf"),"f",F("(?![aeo])h(?![aeo])"),"",F("(?!^[aeo])h(?!^[aeo])"),""];function Ha(i,o){return i&&(2<(i=Da.call(this,i).join(" ")).length&&(i=E(i,Ja)),o||(1<i.length&&(i=ha(i)),i&&(i=i.split(" ")))),i||[]}var La={encode:Ka,F:!1,G:""};let Ma=F("(?!\\b)[aeo]");function Ka(i){return i&&(1<(i=Ha.call(this,i,!0)).length&&(i=i.replace(Ma,"")),1<i.length&&(i=ha(i)),i&&(i=i.split(" "))),i||[]}G["latin:default"]=ja,G["latin:simple"]=Ba,G["latin:balance"]=Ea,G["latin:advanced"]=Ia,G["latin:extra"]=La;let W=self,Z={Index:K,Document:Q,Worker:O,registerCharset:function(i,o){G[i]=o},registerLanguage:function(i,o){ka[i]=o}};(Y=W.define)&&Y.amd?Y([],function(){return Z}):W.exports?W.exports=Z:W.FlexSearch=Z}(this)},8536:function(i,o,s){"use strict";s.r(o),s.d(o,{search:function(){return _}});let j=new(s(6304)).Document({tokenize:"full",document:{id:"url",index:"content",store:["title","pageTitle"]},context:{resolution:9,depth:2,bidirectional:!0}});for(let{url:i,sections:o}of[{url:"/eula",sections:[["License Agreement.",null,["This is a legal agreement between VLINX Software,Inc. (United States Company EIN 32-0705532) and you the user. It applies only to releases of Protector4J. If you do not agree to these terms and conditions then you may not download, install or use the Protector4J software."]],["1. License, Ownership and Use.","1-license-ownership-and-use",["The Protector4J software is NOT public domain or freeware. It and its accompanying files and/or documents are owned and copyrighted by VLINX Software,Inc. VLINX Software,Inc. grants the user a non-exclusive non-transferable license to use the Protector4J software on one computer. The Protector4J software is considered in use on a computer when it is loaded into temporary memory or installed into permanent memory. The software must be useable on the one computer by only one user at a time and the user must be an employee or contractor of the licensee. You may not reverse engineer, disassemble, decompile or alter this software in any way except to the extent that the foregoing restriction is expressly prohibited by applicable law. Also, you may not reverse engineer, disassemble, decompile or alter in any way any file generated by the Protector4J software except to the extent that the foregoing restriction is expressly prohibited by applicable law."]],["2. Distribution.","2-distribution",["You may NOT reproduce and/or distribute copies of the Protector4J distribution files or any of their constituent or associated files or materials to third parties."]],["3. Warranty Disclaimer and Limitation of Liability.","3-warranty-disclaimer-and-limitation-of-liability",['The Protector4J software is licensed to the user on an "AS IS" basis. VLINX SOFTWARE,INC. MAKES NO WARRANTIES, EITHER EXPRESS OR IMPLIED, WITH RESPECT TO THIS PROTECTOR4J SOFTWARE AND ITS ASSOCIATED FILES AND DOCUMENTS INCLUDING BUT NOT LIMITED TO ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. VLINX SOFTWARE,INC DOES NOT WARRANT THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, OR THAT DEFECTS IN THE SOFTWARE WILL BE CORRECTED. You the user are solely responsible for determining the appropriateness of the software for your use and accept full responsibility for all risks associated with its use. VLINX Software,Inc. is not and will not be liable for any direct, indirect, special or incidental damages (including loss of profits or interruption of business) however caused even if Zelix Pty Ltd has been advised of the possibility of such damages.']],["4. Severability.","4-severability",["If any provision of this Agreement is held to be unlawful or unenforceable, or otherwise invalid, this Agreement will remain in effect with the invalid provisions omitted, unless omission would frustrate the intent of the parties, in which case this Agreement will immediately terminate."]],["5. Complete Agreement.","5-complete-agreement",["This Agreement is the entire agreement between you and VLINX Software, Inc. relating to its subject matter. It supersedes all prior or contemporaneous oral or written communications, proposals, conditions, representations and warranties and prevails over any conflicting or additional terms of any quote, order, acknowledgment, or other communication between the parties relating to its subject matter during the term of this Agreement. No modification to this Agreement will be binding, unless in writing and signed by an authorized representative of each party."]]]},{url:"/privacy",sections:[["Privacy Policy",null,["VLINX Software,Inc. respects your privacy. From time to time, you may choose to provide us with personal information. We will not reveal any of your personal information to third parties unless you have specifically requested that we do so or if we are required to do so by law.\nPlease note that VLINX Software,Inc. reserves the right to modify its Privacy Policy at any time without notice. Any changes to the policy will be posted on this page. Your continued use of this Web site will be deemed conclusive acceptance of such modification. If you have any comments or questions concerning this policy please feel free to contact us at protector4j@vlinx.io"]]]},{url:"/terms",sections:[["Website Terms of Use",null,[]],["Use of this website.","use-of-this-website",['Your access and use of this website constitutes your agreement to these Terms of Use. "This website" means all webpages located on the protector4j.com domain name.',"This website is for your personal and non-commercial use. You may not modify, copy, distribute, transmit, display, perform, reproduce, publish, license, create derivative works from, transfer, or sell any information, software, products or services obtained from or through this website. Note that this website and any VLINX Software,Inc. publications and material which may be accessed from it are protected under all applicable copyright laws.","As a condition of your use of this website, you will not use the website for any purpose that is unlawful or prohibited by these terms of use. You may not use the website in any manner that could damage, disable, overburden, or impair any server or networks, or interfere with any other party's use of this website. You may not obtain or attempt to obtain any materials or information through any means not intentionally made available through this website."]],["Links to third party sites","links-to-third-party-sites",["Any third party websites which may be accessed through this website are the sole responsibility of the third party posting the website. VLINX Software,Inc. makes no warranty, express or implied, as to the accuracy of any information on third party websites and accepts no liability whatsoever for any errors and omissions or for any damage or injury to persons or property arising out of the use or operation of any materials, instructions, methods or ideas contained on such websites."]],["Limitation of liability","limitation-of-liability",['This website is provided on an "as is" and "as available" basis. VLINX Software,Inc. expressly disclaims all warranties of any kind, whether express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose and non-infringement. VLINX Software,Inc. is not liable to you for any cost, loss or liability (including loss of profits or interruption of business) however caused even if VLIINX Software,Inc. has been advised of the possibility of such damages.']]]},{url:"/articles/cracking-encrypted-java-applications-jhsdb",sections:[["使用jhsdb（HotSpot Debugger）破解加密的Java应用程序",null,["Java代码保护的一种解决方案是类文件加密。这种解决方案通过自定义加载器加载加密的类文件或jar文件，由于JVM的Attach机制的存在，这种方法是无效的，并且可以使用JDK附带的工具轻松破解。"]],["示例应用程序","",["以下是一个带有简单摆动窗口和按钮的示例应用程序。","https://github.com/3-keys/test-swing-app","img"]],["加密应用程序","",["使用Eclipse导出一个可运行的jar文件，并使用加密工具对jar文件进行加密。加密后，jar文件的结构如下：","img","test-swing-app.jar是加密的jar文件数据，Launcher类是此工具的自定义加载类，加密的jar包仍通过标准的java -jar命令运行"]],["破解加密应用","",["首先，运行加密的jar文件，然后找到JDK的bin目录，你应该能找到一个jshdb文件。","1_nsxbwNJrGJB4mpzsQv55VA","执行jhsdb hsdb，打开HotSpot调试器，如果是在Windows下，你可能需要以管理员身份运行，点击文件选择附加到HotSpot进程…","img","通过Linux系统的ps aux | grep java命令，Windows系统通过任务管理器找到进程的pid，在下面的对话框中，输入进程pid","img","成功附加后，点击工具->类浏览器","img","类浏览器包含了所有已加载类的信息，搜索com.example，你可能会看到com.example下的所有类","img","点击com.example.TestWindow @0x0000…. 然后点击“创建 .class 文件”","img","cd到之前执行jhsdb命令的目录，你可以看到生成的类文件","img","使用 Luyten 或 jadx 打开类文件，你可以看到反编译的代码","img"]]]},{url:"/articles/deobfuscate-with-vlx-vmengine",sections:[["使用vlx-vmengine进行反混淆",null,["vlx-vmengine-jvm是一个使用Java实现的Java字节码执行引擎，其使用请参考https://github.com/vlinx-io/vlx-vmengine-jvm","有如下一段简单的Java代码","编译为类文件，并使用某个混淆引擎混淆后，得到如下文件，","a.class","使用jadx打开后发现，除了main 函数之外，其他信息都面目全非，字符串也已经被加密。","image-20230521195209691","但是即使混淆了，类的基本结构与字节码信息仍然是存在的，使用ClassViewer 打开a.class, 可以看到类的方法与字节码信息","image-20230521200149593","无论如何做混淆，也仅能够在静态层面上混淆代码，提升分析的复杂度，在动态运行中仍然需要还原程序原来的运行逻辑，使用vlx-vmengine-jvm","运行混淆后代码的main方法，得到如下输出","从控制台输出可以看到程序还原了原来的行为，即打印输出Hi, George，同时从输出中我们也可以判断字符串的解密函数在private static java.lang.String a.a(int,int)，其参数为7144与-13249，如果继续使用vmengine调试a.a(int,int)方法即可发现该混淆引擎使用的字符串加密方法。"]]]},{url:"/articles/excelsior-jet-alternative",sections:[["Excelsior JET替代方案",null,['2019年5月15日，Excelsior在一封发给他们客户的电子邮件中宣布停止Excelsior JET，并在次日也在他们的网站上宣布宣布停止支持，其工程团队将在仅仅约2周内（"2019年6月初"）完全离开，同时宣布下载网站将在6月中旬（仅在约4周内）离线。']],["Protector4J远不仅仅是Excelsior JET的替代品","protector4-j-excelsior-jet",["Protector4J可以帮助您通过加密类来保护您的java源代码，它通过修改JVM制作了一个自定义的本地ClassLoader。Java类由AES加密，并在本地ClassLoader中解密。并且它还引入了一些机制来提高破解的难度。","Protector4J还可以帮助您为Windows，Linux，macOS创建您的Java应用程序的可执行程序"]]]},{url:"/articles/extract-java-classes-information-from-aot",sections:[["从AOT编译的二进制文件中提取Java类信息",null,["AOT编译是Java世界讨论已久的话题，但直到GraalVM出现之前没有工具能够实现较好的AOT编译，更不用说驱动整个生态系统。尽管GraalVM提供了可以有效帮助开发者进行AOT编译的native-image工具，但由于Java生态系统的复杂性和多样性，要实现Java应用程序的开箱即用的AOT编译仍然非常困难，尤其是反射和代理技术在各种常见框架中被广泛使用。"]],["Spring Native 项目","spring-native",["感谢Spring框架团队的Spring Native项目，他们可以通过Maven或Gradle插件实现项目的一键AOT编译。当然，目前只适用于Spring Boot项目。","请使用Sping Native生成AOT编译的Java程序","以下是官方Spring Native示例，用于生成AOT编译的Java应用程序（测试环境：Ubuntu 20.04，Docker 20.10.6）","在相对较长的编译时间和大量的内存消耗后，我们可以在目标目录中得到AOT编译的Java程序，这是一个独立的二进制文件，可以独立运行，无需任何依赖。","img","petclinic-jpa是由AOT编译的程序，可以直接运行"]],["从AOT编译的二进制文件中提取Java类信息","aot-java",["Java代码保护在过去一直是一个非常困难的问题，AOT也被认为是Java代码保护的一种解决方案，但不幸的是，现在的许多Java程序无法与框架分离，由于框架的复杂性，即使是由AOT编译的程序也必须将类信息包含到最终生成的二进制文件中，而类文件实际上是整齐地排列在二进制文件的资源区域中。","以下工具可以扫描并从AOT编译的二进制文件中提取类信息","https://github.com/3-keys/binary-classfile-reader","将上一步获得的petclinic-jpa作为例子，从中提取类信息，与源代码进行比较，你可以看到，模型信息，控制器信息，和服务信息都可以获得。","img"]]]},{url:"/articles/graalvm-nativeimage-reverse-engineering",sections:[["GraalVM NativeImage 逆向还原",null,["Java代码还原与保护是一个老生常谈的问题，由于Java类文件的采取字节码格式保存，包含了许多元信息，所以可以很容易还原成原始代码。为了保护Java代码，业界采用了许多手段，比如混淆、字节码加密、JNI保护等等，但是无论哪种方法，都仍存在破解的方法和途径。","二进制编译，一直被认为是代码保护较为有效的一种方法，Java的二进制编译被撑为AOT技术(Ahead of Time)，即提前编译。","但是由于Java语言的动态特性，二进制编译需要处理反射、动态代理、JNI加载等问题，存在许多的困难，所以很长时间一来，Java的AOT编译方面一直缺乏一个成熟可靠、适应性强并且可大范围应用于生产环境的工具。（曾经有一个叫做ExcellisorJET，如今似乎已停止维护）","2019年5月，Oracle推出了GraalVM 19.0，一个多语言支持的虚拟机，19.0是它第一个面向生产环境的版本。GraalVM中提供了一个NativeImage工具，能够实现Java程序的AOT编译。经过几年的发展，目前NativeImage已经十分成熟，SpringBoot 3.0已经可以使用它将整个SpringBoot工程编译生成一个可执行文件，编译后的文件，启动速度快，内存占用低，具有非常好的效果。","那么，对于已经迎来二进制编译时代的Java程序来说，其代码是否仍是像字节码时代一样容易被逆向还原呢，NativeImage编译的二进制文件又有哪些特点，二进制编译的强度是否足够用来保护重要的代码？","为了探讨上述问题，笔者近期编写了一个NativeImage分析工具，已经能达到一定的逆向还原效果。"]],["项目地址","",["https://github.com/vlinx-io/NativeImageAnalyzer"]],["生成NativeImage","native-image",["首先我们需要生成一个NativeImage，NativeImage来自于GraalVM，访问https://www.graalvm.org/ 下载Java 17版本，下载完成后设置好环境变量，GraalVM中同样包含了一个JDK，因此可以直接使用它执行Java命令.","添加$GRAALVM_HOME/bin到环境变量，之后执行","编写一个简单Java程序","编写一个简单的Java程序，例如","编译并运行上述Java程序","可以得到程序输出","编译环境准备","如果是Windows用户需要提前安装好Visual Studio, 如果是Linux与macOS用户，需要提前安装好gcc与clang等工具。","Windows用户在执行native-image命令之前，需要先设置好Visual Studio的环境变量，可以通过下述命令设置","如果Visual Studio的安装路径与版本不同，请自行调整相关路径信息。","使用native-image进行编译","现在使用native-image命令将上面这个Java程序编译成二进制文件, native-image命令的格式与java命令格式一致，同样有-cp, -jar这些参数，如何使用java命令来执行程序，就使用同样的方式进行二进制编译，只不过命令从java换成了native-image。执行命令如下","经过一段时间的编译，期间可能会占用较多的CPU与内存，可以得到一个编译后的二进制文件，输出文件名默认为主类名的小写，此处为hello，如果是Windows下则为hello.exe，使用file命令来查看这个文件的类型，可以看到这确实是个二进制文件了","执行这个文件，其输出与前面使用java -cp . Hello的结果一致"]],["分析NativeImage","native-image-2",["使用IDA进行分析","使用IDA打开上面步骤编译的hello，点击Exports查看符号表，可以看到个svm_code_section符号，其地址就是Java Main函数的入口地址","image-20230218194013099","定位到这个地址，查看汇编代码","image-20230218194126014","可以看到已经是标准的汇编函数的样子了，使用F5进行反编译","image-20230218194235234","可以看到进行了一些函数调用 ，传递了一些参数，但是不容易看出逻辑。","我们双击sub_1000C0020，看看调用函数的内部，IDA提示分析失败","image-20230218194449494","NativeImage 反编译的逻辑","因为NativeImage的编译是基于JVM的编译，也可以理解为给二进码代码套了一层VM保护，所以IDA这类工具，在缺乏相应信息以及针对性处理措施的情况下，是无法很好的对其进行逆向还原的。","但是不论何种形式，以字节码的形式，还是以二进制的形式，JVM的执行的一些基本要素必然是存在的，例如类的信息，字段的信息，函数的调用与参数的传递等，基于这个思路，笔者编写的分析工具已能达到一定的还原效果，并且再加以完善的话，有能力达到足够高级别的还原度。","使用NativeImageAnalyzer进行分析","访问https://github.com/vlinx-io/NativeImageAnalyzer下载NativeImageAnalyzer","执行下述命令进行逆向分析，目前仅分析主类的Main函数","得到输出如下","我们再来看下原来的代码","我们现在来看下System.out的定义","可以看到System类的out变量是一个PrintStream类型的变量，并且是一个静态变量，NativeImage在编译的时候直接将这个类的实例编译到一个叫做Heap的区域，二进制代码直接从Heap区域获取这个类的实例进行调用，我们再来看下还原后的代码","这里的java.io.PrintStream@0x554fe8 就是从Heap区域中读出的java.io.PrintStream的实例变量，其在内存中的地址为0x554fe8","我们再来看下java.io.PrintStream.writeln 函数的定义","我们这里可以看到writelin函数中有一个String类型的参数，而还原的代码中为什么传递了三个参数了，首先writeln是一个类成员方法，只默认隐藏了一个this变量指向调用者，即传递的第一个参数java.io.PrintStream@0x554fe8，至于第三个参数rcx，是因为在进行汇编代码分析的过程中判断这个函数调用了三个参数，但实际上看定义我们知道这个函数实只调用两个参数，这也是本工具后续需要改进的地方。"]],["一个复杂点的程序","",["我们接下来分析一个复杂点的程序，比如计算一个Fibonacci数列，代码如下","编译并执行","使用NativeImageAnalyzer还原后获得代码如下","把还原后的代码与原代码比较下","对应的是","rdi是用来传递函数的第一个参数的寄存器，如果在Windows下则是rdx，rdi=rdi[0]即对应了args[0]，之后调用java.lang.Integer.parseInt解析获得一个int数值，然后将返回值赋值给一个栈上变量sp_0x44","对应的是","我们在Java代码中非常简单的字符串相加操作，在Java背后实际转为了StringConcatHelper.mix，StringConcatHelper.prepend,StringConcatHelper.newString三个函数的调用，其中StringConcatHelper.mix计算字符串相加后的长度，StringConcatHelper.prepend用来将具体承载字符串内容的byte[]数组组合在一起，StringConcatHelper.newString则通过byte[]数组生成一个新的String对象","我们在上面这段代码看到了两个类型的变量名称，sp_0x18与tlab_0，sp_开头的变量，表示这是一个在栈上分配的变量，tlab_开头的变量表示在Thread Local Allocation Buffers上分配的变量，这里仅是对这两种变量名称的由来做一个说明，在还原代码中这两类变量没有区别，关于Thread Local Allocation Buffers的相关资料，大家可以自行查找。","我们这里给tlab_0赋值为Class{[B}_1, Class{[B}_1的含义是这是byte[]类型的对象实例, [B为byte[]类型的Java描述符，_1表示是这个类型的第一个变量，后续如果再定义了对应类型的变量则序号相应增加，如Class{[B]}_2,Class{[B]}_3等，如果是其他类型也是同样的表示方式如Class{java.lang.String}_1, Class{java.util.HashMap}_2等","上面这段代码的逻辑简单解释了创建一个byte[]数组实例，并赋值给tlab0，数组长度为ret_2 &lt;&lt; ret_2 &gt;&gt;32，数组的长度之所以是ret_2 &lt;&lt; ret_2 &gt;&gt; 32，是因为String计算长度时需要根据编码对数组长度进行一定的换算，大家可以查找java.lang.String.java中的相关代码。接下来即通过prepend函数将0，1还有空格都并入到tlab0，再从tlab_0中生成一个新的String对象ret_30，传递给java.io.PrintStream.write函数打印输出。其实这里还原出来的prepend函数的参数，并不是很正确，参数的位置也不正确，这也是后面需要再完善的一个地方。","两行的Java代码转换成实际的执行逻辑之后，还是比较复杂的，后续可以在目前已还原代码的基础上通过分析整合为简化的模式。","继续往下走","对应的是","sp_0x44为我们输入给程序的参数，即为count，count只有>=3才会执行Java代码中的for循环，这里将for循环还原为while循环，本质上语义是一质的，在while循环之外，程序代码执行了count=3的逻辑，如果count<=3，程序即执行完成，不会再进入while循环，这可能也是GraalVM在编译时做得一个优化。","我们再看下循环的跳出条件","此处即对应了","同时rcx在每次循环过程中也在累加","即对应了","接下来，我们看看循环体中关于数值相加的逻辑如何在还原后的代码中体现，原始代码为","还原后的代码为","循环体中的其他代码即跟前面一样执行字符串相加与输出操作，还原后的代码基本体现了原代码的执行逻辑。"]],["还需要进一步完善的地方","",["目前这个工具已能够基本还原程序控制流，实现一定程度的数据流分析与函数名称还原，要成为一个完善可用的工具，还需要完成下面几点：","较为准确的函数名称、函数参数、函数返回值还原","较为准确的对象信息与字段的还原","较为准确的表达式与对象类型推断","语句整合与简化"]],["关于二进制保护的思考","",["本项目的目的在于探讨NativeImage逆向还原的可行性，从目前的成果来看，NativeImage的逆向还原是可行的，这也给代码保护带来了更高的挑战，许多的开发者认为，将软件编译为二进制即可高枕无忧了，而忽略了对二进制代码的保护。对于C/C++编写的软件，目前许多工具，比如IDA已经有了非常好的还原效果，甚至暴露程度不低于Java程序，笔者甚至看到有些以二进制形式发行的软件，连函数名称的符号信息都不去除，此种情况下无异于裸奔。","任何的代码都是由逻辑组成，只要其包含逻辑，就有可能通过逆向的手段还原其逻辑，只不过在于还原难度的差别而已，而代码保护工作就是尽最大程度是加大这种还原的难度。","最后，在此求个关注，这是本公众号的第一篇文章，大家如果觉得文章内容有价值，欢迎转发关注。后续将努力为大家奉献关于程序开发、逆向保护、网络安全等方面有价值的内容，与大家共同交流学习，谢谢！"]]]},{url:"/articles/jvm-bytecode-engine-written-with-java-and-kotlin",sections:[["使用Java/Kotln编写的JVM字节码执行引擎",null,[]],["JAVA 字节码执行引擎","java",["传统的Java动态调试仅能够基于源码级别，如果没有源码，或者被混淆后的Java类文件，则无法进行动态调试。","Java程序的运行基于JVM虚拟机， JVM虚拟机以字节码作为执行的基础，我们使用Kotlin构造了一个JVM字节码执行引擎，可以借助现代的IDE，如IDEA，在字节码层面对Java程序进行调试，以观察程序的运行行为。","注意，本项目仅用于学习和研究JVM的运行原理以及对恶意程序进行分析，严禁将其应用于非法用途。"]],["前置知识基础","",["使用本项目前，请确保你已经有如下知识基础","了解Java类文件的格式","了解JVM的各个字节码的作用和含义"]],["使用IDEA在字节码层面进行调试","idea",["使用IDEA打开本项目(需要JDK17)，并转到TestCases","TestCases中有两个测试用例，一个用于执行静态方法，一个用于执行实例方法，分别为executeStaticMethod与executeVirtualMethod,","在对应的方法上，填充上classPath, className, methodName, methodSignature这些信息，\n类文件的详细信息可以使用ClassViewer查看。","直接运行","以下面这段代码编译的类文件为例","执行executeVirtualMethod, 运行该类的hello方法","可以在控制台得到如下输出","控制台输出展示了该方法所有的字节码指令，在指令执行中堆栈的变化情况，以及每个字节码指令运行的结果","断点调试","如果需要断点调试字节码指令，可以在VMExecutor中的execute()方法上下断点","调试子方法字节码","默认情况下，虚拟引擎仅解释执行指定方法的字节码，在指定方法中调用的子方法，仍然在JVM中运行，避免多层调用的巨大性能开销，如果希望所有的方法都通过虚拟引擎\n解释执行，请修改io.vlinx.vmengine.Options，将handleSubMethod修改为true"]]]},{url:"/articles/protecting-java-source-code-beyond-obfuscation",sections:[["保护Java源代码超越混淆",null,["Java类文件很容易被反向工程化。使Java应用程序能在任何地方运行的那些属性，使反向翻译变得直接。","市场上有许多Java反编译器，它们可以生成令人惊讶的易读源代码。任何具有一般编程技能的人都可以下载Java反编译器，通过它运行你的应用程序，并几乎像阅读开源代码一样阅读源代码。"]],["混淆","",["一个混淆器可以使反编译的代码变得难以理解。然而，名称混淆可能会导致反射和JNI失败，而大量的控制流混淆则会对性能产生负面影响，并可能引发VerifyError。更糟糕的是，这些问题只有在相应的类实际在应用程序运行时加载时才会显现出来，因此可能会在QA过程中被忽视。并且，通过优化编译器处理的等效C++程序的逆向工程仍然会更困难。"]],["通过Protector4J加强保护","protector4-j",["Protector4J可以通过加密类来保护您的java源代码，它通过修改JVM创建了一个自定义的本地ClassLoader。Java类由AES加密，并在本地ClassLoader中解密。并且它还引入了一些机制来提高破解的难度。","加密您的代码可以保护您的知识产权，并大大提高您的应用程序的安全性。它使得IP盗窃、代码篡改和安全漏洞的发现涉及到昂贵的逆向工程努力，而实际上任何人都可以下载并运行一个免费的Java反编译器。","Protector4J也可以帮助您为Windows，Linux，macOS创建您的Java App的可执行包装器"]]]},{url:"/articles/the-issues-of-aot-protection",sections:[["AOT编译存在的问题",null,["AOT编译即将Java代码编码为本地代码，不仅大大提高了Java程序的运行速度，而且由于将Java代码转换为机器代码，因此也间接达到了保护Java代码的目的。","对于Java程序来说，特别对于基于各类框架的Java程序，由于包含了许多动态特性，进行AOT编译是一个巨大的挑战，同时为了向动态性做出妥协，编译完成后的二进制文件中仍然可能包含大量类文件信息。下面这篇文章即介绍了一个项目，通过扫描编译好的二进制文件获取到类信息\nhttps://protector4j.com/articles/extract-java-classes-information-from-aot/","即使二进制程序中不包含类文件信息，但是其运行逻辑仍然是同样存在的，只不过表示形式由原来的字节码表示转换为机器代码表示，并没有进行特别的保护，如果能够了解其本身的编译与运行机制，仍然能够逆向还原出可读性的代码。下面这篇文章即介绍了这样一个项目","https://protector4j.com/articles/graalvm-nativeimage-reverse-engineering/"]],["结论","",["AOT编译配置难度大，编译难度大，编译失败概率高，即使编译成功，代码逻辑也仅是由原来的字节码表示转换为机器代码表示，其本身的运行逻辑仍然存在，并没有进行特别的保护，如果能够了解其本身的编译与运行机制，仍然能够逆向还原出可读性的代码。"]]]},{url:"/articles/the-issues-of-class-encryption",sections:[["Java类文件加密存在的问题",null,["除了混淆之外，类文件加密是一种很容易被想到的代码保护方式，许多方案采用agent的方式对类文件进行加密，并在类加载的时候解密。但这些方案都忽略了很重要的一点，即JVM自带的附加机制"]],["JVM附加机制","jvm",["为了便于对程序的运行状况进行分析与监测，普通的JVM都带有附加自制，用户可以使用jhsdb这类工具，附加到JVM进程，对其内存数据进行查看和分析，并且这些内存数据还是按照源文件中的数据结构被妥善组织好的，这也可以理解为JVM自带的一种后门机制。","下面这篇文章介绍了如何使用JVM附加机制读取并保存内存中的类文件信息","https://protector4j.com/articles/cracking-encrypted-java-applications-jhsdb/","除了可以使用JDK自带的jhsdb工具之外，还可以使用阿里巴巴的Arthas对运行中的Java进程进行分析。"]],["结论","",["由于JVM附加机制的存在，所有未脱离普通JVM运行的所谓加密代码，都可以使用附加工具轻松读取，因此这是一种最无效的保护方案。"]]]},{url:"/articles/the-issues-of-code-obfuscation",sections:[["代码混淆存在的问题",null,["代码混淆是最早应用于Java代码保护的方案，也是一个最直接的方案。","代码混淆通常有下面四种方法：","包名、类名、变量名转换","控制结构改变，如控制流平坦化、添加不可变谓词等","字符串混淆或加密","添加无用代码","代码混淆可以大幅降低反编译代码的可读性，提升静态分析的难度，但是无论如何进行代码混淆，程序的运行逻辑是不会改变的。","JVM字节码上是一种语义很清晰明确，且极为阅读的中间代码，对于被混淆的class文件，即使无法还原成可读的Java源代码，仍然可以在字节码层面进行分析，由于Java字节码的高语义性，这个过程其实还是比较容易的","我们曾使用Java与Kotlin语言开发了一个JVM字节码执行引擎，用户可以使用这个项目在IDEA中对Java程序进行字节码级别的动态调试。具体可参考下面这篇文章","https://protector4j.com/articles/jvm-bytecode-engine-written-with-java-and-kotlin/","并且我们使用这个引擎尝试破解一个较为有名的混淆引擎混淆后的代码，具体过程可参见下面这篇文章","http://protector4j.com/articles/deobfuscate-with-vlx-vmengine/"]],["结论","",["从上面的分析中可以看到，由于JVM字节码的高语义性，使得期极为容易被分析与阅读，使用动态调试的方式可以很容易分析出其运行逻辑，而动态调试工具的编写并不是一件十分复杂的事情，因此混淆并不是一种可靠的保护方案。"]]]},{url:"/articles/the-issues-of-vm-protection",sections:[["虚拟化保护方案存在的问题",null,["混淆能够提升静态分析的难度，但无法有效防范动态分析，代码虚拟化的目的即在于提高动态分析的难度。","Java的代码虚拟化即通过构建自定义的虚拟化引擎，使原来可以直接即使的字节码，通过虚拟化引擎执行，由于是自定义的虚拟化引擎，外界无法直接获取到其执行方式，指令格式等信息，并且产生了大量的代码膨胀，因此难以逆向出包含其原语义信息的代码。"]],["虚拟化对于性能的影响","",["虚拟化保护是一种强度极高的代码保护方案，但是虚拟化保护存在的一个最大的问题即是：性能，自定义的虚拟化引擎难以像JVM一样采取众多的性能优化措施，\n也无法应用JIT这类的性能优化技术。你们可以尝试使用我们之前提到过的JVM引擎与普通JVM执行相同的代码，然后比较下性能，可能会得到百倍以上的性能差距。","由于虚拟化对于性能的严重影响，所以虚拟化保护无法应用于全部代码，只能应用于部分关键代码，其他代码仍然需要使用混淆或者加密的方式进行保护，由于其他部分代码未使用虚拟化进行保护，就可以在其他代码中找到虚拟化代码的入口，从而在入口与出口处直接分析代码功能，而不需要理解整段代码的逻辑。"]],["结论","",["虚拟化保护是强度最高的一种代码保护方式，但是由于期对性能的严重影响，因此无法应用到程序中的全部代码，而只能保护关键代码，其他代码仍然有暴露的风险，而以其他部分代码来切入口，就可以获取到虚拟化部分代码的功能信息。"]]]},{url:"/articles/what-is-jarx-file",sections:[["什么是JARX文件",null,["JARX文件是我们的专有存档文件格式，它使用与Zip相同的Deflate压缩算法，并使用AES加密算法来加密数据。","JARX文件的结构与所有存档文件类型相似，由条目组成，这些条目以我们的专有方式组织，条目的名称和内容使用AES算法进行加密。","由于JARX文件格式并未公开，且条目的内容和名称已加密，且没有工具可以直接解压和JARX文件，因此使用JARX文件不仅可以保护您的类文件的内容，还可以保护整个JAR文件的结构，即外界甚至无法获取您的类的名称，这将使其更难以破解。"]]]},{url:"/docs/changelog",sections:[["更新日志",null,[]],["3.0.2 2023-05-29","3-0-2-2023-05-29",["修复Windows下的解码问题"]],["3.0.1 2023-05-25","3-0-1-2023-05-25",["修复了mac-aarch64版本的启动问题"]],["3.0.0 2023-05-20","3-0-0-2023-05-20",["新的应用程序启动系统","新的解码系统","Java 8 现在可以使用 -jar 命令运行程序"]],["2.12.5 2023-05-12","2-12-5-2023-05-12",["修复了jdk8在macOS上无法找到freetype的问题"]],["2.12.4 2023-02-28","2-12-4-2023-02-28",["更新后端"]],["2.12.3 2023-02-24","2-12-3-2023-02-24",["修复解码器中的一个错误"]],["2.12.2 2023-02-21","2-12-2-2023-02-21",["提升加密安全性"]],["2.12.1 2023-02-03","2-12-1-2023-02-03",["为了避免因临时网络问题导致的下载失败，所有下载在失败3次后将抛出异常"]],["2.12.0 2023-01-20","2-12-0-2023-01-20",["将JDK17更新到17.0.6+9"]],["2.11.2 2022-12-22","2-11-2-2022-12-22",["修复关于Java 17的另一个ZipFileSystem错误"]],["2.11.1 2022-10-10","2-11-1-2022-10-10",["修复Java 17下的ZipFileSystem错误"]],["2.11.0 2022-10-06","2-11-0-2022-10-06",["添加应用程序启动脚本","添加重复类检测"]],["2.10.2 2022-10-04","2-10-2-2022-10-04",["修复了由于超时设置过低导致的网络连接错误"]],["2.10.1 2022-09-30","2-10-1-2022-09-30",["修复了在Linux下以不同用户启动应用程序时会自动退出的问题","请将以下内容按照原样格式从en翻译到zh，保留所有符号: ## 2.10.0 2022-08-27","使用新证书为Windows重新签名"]],["2.9.3 2022-08-12","2-9-3-2022-08-12",["修复了在名称没有斜杠的情况下无法读取目录条目的问题。"]],["2.9.2 2022-08-09","2-9-2-2022-08-09",["修复了ZipEntry大小为0时，读取资源生成异常的问题。"]],["2.9.1 2022-08-03","2-9-1-2022-08-03",["修复了tomcat无法读取二级目录资源的错误","当未指定主类时，会给出错误信息"]],["2.9.0 2022-07-13","2-9-0-2022-07-13",["修复了无法从加密的jar包中正确读取资源的问题","为具有war打包结构的spring boot应用程序提供支持"]],["2.8.1 2022-06-16","2-8-1-2022-06-16",["修复了在Windows下运行新版本Java 8的问题"]],["2.8.0 2022-06-14","2-8-0-2022-06-14",["为Vaadin应用程序提供支持"]],["2.7.3 2022-05-23","2-7-3-2022-05-23",["将JDK17版本更新为17.0.4+3"]],["2.7.2 2022-05-22","2-7-2-2022-05-22",["修复java 8启动屏幕参数问题","tomcat-launcher支持添加JVM参数"]],["2.7.1 2022-05-18","2-7-1-2022-05-18",["修复在Windows下生成Tomcat应用时解压JDK8的错误"]],["2.7.0 2022-02-23","2-7-0-2022-02-23",["将Java 17更新为17.0.3-2","修复Java8中缺少vcruntime140.dll的问题"]],["2.6.6 2022-02-17","2-6-6-2022-02-17",["修复war包中没有WEB-INF/lib文件夹时的问题"]],["2.6.5 2022-01-17","2-6-5-2022-01-17",["在Apple Silicon下，如果选择Java 8或Java 11作为目标Java版本，将生成适用于x86平台的应用程序，而无需选择特定平台"]],["2.6.4 2022-01-16","2-6-4-2022-01-16",["为Linux x86和Linux ARM64添加服务创建器","修复macOS下Java 8 FontManager的问题"]],["2.6.3 2021-12-27","2-6-3-2021-12-27",["修复处理非标准Tomcat war文件时的问题"]],["2.6.2 2021-12-21","2-6-2-2021-12-21",["修复了在Java 8下，包装器无法正确读取JVM参数的问题"]],["2.6.1 2021-11-29","2-6-1-2021-11-29",["修复程序在空格路径或非英文字符路径下无法正确运行的问题","修复Java 17无法使用-jar命令运行jar包的问题"]],["2.6.0 2021-11-22","2-6-0-2021-11-22",["增加对Java 8、Java 11和Java 17的支持，移除Java 15的支持","增加对Apple Silicon的支持","修复了在某些情况下应用程序自动退出的问题"]],["2.5.7 2021-10-12","2-5-7-2021-10-12",["修复了exe包装器无法正确读取配置文件的问题"]],["2.5.6 2021-09-25","2-5-6-2021-09-25",["添加对Spring Boot war打包的支持"]],["2.5.5 2021-08-22","2-5-5-2021-08-22",["改进父子进程之间的通信机制","修复包装器错误退出的问题"]],["2.5.4 2021-08-17","2-5-4-2021-08-17",["修复了关于win32平台的问题"]],["2.5.3 2021-08-15","2-5-3-2021-08-15",["提供对子文件夹库依赖的支持"]],["2.5.2 2021-08-05","2-5-2-2021-08-05",["修复了程序从睡眠模式恢复后自动退出的问题","修复了在Windows Server 2012下无法正确运行的问题"]],["2.5.1 2021-07-30","2-5-1-2021-07-30",["修复了Tomcat和Spring Boot应用程序的一些配置文件无法正确读取的问题",'现在默认选择了"包含已移除的JavaEE模块"']],["2.5.0 2021-07-25","2-5-0-2021-07-25",["添加服务创建者","恢复Java进程",'"仅加密Jar文件"只能由许可用户选择']],["2.4.0 2021-07-18","2-4-0-2021-07-18",["提供对Windows x86的支持","提供对Linux x86的支持","提供对Linux AArch64的支持","修复了错误并进行了改进"]],["2.3.0 2021-07-11","2-3-0-2021-07-11",["将加密文件扩展名从 jarx 更改为 jar","为 NIO 提供加密文件格式支持","为 Quarkus 框架提供支持","改进任务完成对话框的用户界面","修复 add-executable-permission 脚本中的问题"]],["2.2.2 2021-07-06","2-2-2-2021-07-06",["修复了由于java.class.path的值不正确，导致资源无法正确加载的问题"]],["2.2.1 2021-06-29","2-2-1-2021-06-29",["修复在导出到多个平台时资源名称不正确的问题"]],["2.2.0 2021-06-28","2-2-0-2021-06-28",["修复关于ClassLoader资源加载的问题","调整wrapper.json文件的结构","修复一些关于文件锁的问题","其他问题修复和改进"]],["2.1.3 2021-06-20","2-1-3-2021-06-20",['修复配置文件中"="显示的问题',"在用户界面上添加一些关于功能的提示"]],["2.1.2 2021-06-08","2-1-2-2021-06-08",["修复了jar-launcher获取lib文件夹路径错误的问题"]],["2.1.1 2021-06-05","2-1-1-2021-06-05",["修复了创建多个可执行文件的问题"]],["2.1.0 2021-05-12","2-1-0-2021-05-12",["升级JavaWrapper以支持为多个程序运行指定lib文件夹","提供java/security/acl/Group支持，该支持自Java 13以来已被移除","修复关于模块检查的问题","修复Windows上关于javaxw的问题"]],["2.0.2 2021-05-04","2-0-2-2021-05-04",["提供一个javax过程，可以以传统方式运行java程序","修复了在GUI中重复运行spring boot任务的问题"]],["2.0.1 2021-04-29","2-0-1-2021-04-29",["修复了macOS和Linux中关于空间路径的错误","修复了InfoDialog没有滚动条的问题","更新任务文件模板并移除一些无用的字段","修复了readme文件错误部署路径的问题","由于字段名称不一致，修复了任务文件无法正确加载的问题","其他错误修复"]],["2.0.0 2021-04-22","2-0-0-2021-04-22",["主版本升级","将加密解决方案从类文件加密更改为jar文件加密，不仅保护了类文件的内容，还保护了整个应用程序结构。","升级Java版本，基于Java 15，不再提供其他Java版本选项。","更改运行生成的应用程序的方式，不再使用jre/bin/java -jar xxx.jar来运行它，而是直接使用在加密任务期间生成的可执行文件。Tomcat仍然以与以前相同的方式运行。","用户信息不再写入任务文件，而是作为命令行工具的参数。密码参数现在只是密码，不再是md5值。","优化加密过程，大大缩短了加密时间。","禁用Java内存转储和分析","禁用Java附加机制","禁用Java代理","其他升级和修复。"]],["1.11.0 2021-02-14","1-11-0-2021-02-14",["内建jdk更新"]],["1.10.4 2021-01-26","1-10-4-2021-01-26",["修复了macOS下javafx11的问题"]],["1.10.3 2020-12-18","1-10-3-2020-12-18",["修复了关于Tomcat-9.0.39的问题","修复了关于加载任务文件的问题"]],["1.10.2 2020-12-02","1-10-2-2020-12-02",["修复读取非标准jar文件的错误"]],["1.10.1 2020-12-04","1-10-1-2020-12-04",["将jdk11的版本更新为11.0.9+1，将jdk8的版本更新为8u272"]],["1.9.8 2020-11-14","1-9-8-2020-11-14",["将tomcat版本更新至8.5.59和9.0.39"]],["1.9.7 2020-09-24","1-9-7-2020-09-24",["在UI工具中导出和加载任务文件","更新一些文档","修复错误"]],["1.9.6 2020-09-05","1-9-6-2020-09-05",["修复了jre/bin中二进制文件的问题"]],["1.9.5 2020-08-29","1-9-5-2020-08-29",["修复了Linux中文件描述符泄漏的问题"]],["1.9.4 2020-08-23","1-9-4-2020-08-23",["修复了UI工具上的登录错误"]],["1.9.3 2020-08-22","1-9-3-2020-08-22",["ProtectAll和ProtectInnerJars不能同时设为真","修复了错误"]],["1.9.2 2020-08-02","1-9-2-2020-08-02",["Windows的签名应用程序包","Mac的签名应用程序包","Windows的签名JRE/JDK包","macOS的签名JRE/JDK包","Bug修复"]],["1.9.0 2020-04-21","1-9-0-2020-04-21",["更新可执行包装器","更新Tomcat服务包装器","更新Spring Boot服务包装器","调整文件结构","ClassName加密（Alpha）","修复错误"]],["1.8.5 2020-03-31","1-8-5-2020-03-31",["修复Windows exe包装器的参数错误","添加关于JDK11的JavaFX的提示"]],["1.8.4 2020-03-25","1-8-4-2020-03-25",["添加排除列表","优化加密工作流程","修复错误"]],["1.8.3 2020-03-11","1-8-3-2020-03-11",["添加对所有版本的ASM库的支持"]],["1.8.2 2020-03-08","1-8-2-2020-03-08",["添加关键种子以生成固定密钥"]],["1.8.0 2020-03-05","1-8-0-2020-03-05",["更新Windows可执行包装器","添加exe包装器的单实例支持","更新加密类页面","恢复到SWT UI","修复错误"]],["1.7.3 2020-02-22","1-7-3-2020-02-22",["修复 JavaFX 分发错误"]],["1.7.2 2020-02-12","1-7-2-2020-02-12",["添加Windows服务包装器","修复平台选择错误"]],["1.7.1 2020-02-08","1-7-1-2020-02-08",["添加对jlink的支持，以创建自定义/修改的JVM","修复tomcat分发错误"]],["1.7.0 2020-02-07","1-7-0-2020-02-07",["添加可执行包装器"]],["1.6.0 2020-01-23","1-6-0-2020-01-23",["添加对ARM(aarch64)平台的支持"]],["1.5.2 2019-12-17","1-5-2-2019-12-17",["添加阅读提示","修复了等待后台任务完成的错误"]],["1.5.1 2019-12-09","1-5-1-2019-12-09",["更新通信协议"]],["1.5.0 2019-12-03","1-5-0-2019-12-03",["重要的安全增强","增加对JavaFX的支持","增加对CentOS 6的支持"]],["1.4.6 2019-11-19","1-4-6-2019-11-19",["修复了关于路径中带有空格的一些错误"]],["1.4.5 2019-10-28","1-4-5-2019-10-28",["添加对32位平台的支持","将配置文件格式更改为yaml"]],["1.4.2 2019-10-11","1-4-2-2019-10-11",["修复了新用户界面上的一些错误"]],["1.4.1 2019-10-04","1-4-1-2019-10-04",["添加对eclipse插件的支持"]],["1.4.0 2019-10-03","1-4-0-2019-10-03",["新的用户界面组件和主题","修复了关于内部jar的错误"]],["1.3.1 2019-09-21","1-3-1-2019-09-21",["修复了一个关于GlassFish App的错误"]],["1.3.0 2019-09-17","1-3-0-2019-09-17",["添加对spring框架完整版本的支持"]],["1.2.0 2019-09-06","1-2-0-2019-09-06",["添加对GlassFish应用的支持","添加对Payara应用的支持"]],["1.1.5 2019-09-02","1-1-5-2019-09-02",["添加对内部 jars 的支持","更新关于大型 jar/war 文件的 UI 操作"]],["1.0.2  2019-08-22","1-0-2-2019-08-22",["修复了Tomcat Web App上的一些错误"]],["1.0.0  2019-07-13","1-0-0-2019-07-13",["Protector4J的第一版","保护Java应用","保护Tomcat Web应用","保护Spring Boot应用"]]]},{url:"/docs/create-multi-exe",sections:[["如何创建多个可执行文件",null,["通常情况下，Protector4J会为每个加密任务创建一个可执行文件来运行您的应用程序。","但是，在某些情况下，应用程序可能需要有多个可执行文件，例如主程序、更新程序或其他。","如果您打开输出目录，您可以看到一个可执行文件和一个同名且扩展名为“.json”的配置文件。如果您需要创建其他的可执行文件，只需复制并重命名它们，例如app01.exe与app01.json，打开app01.json文件并修改“LibFolder”和“MainClass”","默认情况下，可执行文件将以vlxlib下的所有jar文件作为类路径。您可以为不同的可执行文件创建不同的LibFolder，并将相应的jar文件复制到相应的LibFolder中。例如，创建一个名为app01的文件夹，并从vlxlib中移动与app01对应的所有jar文件到该文件夹中，以下是相关配置示例："]]]},{url:"/docs/eclipse-plugin",sections:[["安装Eclipse插件",null,["更新站点","https://protector4j.com/eclipse/","第一步","帮助 -> 安装新软件....","","步骤2","输入更新站点的url并选择Protector4J功能","","第三步","安装后，窗口 -> 显示视图，搜索protector4j视图并打开它。","",""]],["下载独立版本","",["您也可以从 https://protector4j.com/download 下载独立版本"]],["详细使用方法","",["如需详细使用方法，请访问 https://doc.protector4j.com/get-started"]]]},{url:"/docs/get-started",sections:[["开始使用",null,[]],["下载","",["访问 https://protector4j.com/download 下载最新版。","支持的平台","Windows","Linux","macOS (10.14+)"]],["安装","",["Windows 与 Linux","没有特别的安装步骤, 只需要下载压缩包并解压即可。","macOS","下载dmg文件并拖拽Protector4J到Applications, 程序的实际内容在Protector4J.app/Contents/protector4j-mac",""]],["应用结构","",["我们同时提供提供图形界面工具与命令行工具,  你可以根据你的实际需求进行选择。","GUI工具","运行**p4j-ui[.exe]**启动GUI工具. 你可以以向导的方式一步步地完成加密过程。","","CLI工具","p4j[.exe] 为CLI工具  运行 p4j -h 查看使用信息。","对于macOS用户, 你可以在Protector4J.app/Contents/protector4j-mac找到上述的文件","","任务文件模板","命令行工具需要指定任务文件作为参数， 你可以根据你的项目情况编辑任务文件.  任务文件模板存储中task-templates文件夹中。",""]],["保护您的Java应用","java",["保护JavaSE应用","保护Tomcat Web应用","保护Spring Boot应用"]]]},{url:"/docs/index",sections:[["开始使用",null,[]],["下载","",["访问 https://protector4j.com/download 下载最新版。","支持的平台","Windows","Linux","macOS (10.14+)"]],["安装","",["Windows 与 Linux","没有特别的安装步骤, 只需要下载压缩包并解压即可。","macOS","下载dmg文件并拖拽Protector4J到Applications, 程序的实际内容在Protector4J.app/Contents/protector4j-mac",""]],["应用结构","",["我们同时提供提供图形界面工具与命令行工具,  你可以根据你的实际需求进行选择。","GUI工具","运行**p4j-ui[.exe]**启动GUI工具. 你可以以向导的方式一步步地完成加密过程。","","CLI工具","p4j[.exe] 为CLI工具  运行 p4j -h 查看使用信息。","对于macOS用户, 你可以在Protector4J.app/Contents/protector4j-mac找到上述的文件","","任务文件模板","命令行工具需要指定任务文件作为参数， 你可以根据你的项目情况编辑任务文件.  任务文件模板存储中task-templates文件夹中。",""]],["保护您的Java应用","java",["保护JavaSE应用","保护Tomcat Web应用","保护Spring Boot应用"]]]},{url:"/docs/protect-javase-app",sections:[["保护JavaSE应用程序",null,[]],["入门视频","",["▶️ https://www.youtube.com/watch?v=MQf9IiDHQ18"]],["下载","",["访问 https://protector4j.com/download 下载最新版。"]],["安装","",["Windows 与 Linux","没有特别的安装步骤, 只需要下载压缩包并解压即可。","macOS","下载dmg文件并拖拽Protector4J到Applications, 程序的实际内容在Protector4J.app/Contents/protector4j-mac",""]],["使用GUI工具加密JavaSE应用","gui-java-se",["进入Protector4J文件夹， 运行p4j-ui[.exe] , 你将会看到下面的用户界面","对于macOS用户, 像普通mac应用一样双击Protector4J.app即可","","登录","如果你已经购买了授权,  请点击右上角的登录按钮，输入用户信息，如果没有授权，您仍然可以试用这个工具","","选择应用类型",'在程序类型页面点击"JavaSE Application"按钮。',"","选择需要加密的jar/war文件","选择需要加密的jar/war文件，可以单选或者多选","","选项","Just encrypt jar files","只加密jar文件，不输出整个jre, 这个选项通常与KeySeed特性结合使用，用于更新现有的程序。","创建可执行文件","创建用于启动应用的可执行文件， 请不要添加.exe扩展名.","","隐藏命令行窗口","这个选项仅对Windows下的GUI程序有效，用于隐藏程序执行时的命令行窗口","JVM选项","设置JVM选项，如-Xmx与-Xms等，以空格或者换行分割。","输出","","Java版本选择","选择对应的Java版本, 支持Java 8, Java 11 and Java 17.","创建新文件夹","默认选择, 加密任务会在输出文件夹中创建一个名为 p4j-[task-id]的文件夹, 最终输出的结果存储在这个文件夹中。","包含JavaFX","如果是JavaFX应用请选择此项","SWT Application","如果是SWT应用请选择此项。","KeySeed","默认情况下加密任务每次都会从服务端请求一个随机的key用于加密, 在不同加密任务中生成的文件无法兼容使用。 如果指定了KeySeed，相同的的KeySeed会生成相同的加密Key, 这个选项可以与之前的“Only Encrypt Jar Files”用于更新现有应用。这个选项仅对授权用户有效。","执行加密任务","请等待一段时间，待加密任务完成之后，您可以在输出文件夹中看到输出的加密应用。","","运行加密的应用","有三种方式运行加密后的应用","使用exe文件运行","使用加密任务生成的可执行文件运行加密应用","使用脚本运行","使用与exe文件同名的脚本文件运行应用，如果你打开这个脚本文件，你可以看到我们如何使用传统的Java命令运行程序。","使用传统的Java命令运行程序","你也可以使用传统的Java命令手动运行程序，命令的格式与传统Java命令相同。","我们可以在输出文件夹中看到一个命名vlxjre的文件夹，这是我们定制的jre运行环境，同时加密后的jar文件存储在vlxlib文件夹中。","Java 8 当前不支持使用vlxjre/bin/java -jar的方式运行, 请使用vlxjre/bin/java -cp 的方式","注意事项","如果这个程序的目标平台是macOS或者Linux，但是在Windows下生成，在首次使用时请在目标平台上运行add-executable-permission.sh，以给予程序运行权限。","修改exe文件的运行参数","如果你需要修改exe文件的JVM参数, 编码exe-name.json, 修改JVMOptions数组的值"]],["使用命令行工具加密JavaSE应用","java-se",["配置文件","命令行工具需要指定一个任务文件作为参数","在task-templates文件夹中找到java-task.yml，复制并且修改","执行加密任务","进入到Protector4J文件夹执行下面命令","Linux或macOS","对于macOS用户，你可以在Protector4J.app/Contents/protector4j-mac下找到cli工具","Windows","> -t task type\n>\n> -f task file","可以运行p4j --help查看详细参数","添加用户信息运行","查看结果","加密任务完成之后，请前往输出文件夹查看结果。","运行加密的应用","有三种方式运行加密后的应用","使用exe文件运行","使用加密任务生成的可执行文件运行加密应用","使用脚本运行","使用与exe文件同名的脚本文件运行应用，如果你打开这个脚本文件，你可以看到我们如何使用传统的Java命令运行程序。","使用传统的Java命令运行程序","你也可以使用传统的Java命令手动运行程序，命令的格式与传统Java命令相同。","我们可以在输出文件夹中看到一个命名vlxjre的文件夹，这是我们定制的jre运行环境，同时加密后的jar文件存储在vlxlib文件夹中。"]]]},{url:"/docs/protect-spring-boot-app",sections:[["保护SpringBoot应用程序",null,[]],["入门视频","",["▶️ https://www.youtube.com/watch?v=FKqruAJAJFw"]],["下载","",["访问 https://protector4j.com/download 下载最新版。"]],["安装","",["Windows 与 Linux","没有特别的安装步骤, 只需要下载压缩包并解压即可。","macOS","下载dmg文件并拖拽Protector4J到Applications, 程序的实际内容在Protector4J.app/Contents/protector4j-mac",""]],["使用GUI工具加密SpringBoot应用","gui-spring-boot",["进入Protector4J文件夹， 运行p4j-ui[.exe] , 你将会看到下面的用户界面","对于macOS用户, 像普通mac应用一样双击Protector4J.app即可","","登录","如果你已经购买了授权,  请点击右上角的登录按钮，输入用户信息，如果没有授权，您仍然可以试用这个工具","","选择应用类型",'在程序类型页面点击"Spring Boot Application"按钮。',"","选择需要加密的jar/war文件","选择需要加密的jar/war文件，可以单选或者多选","","选项","Just encrypt jar files","只加密jar文件，不输出整个jre, 这个选项通常与KeySeed特性结合使用，用于更新现有的程序。","创建可执行文件","创建用于启动应用的可执行文件， 请不要添加.exe扩展名.","","隐藏命令行窗口","这个选项仅对Windows下的GUI程序有效，用于隐藏程序执行时的命令行窗口","JVM选项","设置JVM选项，如-Xmx与-Xms等，以空格或者换行分割。","输出","","执行加密任务","请等待一段时间，待加密任务完成之后，您可以在输出文件夹中看到输出的加密应用。","","运行加密的应用","有三种方式运行加密后的应用","使用exe文件运行","使用加密任务生成的可执行文件运行加密应用","使用脚本运行","使用与exe文件同名的脚本文件运行应用，如果你打开这个脚本文件，你可以看到我们如何使用传统的Java命令运行程序。","使用传统的Java命令运行程序","你也可以使用传统的Java命令手动运行程序，命令的格式与传统Java命令相同。","我们可以在输出文件夹中看到一个命名vlxjre的文件夹，这是我们定制的jre运行环境，同时加密后的jar文件存储在vlxlib文件夹中。","注意事项","如果这个程序的目标平台是macOS或者Linux，但是在Windows下生成，在首次使用时请在目标平台上运行add-executable-permission.sh，以给予程序运行权限。","修改exe文件的运行参数","如果你需要修改exe文件的JVM参数, 编码exe-name.json, 修改JVMOptions数组的值"]],["使用命令行工具加密SpringBoot应用","spring-boot",["配置文件","命令行工具需要指定一个任务文件作为参数","在task-templates文件夹中找到spring-boot-task.yml，复制并且修改","执行加密任务","进入到Protector4J文件夹执行下面命令","Linux或macOS","对于macOS用户，你可以在Protector4J.app/Contents/protector4j-mac下找到cli工具","Windows","> -t task type\n>\n> -f task file","可以运行p4j --help查看详细参数","添加用户信息运行","查看结果","加密任务完成之后，请前往输出文件夹查看结果。","运行加密的应用","有三种方式运行加密后的应用","使用exe文件运行","使用加密任务生成的可执行文件运行加密应用","使用脚本运行","使用与exe文件同名的脚本文件运行应用，如果你打开这个脚本文件，你可以看到我们如何使用传统的Java命令运行程序。","使用传统的Java命令运行程序","你也可以使用传统的Java命令手动运行程序，命令的格式与传统Java命令相同。","我们可以在输出文件夹中看到一个命名vlxjre的文件夹，这是我们定制的jre运行环境，同时加密后的jar文件存储在vlxlib文件夹中。"]]]},{url:"/docs/protect-tomcat-web-app",sections:[["保护Tomcat Web应用",null,[]],["入门视频","",["▶️ https://www.youtube.com/watch?v=7d8afvHc2V4"]],["下载","",["访问 https://protector4j.com/download 下载最新版。"]],["安装","",["Windows 与 Linux","没有特别的安装步骤, 只需要下载压缩包并解压即可。","macOS","下载dmg文件并拖拽Protector4J到Applications, 程序的实际内容在Protector4J.app/Contents/protector4j-mac",""]],["使用GUI工具加密JavaSE应用","gui-java-se",["进入Protector4J文件夹， 运行p4j-ui[.exe] , 你将会看到下面的用户界面","对于macOS用户, 像普通mac应用一样双击Protector4J.app即可","","登录","如果你已经购买了授权,  请点击右上角的登录按钮，输入用户信息，如果没有授权，您仍然可以试用这个工具","","选择应用类型",'在程序类型页面点击"JavaSE Application"按钮。',"","选择需要加密的jar/war文件","选择需要加密的jar/war文件，可以单选或者多选","","Options","Just encrypt jar files","只加密jar文件，不输出整个jre, 这个选项通常与KeySeed特性结合使用，用于更新现有的程序。","输出","","Java版本选择","选择对应的Java版本, 支持Java 8, Java 11 and Java 17.","创建新文件夹","默认选择, 加密任务会在输出文件夹中创建一个名为 p4j-[task-id]的文件夹, 最终输出的结果存储在这个文件夹中。","KeySeed","默认情况下加密任务每次都会从服务端请求一个随机的key用于加密, 在不同加密任务中生成的文件无法兼容使用。 如果指定了KeySeed，相同的的KeySeed会生成相同的加密Key, 这个选项可以与之前的“Only Encrypt Jar Files”用于更新现有应用。这个选项仅对授权用户有效。","执行加密任务","请等待一段时间，待加密任务完成之后，您可以在输出文件夹中看到输出的加密应用。","","运行加密的应用","进入到输出文件夹,  执行 tomcat/bin/startup.sh 或 tomcat/bin/startup.bat 以启动应用","META-INF/classes 在哪里","你可以在webapps文件夹中找到你的应用，但是原来的WEB-INF/classes不再存在了，为了能够保护应用结构，避免外部用户获取类名等信息，我们已经将WEB-INF/classes打包进WEB-INF/vlxapp.jar，这是我们私有的一个加密jar格式。","WEB-INF/vlxapp.jar","If the application is for macOS or Linux and is generated under Windows,\nplease execute add-executable-permission.sh first to give the program executable permission.","注意事项","如果这个程序的目标平台是macOS或者Linux，但是在Windows下生成，在首次使用时请在目标平台上运行add-executable-permission.sh，以给予程序运行权限。"]],["使用命令行工具加密Tomcat Web应用","tomcat-web",["配置文件","命令行工具需要指定一个任务文件作为参数","在task-templates文件夹中找到tomcat-task.yml，复制并且修改","执行加密任务","进入到Protector4J文件夹执行下面命令","On Linux or macOS","对于macOS用户，你可以在Protector4J.app/Contents/protector4j-mac下找到cli工具","On Windows","> -t task type\n>\n> -f task file","可以运行p4j --help查看详细参数","添加用户信息运行","查看结果","加密任务完成之后，请前往输出文件夹查看结果。","运行加密的应用","进入到输出文件夹,  执行 tomcat/bin/startup.sh 或 tomcat/bin/startup.bat 以启动应用","META-INF/classes 在哪里","你可以在webapps文件夹中找到你的应用，但是原来的WEB-INF/classes不再存在了，为了能够保护应用结构，避免外部用户获取类名等信息，我们已经将WEB-INF/classes打包进WEB-INF/vlxapp.jar，这是我们私有的一个加密jar格式。","WEB-INF/vlxapp.jar","If the application is for macOS or Linux and is generated under Windows,\nplease execute add-executable-permission.sh first to give the program executable permission.","注意事项","如果这个程序的目标平台是macOS或者Linux，但是在Windows下生成，在首次使用时请在目标平台上运行add-executable-permission.sh，以给予程序运行权限。"]]]},{url:"/docs/service-creator",sections:[["Service Creator",null,["Service creator需要团队版或更高版本。"]],["如何包含Service Creator","service-creator",["GUI工具",'勾选 "Include Service Creator" 在应用输出页面',"include-service-creator","命令行工具","在任务文件中添加 includeServiceCreator 字段"]],["如何使用Service Creator","service-creator-2",["Windows","Windows的service creator 就是 nssm tool","你可以在输出文件夹中找到这个工具，它需要与你的可执行文件一起使用。","安装服务","进入到输出文件夹, 执行","启动服务","停止service","查看状态","移除服务","关于nssm的详细使用请参考https://nssm.cc/commands","Linux","Linux下的service creator是基于systemctl","安装服务","进入输出文件夹, 执行","服务创建后, 服务会自动运行并且设置为随系统启动","检查服务状态","停止服务","启动服务","禁用自动运行","启用自动运行","关于systemctl的详细使用, 请参考https://www.shubhamdipt.com/blog/how-to-create-a-systemd-service-in-linux/"]]]},{url:"/docs/update-java-app",sections:[["如何更新现有的加密Java应用程序",null,[]],["KeySeed","key-seed",["Protector4J将为每个加密任务从服务器请求一个随机且唯一的密钥，由于每个任务的密钥都不同，因此来自不同任务的加密jar文件不能一起使用。因此，我们提供了KeySeed功能，相同的KeySeed将生成相同的密钥，并且在相同KeySeed下加密的jar文件可以一起使用。目前，KeySeed仅适用于已授权用户。"]],["更新现有的Java应用程序","java",["1. 第一次生成应用程序时，指定一个KeySeed","",'2. 选择需要更新的战争或jar文件 并勾选"Only Encrypt Jar Files"',"","3. 在输出页面上指定相同的KeySeed。","","4.查看输出文件夹，并将新生成的vlxlib文件夹复制到现有应用程序文件夹中。如果需要，您可能需要先删除旧的vlxlib文件夹。",""]],["创建多个可执行文件","",["如果您需要为一个应用程序创建多个可执行文件，请参考[这里]。(/docs/create-multi-exe)"]]]},{url:"/docs/update-tomcat-app",sections:[["如何更新现有的加密Tomcat应用程序",null,[]],["由Protector4J生成的Tomcat应用程序结构","protector4-j-tomcat",["使用 Protector4J 处理您的应用程序后，完整的 Tomcat 运行时环境将输出到输出文件夹中。 您可以像以前一样使用 bin 目录中的 startup.sh 或 startup.bat 脚本来运行 Tomcat 程序。 我们定制的 JRE 版本也在 bin 目录中，您可以在那里找到一个 vlxjre 文件夹。","webapps","您还可以在webapps目录中找到您的应用程序，但原始的WEB-INF / classes文件夹已不再存在。这是因为为了保护您的应用程序架构，使外部用户甚至无法获取类名称信息，我们将WEB-INF / classes的内容打包成了WEB-INF / vlxapp.jar，它是jarx格式"]],["如何更新现有应用程序","",["您可能希望能够直接更新现有应用程序，而无需每次输出完整的Tomcat运行时环境。","KeySeed","Protector4J将为每个加密任务从服务器请求一个随机且唯一的密钥，由于每个任务的密钥都不同，因此来自不同任务的加密jar文件不能一起使用。因此，我们提供了KeySeed功能，相同的KeySeed将生成相同的密钥，并且在相同KeySeed下加密的jar文件可以一起使用。目前，KeySeed仅适用于已授权用户。","Updating an existing tomcat application","1. 在首次生成应用程序时，指定一个KeySeed。","","2. 选择需要更新的war或jar文件，并勾选“Only Encrypt Jar Files“","","3. 在输出页面上指定相同的KeySeed","","4.查看输出文件夹并将新生成的应用程序目录复制到webapps。",""]]]}])for(let[s,_,$]of o)j.add({url:i+(_?"#"+_:""),title:s,content:[s,...$].join("\n"),pageTitle:_?o[0][0]:void 0});function _(i){let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=j.search(i,{...o,enrich:!0});return 0===s.length?[]:s[0].result.map(i=>({url:i.id,title:i.doc.title,pageTitle:i.doc.pageTitle}))}}}]);