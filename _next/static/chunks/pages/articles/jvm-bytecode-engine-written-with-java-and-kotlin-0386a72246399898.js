(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[848],{2656:function(s,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/articles/jvm-bytecode-engine-written-with-java-and-kotlin",function(){return a(8036)}])},8036:function(s,n,a){"use strict";a.r(n),a.d(n,{__N_SSG:function(){return r}});var o=a(5893),e=a(1151);function t(s){let n=Object.assign({h1:"h1",h2:"h2",p:"p",strong:"strong",ol:"ol",li:"li",pre:"pre",code:"code",a:"a",h3:"h3"},(0,e.ah)(),s.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"使用Java/Kotln编写的JVM字节码执行引擎"}),"\n",(0,o.jsx)(n.h2,{id:"java",children:"JAVA 字节码执行引擎"}),"\n",(0,o.jsx)(n.p,{children:"传统的Java动态调试仅能够基于源码级别，如果没有源码，或者被混淆后的Java类文件，则无法进行动态调试。"}),"\n",(0,o.jsx)(n.p,{children:"Java程序的运行基于JVM虚拟机， JVM虚拟机以字节码作为执行的基础，我们使用Kotlin构造了一个JVM字节码执行引擎，可以借助现代的IDE，如IDEA，在字节码层面对Java程序进行调试，以观察程序的运行行为。"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"注意，本项目仅用于学习和研究JVM的运行原理以及对恶意程序进行分析，严禁将其应用于非法用途。"})}),"\n",(0,o.jsx)(n.h2,{id:"",children:"前置知识基础"}),"\n",(0,o.jsx)(n.p,{children:"使用本项目前，请确保你已经有如下知识基础"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"了解Java类文件的格式"}),"\n",(0,o.jsx)(n.li,{children:"了解JVM的各个字节码的作用和含义"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"idea",children:"使用IDEA在字节码层面进行调试"}),"\n",(0,o.jsx)(n.pre,{language:"bash",code:"git clone https://github.com/vlinx-io/vlx-vmengine-jvm.git\n",children:(0,o.jsx)(n.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">git clone https://github.com/vlinx-io/vlx-vmengine-jvm.git</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"使用IDEA打开本项目(需要JDK17)，并转到TestCases"}),"\n",(0,o.jsxs)(n.p,{children:["TestCases中有两个测试用例，一个用于执行静态方法，一个用于执行实例方法，分别为",(0,o.jsx)(n.code,{children:"executeStaticMethod"}),"与",(0,o.jsx)(n.code,{children:"executeVirtualMethod"}),","]}),"\n",(0,o.jsxs)(n.p,{children:["在对应的方法上，填充上",(0,o.jsx)(n.code,{children:"classPath"}),", ",(0,o.jsx)(n.code,{children:"className"}),", ",(0,o.jsx)(n.code,{children:"methodName"}),", ",(0,o.jsx)(n.code,{children:"methodSignature"}),"这些信息，\n类文件的详细信息可以使用",(0,o.jsx)(n.a,{href:"https://github.com/ClassViewer/ClassViewer",children:"ClassViewer"}),"查看。"]}),"\n",(0,o.jsx)(n.h3,{children:"直接运行"}),"\n",(0,o.jsx)(n.p,{children:"以下面这段代码编译的类文件为例"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'public class Hello {\n\n    public void hello() {\n        System.out.println("hello");\n    }\n\n    public static void main(String[] args) {\n        System.out.println("Hello World!");\n    }\n}\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Hello</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hello</span><span style="color: var(--shiki-color-text)">() {</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">println</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;hello&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">String</span><span style="color: var(--shiki-color-text)">[] args) {</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">println</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Hello World!&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(n.p,{children:["执行",(0,o.jsx)(n.code,{children:"executeVirtualMethod"}),", 运行该类的hello方法"]}),"\n",(0,o.jsx)(n.pre,{language:"kotlin",code:'val classPath = "your-classpath"\nval className = "Hello"\nval methodName = "hello"\nval methodSignature = "()V"\nval args = listOf&lt;Any?&gt;()\n\nval url = File(classPath).toURI().toURL()\nval urls = arrayOf(url)\nval loader = VlxClassLoader(urls)\n\nval clazz = loader.loadClass(className)\n\nval method = ClassUtils.getMethod(clazz, methodName, methodSignature, loader)\nval instance = clazz.getDeclaredConstructor().newInstance()\n\n\nval thread = VMThread(VMEngine.instance, loader)\nthread.execute(instance, method!!, args, true, 0)\n',children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> classPath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;your-classpath&quot;</span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> className </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Hello&quot;</span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> methodName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;hello&quot;</span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> methodSignature </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;()V&quot;</span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> args </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> listOf&amp;lt;</span><span style="color: var(--shiki-token-constant)">Any?</span><span style="color: var(--shiki-color-text)">&amp;gt;()</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> url </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">File</span><span style="color: var(--shiki-color-text)">(classPath).toURI().toURL()</span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> urls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> arrayOf(url)</span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> loader </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">VlxClassLoader</span><span style="color: var(--shiki-color-text)">(urls)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> clazz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> loader.loadClass(className)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> method </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ClassUtils</span><span style="color: var(--shiki-color-text)">.getMethod(clazz, methodName, methodSignature, loader)</span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> instance </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> clazz.getDeclaredConstructor().newInstance()</span></span>\n<span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> thread </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">VMThread</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">VMEngine</span><span style="color: var(--shiki-color-text)">.instance, loader)</span></span>\n<span><span style="color: var(--shiki-color-text)">thread.execute(instance, method</span><span style="color: var(--shiki-token-keyword)">!!</span><span style="color: var(--shiki-color-text)">, args, </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"可以在控制台得到如下输出"}),"\n",(0,o.jsx)(n.pre,{language:"bash",code:'2023-05-21 17:51:10 [DEBUG] Execute method: public void Hello.hello()\n2023-05-21 17:51:10 [DEBUG] Receiver: Hello@3daf7722\n2023-05-21 17:51:10 [DEBUG] Args: []\n2023-05-21 17:51:11 [DEBUG] LocalVars: [kotlin.Unit]\n2023-05-21 17:51:11 [DEBUG] "L0: GETSTATIC"\n2023-05-21 17:51:11 [DEBUG] "#7"\n2023-05-21 17:51:11 [DEBUG] public static final java.io.PrintStream java.lang.System.out\n2023-05-21 17:51:11 [DEBUG] "push" org.gradle.internal.io.LinePerThreadBufferingOutputStream@6aa3a905\n2023-05-21 17:51:11 [DEBUG] "L3: LDC"\n2023-05-21 17:51:11 [DEBUG] "#13"\n2023-05-21 17:51:11 [DEBUG] "hello"\n2023-05-21 17:51:11 [DEBUG] "push" "hello"\n2023-05-21 17:51:11 [DEBUG] "L5: INVOKEVIRTUAL"\n2023-05-21 17:51:11 [DEBUG] "#15"\n2023-05-21 17:51:11 [DEBUG] "class java.io.PrintStream, NameAndType(name=\'println\', type=\'(Ljava/lang/String;)V\')"\n2023-05-21 17:51:11 [DEBUG] public void java.io.PrintStream.println(java.lang.String)\n2023-05-21 17:51:11 [DEBUG] "pop" "hello"\n2023-05-21 17:51:11 [DEBUG] "pop" org.gradle.internal.io.LinePerThreadBufferingOutputStream@6aa3a905\n2023-05-21 17:51:11 [DEBUG] 	Execute method: public void org.gradle.internal.io.LinePerThreadBufferingOutputStream.println(java.lang.String)\n2023-05-21 17:51:11 [DEBUG] 	Receiver: org.gradle.internal.io.LinePerThreadBufferingOutputStream@6aa3a905\n2023-05-21 17:51:11 [DEBUG] 	Args: [org.gradle.internal.io.LinePerThreadBufferingOutputStream@6aa3a905, hello]\n2023-05-21 17:51:11 [ERROR] Can\'t parse class class org.gradle.internal.io.LinePerThreadBufferingOutputStream\nhello\n2023-05-21 17:51:11 [DEBUG] "L8: RETURN"\n',children:(0,o.jsx)(n.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:10 [DEBUG] Execute method: public void </span><span style="color: var(--shiki-token-function)">Hello.hello</span><span style="color: var(--shiki-token-punctuation)">()</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:10 [DEBUG] Receiver: Hello@3daf7722</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:10 [DEBUG] Args: []</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] LocalVars: [kotlin.Unit]</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L0: GETSTATIC&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;#7&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] public static final java.io.PrintStream java.lang.System.out</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> org.gradle.internal.io.LinePerThreadBufferingOutputStream@6aa3a905</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L3: LDC&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;#13&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;hello&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;hello&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L5: INVOKEVIRTUAL&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;#15&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;class java.io.PrintStream, NameAndType(name=&#39;println&#39;, type=&#39;(Ljava/lang/String;)V&#39;)&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] public void java.io.PrintStream.println(java.lang.String)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;hello&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> org.gradle.internal.io.LinePerThreadBufferingOutputStream@6aa3a905</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] 	Execute method: public void org.gradle.internal.io.LinePerThreadBufferingOutputStream.println(java.lang.String)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] 	Receiver: org.gradle.internal.io.LinePerThreadBufferingOutputStream@6aa3a905</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [DEBUG] 	Args: [org.gradle.internal.io.LinePerThreadBufferingOutputStream@6aa3a905, hello]</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 17:51:11 [ERROR] Can</span><span style="color: var(--shiki-token-string-expression)">&#39;t parse class class org.gradle.internal.io.LinePerThreadBufferingOutputStream</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">hello</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">2023-05-21 17:51:11 [DEBUG] &quot;L8: RETURN&quot;</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"控制台输出展示了该方法所有的字节码指令，在指令执行中堆栈的变化情况，以及每个字节码指令运行的结果"}),"\n",(0,o.jsx)(n.h3,{children:"断点调试"}),"\n",(0,o.jsxs)(n.p,{children:["如果需要断点调试字节码指令，可以在",(0,o.jsx)(n.code,{children:"VMExecutor"}),"中的",(0,o.jsx)(n.code,{children:"execute()"}),"方法上下断点"]}),"\n",(0,o.jsx)(n.pre,{language:"kotlin",code:" fun execute() {\n    while (true) {\n        try {\n            pc = sequence.index()\n            val opcode = sequence.readUnsignedByte().toShort()\n            if (execute(opcode)) {\n                break\n            }\n        } catch (vme: VlxVmException) {\n            Logger.FATAL(vme)\n            exitProcess(1)\n        } catch (t: Throwable) {\n            handleException(t)\n        }\n\n    }\n}\n",children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'<span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">fun</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">execute</span><span style="color: var(--shiki-color-text)">() {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) {</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">            pc </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sequence.index()</span></span>\n<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">val</span><span style="color: var(--shiki-color-text)"> opcode </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sequence.readUnsignedByte().toShort()</span></span>\n<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (execute(opcode)) {</span></span>\n<span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">break</span></span>\n<span><span style="color: var(--shiki-color-text)">            }</span></span>\n<span><span style="color: var(--shiki-color-text)">        } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-parameter)">vme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">VlxVmException</span><span style="color: var(--shiki-color-text)">) {</span></span>\n<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">Logger</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">FATAL</span><span style="color: var(--shiki-color-text)">(vme)</span></span>\n<span><span style="color: var(--shiki-color-text)">            exitProcess(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">        } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-parameter)">t</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Throwable</span><span style="color: var(--shiki-color-text)">) {</span></span>\n<span><span style="color: var(--shiki-color-text)">            handleException(t)</span></span>\n<span><span style="color: var(--shiki-color-text)">        }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h3,{children:"调试子方法字节码"}),"\n",(0,o.jsxs)(n.p,{children:["默认情况下，虚拟引擎仅解释执行指定方法的字节码，在指定方法中调用的子方法，仍然在JVM中运行，避免多层调用的巨大性能开销，如果希望所有的方法都通过虚拟引擎\n解释执行，请修改",(0,o.jsx)(n.code,{children:"io.vlinx.vmengine.Options"}),"，将",(0,o.jsx)(n.code,{children:"handleSubMethod"}),"修改为true"]})]})}var r=!0;n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,e.ah)(),s.components);return n?(0,o.jsx)(n,Object.assign({},s,{children:(0,o.jsx)(t,s)})):t(s)}}},function(s){s.O(0,[774,888,179],function(){return s(s.s=2656)}),_N_E=s.O()}]);