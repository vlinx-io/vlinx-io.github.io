(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[573],{6508:function(s,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/articles/deobfuscate-with-vlx-vmengine",function(){return a(5327)}])},5327:function(s,n,a){"use strict";a.r(n),a.d(n,{__N_SSG:function(){return r}});var o=a(5893),t=a(1151);function e(s){let n=Object.assign({h1:"h1",p:"p",a:"a",code:"code",pre:"pre",img:"img"},(0,t.ah)(),s.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"使用vlx-vmengine进行反混淆"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/vlinx-io/vlx-vmengine-jvm",children:"vlx-vmengine-jvm"}),"是一个使用Java实现的Java字节码执行引擎，其使用请参考",(0,o.jsx)(n.a,{href:"https://github.com/vlinx-io/vlx-vmengine-jvm",children:"https://github.com/vlinx-io/vlx-vmengine-jvm"})]}),"\n",(0,o.jsxs)(n.p,{children:["有如下一段简单的",(0,o.jsx)(n.code,{children:"Java"}),"代码"]}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'class HelloWorld {\n\n    private String name = "";\n\n    public HelloWorld(String name){\n        this.name = name;\n    }\n\n    public void sayHi(){\n        System.out.println("Hi, " + name);\n    }\n\n    public static void main(String[] args){\n        \n        String name = "George";\n        HelloWorld hello = new HelloWorld(name);\n\n        hello.sayHi();\n\n    }\n\n}\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HelloWorld</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">private</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">String</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HelloWorld</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">String</span><span style="color: var(--shiki-color-text)"> name){</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> name;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">sayHi</span><span style="color: var(--shiki-color-text)">(){</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">println</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Hi, &quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> name);</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">String</span><span style="color: var(--shiki-color-text)">[] args){</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">String</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;George&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">HelloWorld</span><span style="color: var(--shiki-color-text)"> hello </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HelloWorld(name)</span><span style="color: var(--shiki-color-text)">;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">hello</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">sayHi</span><span style="color: var(--shiki-color-text)">();</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"编译为类文件，并使用某个混淆引擎混淆后，得到如下文件，"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://vlinx.io/resources/files/a.class",children:"a.class"})}),"\n",(0,o.jsxs)(n.p,{children:["使用jadx打开后发现，除了",(0,o.jsx)(n.code,{children:"main"})," 函数之外，其他信息都面目全非，字符串也已经被加密。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://vlinx.io/resources/images/image-20230521195209691.png",alt:"image-20230521195209691"})}),"\n",(0,o.jsxs)(n.p,{children:["但是即使混淆了，类的基本结构与字节码信息仍然是存在的，使用",(0,o.jsx)(n.a,{href:"https://github.com/ClassViewer/ClassViewer",children:"ClassViewer"})," 打开",(0,o.jsx)(n.code,{children:"a.class"}),", 可以看到类的方法与字节码信息"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://vlinx.io/resources/images/image-20230521200149593.png",alt:"image-20230521200149593"})}),"\n",(0,o.jsxs)(n.p,{children:["无论如何做混淆，也仅能够在静态层面上混淆代码，提升分析的复杂度，在动态运行中仍然需要还原程序原来的运行逻辑，使用",(0,o.jsx)(n.a,{href:"https://github.com/vlinx-io/vlx-vmengine-jvm",children:"vlx-vmengine-jvm"})]}),"\n",(0,o.jsxs)(n.p,{children:["运行混淆后代码的",(0,o.jsx)(n.code,{children:"main"}),"方法，得到如下输出"]}),"\n",(0,o.jsx)(n.pre,{language:"bash",code:'2023-05-21 18:19:05 [DEBUG] LocalVars: [kotlin.Unit, kotlin.Unit, kotlin.Unit]\n2023-05-21 18:19:05 [DEBUG] "L0: SIPUSH"\n2023-05-21 18:19:05 [DEBUG] "push" 7144\n2023-05-21 18:19:05 [DEBUG] "L3: SIPUSH"\n2023-05-21 18:19:05 [DEBUG] "push" -13249\n2023-05-21 18:19:05 [DEBUG] "L6: INVOKESTATIC"\n2023-05-21 18:19:05 [DEBUG] "#20"\n2023-05-21 18:19:05 [DEBUG] "class a, NameAndType(name=\'a\', type=\'(II)Ljava/lang/String;\')"\n2023-05-21 18:19:05 [DEBUG] private static java.lang.String a.a(int,int)\n2023-05-21 18:19:05 [DEBUG] "pop" -13249\n2023-05-21 18:19:05 [DEBUG] "pop" 7144\n2023-05-21 18:19:05 [DEBUG] 	Execute method: private static java.lang.String a.a(int,int)\n2023-05-21 18:19:05 [DEBUG] 	Args: [7144, -13249]\n2023-05-21 18:19:05 [DEBUG] "push" "George"\n2023-05-21 18:19:05 [DEBUG] "L9: ASTORE_1"\n2023-05-21 18:19:05 [DEBUG] "pop" "George"\n2023-05-21 18:19:05 [DEBUG] "localVars[1] = George"\n2023-05-21 18:19:05 [DEBUG] "L10: NEW"\n2023-05-21 18:19:05 [DEBUG] class a\n2023-05-21 18:19:05 [DEBUG] "push" InstanceToCreate(clazz=class a)\n2023-05-21 18:19:05 [DEBUG] "L13: DUP"\n2023-05-21 18:19:05 [DEBUG] "pop" InstanceToCreate(clazz=class a)\n2023-05-21 18:19:05 [DEBUG] "push" InstanceToCreate(clazz=class a)\n2023-05-21 18:19:05 [DEBUG] "push" InstanceToCreate(clazz=class a)\n2023-05-21 18:19:05 [DEBUG] "L14: ALOAD_1"\n2023-05-21 18:19:05 [DEBUG] "#1"\n2023-05-21 18:19:05 [DEBUG] "push" "George"\n2023-05-21 18:19:05 [DEBUG] "L15: INVOKESPECIAL"\n2023-05-21 18:19:05 [DEBUG] "#47"\n2023-05-21 18:19:05 [DEBUG] "class a, NameAndType(name=\'&lt;init&gt;\', type=\'(Ljava/lang/String;)V\')"\n2023-05-21 18:19:05 [DEBUG] public a(java.lang.String)\n2023-05-21 18:19:05 [DEBUG] "pop" "George"\n2023-05-21 18:19:05 [DEBUG] "Execute new instance: public a(java.lang.String)"\n2023-05-21 18:19:05 [DEBUG] "Args: [George]"\n2023-05-21 18:19:05 [DEBUG] "pop" InstanceToCreate(clazz=class a)\n2023-05-21 18:19:05 [DEBUG] "L18: ASTORE_2"\n2023-05-21 18:19:05 [DEBUG] "pop" a@4612b856\n2023-05-21 18:19:05 [DEBUG] "localVars[2] = a@4612b856"\n2023-05-21 18:19:05 [DEBUG] "L19: ALOAD_2"\n2023-05-21 18:19:05 [DEBUG] "#2"\n2023-05-21 18:19:05 [DEBUG] "push" a@4612b856\n2023-05-21 18:19:05 [DEBUG] "L20: INVOKEVIRTUAL"\n2023-05-21 18:19:05 [DEBUG] "#54"\n2023-05-21 18:19:05 [DEBUG] "class a, NameAndType(name=\'a\', type=\'()V\')"\n2023-05-21 18:19:05 [DEBUG] public void a.a()\n2023-05-21 18:19:05 [DEBUG] "pop" a@4612b856\n2023-05-21 18:19:05 [DEBUG] 	Execute method: public void a.a()\n2023-05-21 18:19:05 [DEBUG] 	Receiver: a@4612b856\n2023-05-21 18:19:05 [DEBUG] 	Args: [a@4612b856]\nHi, George\n2023-05-21 18:19:05 [DEBUG] "L23: RETURN"\n',children:(0,o.jsx)(n.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] LocalVars: [kotlin.Unit, kotlin.Unit, kotlin.Unit]</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L0: SIPUSH&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> 7144</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L3: SIPUSH&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> -13249</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L6: INVOKESTATIC&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;#20&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;class a, NameAndType(name=&#39;a&#39;, type=&#39;(II)Ljava/lang/String;&#39;)&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] private static java.lang.String a.a(int,int)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> -13249</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> 7144</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] 	Execute method: private static java.lang.String a.a(int,int)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] 	Args: [7144, -13249]</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;George&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L9: ASTORE_1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;George&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;localVars[1] = George&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L10: NEW&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] class a</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> InstanceToCreate(clazz=class a)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L13: DUP&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> InstanceToCreate(clazz=class a)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> InstanceToCreate(clazz=class a)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> InstanceToCreate(clazz=class a)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L14: ALOAD_1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;#1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;George&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L15: INVOKESPECIAL&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;#47&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;class a, NameAndType(name=&#39;&amp;lt;init&amp;gt;&#39;, type=&#39;(Ljava/lang/String;)V&#39;)&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] public a(java.lang.String)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;George&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;Execute new instance: public a(java.lang.String)&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;Args: [George]&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> InstanceToCreate(clazz=class a)</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L18: ASTORE_2&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> a@4612b856</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;localVars[2] = a@4612b856&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L19: ALOAD_2&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;#2&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;push&quot;</span><span style="color: var(--shiki-color-text)"> a@4612b856</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L20: INVOKEVIRTUAL&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;#54&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;class a, NameAndType(name=&#39;a&#39;, type=&#39;()V&#39;)&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] public void </span><span style="color: var(--shiki-token-function)">a.a</span><span style="color: var(--shiki-token-punctuation)">()</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;pop&quot;</span><span style="color: var(--shiki-color-text)"> a@4612b856</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] 	Execute method: public void </span><span style="color: var(--shiki-token-function)">a.a</span><span style="color: var(--shiki-token-punctuation)">()</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] 	Receiver: a@4612b856</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] 	Args: [a@4612b856]</span></span>\n<span><span style="color: var(--shiki-color-text)">Hi, George</span></span>\n<span><span style="color: var(--shiki-color-text)">2023-05-21 18:19:05 [DEBUG] </span><span style="color: var(--shiki-token-string-expression)">&quot;L23: RETURN&quot;</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(n.p,{children:["从控制台输出可以看到程序还原了原来的行为，即打印输出",(0,o.jsx)(n.code,{children:"Hi, George"}),"，同时从输出中我们也可以判断字符串的解密函数在",(0,o.jsx)(n.code,{children:"private static java.lang.String a.a(int,int)"}),"，其参数为",(0,o.jsx)(n.code,{children:"7144"}),"与",(0,o.jsx)(n.code,{children:"-13249"}),"，如果继续使用vmengine调试",(0,o.jsx)(n.code,{children:"a.a(int,int)"}),"方法即可发现该混淆引擎使用的字符串加密方法。"]})]})}var r=!0;n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),s.components);return n?(0,o.jsx)(n,Object.assign({},s,{children:(0,o.jsx)(e,s)})):e(s)}}},function(s){s.O(0,[774,888,179],function(){return s(s.s=6508)}),_N_E=s.O()}]);