(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[855],{5752:function(s,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/articles/graalvm-nativeimage-reverse-engineering",function(){return a(6958)}])},6958:function(s,n,a){"use strict";a.r(n),a.d(n,{__N_SSG:function(){return e}});var o=a(5893),t=a(1151);function r(s){let n=Object.assign({h1:"h1",p:"p",h2:"h2",a:"a",pre:"pre",code:"code",h3:"h3",img:"img",ol:"ol",li:"li"},(0,t.ah)(),s.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"GraalVM NativeImage 逆向还原"}),"\n",(0,o.jsx)(n.p,{children:"Java代码还原与保护是一个老生常谈的问题，由于Java类文件的采取字节码格式保存，包含了许多元信息，所以可以很容易还原成原始代码。为了保护Java代码，业界采用了许多手段，比如混淆、字节码加密、JNI保护等等，但是无论哪种方法，都仍存在破解的方法和途径。"}),"\n",(0,o.jsx)(n.p,{children:"二进制编译，一直被认为是代码保护较为有效的一种方法，Java的二进制编译被撑为AOT技术(Ahead of Time)，即提前编译。"}),"\n",(0,o.jsx)(n.p,{children:"但是由于Java语言的动态特性，二进制编译需要处理反射、动态代理、JNI加载等问题，存在许多的困难，所以很长时间一来，Java的AOT编译方面一直缺乏一个成熟可靠、适应性强并且可大范围应用于生产环境的工具。（曾经有一个叫做ExcellisorJET，如今似乎已停止维护）"}),"\n",(0,o.jsx)(n.p,{children:"2019年5月，Oracle推出了GraalVM 19.0，一个多语言支持的虚拟机，19.0是它第一个面向生产环境的版本。GraalVM中提供了一个NativeImage工具，能够实现Java程序的AOT编译。经过几年的发展，目前NativeImage已经十分成熟，SpringBoot 3.0已经可以使用它将整个SpringBoot工程编译生成一个可执行文件，编译后的文件，启动速度快，内存占用低，具有非常好的效果。"}),"\n",(0,o.jsx)(n.p,{children:"那么，对于已经迎来二进制编译时代的Java程序来说，其代码是否仍是像字节码时代一样容易被逆向还原呢，NativeImage编译的二进制文件又有哪些特点，二进制编译的强度是否足够用来保护重要的代码？"}),"\n",(0,o.jsx)(n.p,{children:"为了探讨上述问题，笔者近期编写了一个NativeImage分析工具，已经能达到一定的逆向还原效果。"}),"\n",(0,o.jsx)(n.h2,{id:"",children:"项目地址"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/vlinx-io/NativeImageAnalyzer",children:"https://github.com/vlinx-io/NativeImageAnalyzer"})}),"\n",(0,o.jsx)(n.h2,{id:"native-image",children:"生成NativeImage"}),"\n",(0,o.jsxs)(n.p,{children:["首先我们需要生成一个NativeImage，NativeImage来自于GraalVM，访问",(0,o.jsx)(n.a,{href:"https://www.graalvm.org/",children:"https://www.graalvm.org/"})," 下载Java 17版本，下载完成后设置好环境变量，GraalVM中同样包含了一个JDK，因此可以直接使用它执行Java命令."]}),"\n",(0,o.jsx)(n.p,{children:"添加$GRAALVM_HOME/bin到环境变量，之后执行"}),"\n",(0,o.jsx)(n.pre,{language:"bash",code:"gu install native-image\n",children:(0,o.jsx)(n.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">gu install native-image</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h3,{children:"编写一个简单Java程序"}),"\n",(0,o.jsx)(n.p,{children:"编写一个简单的Java程序，例如"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'public class Hello {\n	public static void main(String[] args){\n		System.out.println("Hello World!");\n	}\n}\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Hello</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">String</span><span style="color: var(--shiki-color-text)">[] args){</span></span>\n<span><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">println</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Hello World!&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>\n<span><span style="color: var(--shiki-color-text)">	}</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"编译并运行上述Java程序"}),"\n",(0,o.jsx)(n.pre,{language:"bash",code:"javac Hello.java\njava -cp . Hello\n",children:(0,o.jsx)(n.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">javac Hello.java</span></span>\n<span><span style="color: var(--shiki-color-text)">java -cp </span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-color-text)"> Hello</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"可以得到程序输出"}),"\n",(0,o.jsx)(n.pre,{code:"Hello World!\n",children:(0,o.jsx)(n.code,{children:"Hello World!\n"})}),"\n",(0,o.jsx)(n.h3,{children:"编译环境准备"}),"\n",(0,o.jsx)(n.p,{children:"如果是Windows用户需要提前安装好Visual Studio, 如果是Linux与macOS用户，需要提前安装好gcc与clang等工具。"}),"\n",(0,o.jsx)(n.p,{children:"Windows用户在执行native-image命令之前，需要先设置好Visual Studio的环境变量，可以通过下述命令设置"}),"\n",(0,o.jsx)(n.pre,{code:' "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat"\n',children:(0,o.jsx)(n.code,{children:' "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat"\n'})}),"\n",(0,o.jsx)(n.p,{children:"如果Visual Studio的安装路径与版本不同，请自行调整相关路径信息。"}),"\n",(0,o.jsx)(n.h3,{children:"使用native-image进行编译"}),"\n",(0,o.jsxs)(n.p,{children:["现在使用native-image命令将上面这个Java程序编译成二进制文件, native-image命令的格式与java命令格式一致，同样有",(0,o.jsx)(n.code,{children:"-cp, -jar"}),"这些参数，如何使用java命令来执行程序，就使用同样的方式进行二进制编译，只不过命令从java换成了native-image。执行命令如下"]}),"\n",(0,o.jsx)(n.pre,{code:"native-image -cp . Hello\n",children:(0,o.jsx)(n.code,{children:"native-image -cp . Hello\n"})}),"\n",(0,o.jsx)(n.p,{children:"经过一段时间的编译，期间可能会占用较多的CPU与内存，可以得到一个编译后的二进制文件，输出文件名默认为主类名的小写，此处为hello，如果是Windows下则为hello.exe，使用file命令来查看这个文件的类型，可以看到这确实是个二进制文件了"}),"\n",(0,o.jsx)(n.pre,{code:"file hello\nhello: Mach-O 64-bit executable x86_64\n",children:(0,o.jsx)(n.code,{children:"file hello\nhello: Mach-O 64-bit executable x86_64\n"})}),"\n",(0,o.jsxs)(n.p,{children:["执行这个文件，其输出与前面使用",(0,o.jsx)(n.code,{children:"java -cp . Hello"}),"的结果一致"]}),"\n",(0,o.jsx)(n.pre,{code:"Hello World!\n",children:(0,o.jsx)(n.code,{children:"Hello World!\n"})}),"\n",(0,o.jsx)(n.h2,{id:"native-image-2",children:"分析NativeImage"}),"\n",(0,o.jsx)(n.h3,{children:"使用IDA进行分析"}),"\n",(0,o.jsx)(n.p,{children:"使用IDA打开上面步骤编译的hello，点击Exports查看符号表，可以看到个svm_code_section符号，其地址就是Java Main函数的入口地址"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"http://native-test.vlinx.io/resources/screenshots/image-20230218194013099.png",alt:"image-20230218194013099"})}),"\n",(0,o.jsx)(n.p,{children:"定位到这个地址，查看汇编代码"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"http://native-test.vlinx.io/resources/screenshots/image-20230218194126014.png",alt:"image-20230218194126014"})}),"\n",(0,o.jsx)(n.p,{children:"可以看到已经是标准的汇编函数的样子了，使用F5进行反编译"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"http://native-test.vlinx.io/resources/screenshots/image-20230218194235234.png",alt:"image-20230218194235234"})}),"\n",(0,o.jsx)(n.p,{children:"可以看到进行了一些函数调用 ，传递了一些参数，但是不容易看出逻辑。"}),"\n",(0,o.jsx)(n.p,{children:"我们双击sub_1000C0020，看看调用函数的内部，IDA提示分析失败"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"http://native-test.vlinx.io/resources/screenshots/image-20230218194449494.png",alt:"image-20230218194449494"})}),"\n",(0,o.jsx)(n.h3,{children:"NativeImage 反编译的逻辑"}),"\n",(0,o.jsx)(n.p,{children:"因为NativeImage的编译是基于JVM的编译，也可以理解为给二进码代码套了一层VM保护，所以IDA这类工具，在缺乏相应信息以及针对性处理措施的情况下，是无法很好的对其进行逆向还原的。"}),"\n",(0,o.jsx)(n.p,{children:"但是不论何种形式，以字节码的形式，还是以二进制的形式，JVM的执行的一些基本要素必然是存在的，例如类的信息，字段的信息，函数的调用与参数的传递等，基于这个思路，笔者编写的分析工具已能达到一定的还原效果，并且再加以完善的话，有能力达到足够高级别的还原度。"}),"\n",(0,o.jsx)(n.h3,{children:"使用NativeImageAnalyzer进行分析"}),"\n",(0,o.jsxs)(n.p,{children:["访问",(0,o.jsx)(n.a,{href:"https://github.com/vlinx-io/NativeImageAnalyzer%E4%B8%8B%E8%BD%BDNativeImageAnalyzer",children:"https://github.com/vlinx-io/NativeImageAnalyzer下载NativeImageAnalyzer"})]}),"\n",(0,o.jsx)(n.p,{children:"执行下述命令进行逆向分析，目前仅分析主类的Main函数"}),"\n",(0,o.jsx)(n.pre,{code:"native-image-analyzer hello\n",children:(0,o.jsx)(n.code,{children:"native-image-analyzer hello\n"})}),"\n",(0,o.jsx)(n.p,{children:"得到输出如下"}),"\n",(0,o.jsx)(n.pre,{code:'java.io.PrintStream.writeln(java.io.PrintStream@0x554fe8, "Hello World!", rcx)\nreturn\n',children:(0,o.jsx)(n.code,{children:'java.io.PrintStream.writeln(java.io.PrintStream@0x554fe8, "Hello World!", rcx)\nreturn\n'})}),"\n",(0,o.jsx)(n.p,{children:"我们再来看下原来的代码"}),"\n",(0,o.jsx)(n.pre,{code:'public static void main(String[] args){\n		System.out.println("Hello World!");\n}\n',children:(0,o.jsx)(n.code,{children:'public static void main(String[] args){\n		System.out.println("Hello World!");\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"我们现在来看下System.out的定义"}),"\n",(0,o.jsx)(n.pre,{code:"public static final PrintStream out = null;\n",children:(0,o.jsx)(n.code,{children:"public static final PrintStream out = null;\n"})}),"\n",(0,o.jsx)(n.p,{children:"可以看到System类的out变量是一个PrintStream类型的变量，并且是一个静态变量，NativeImage在编译的时候直接将这个类的实例编译到一个叫做Heap的区域，二进制代码直接从Heap区域获取这个类的实例进行调用，我们再来看下还原后的代码"}),"\n",(0,o.jsx)(n.pre,{code:'java.io.PrintStream.writeln(java.io.PrintStream@0x554fe8, "Hello World!", rcx)\nreturn\n',children:(0,o.jsx)(n.code,{children:'java.io.PrintStream.writeln(java.io.PrintStream@0x554fe8, "Hello World!", rcx)\nreturn\n'})}),"\n",(0,o.jsxs)(n.p,{children:["这里的",(0,o.jsx)(n.code,{children:"java.io.PrintStream@0x554fe8"})," 就是从Heap区域中读出的",(0,o.jsx)(n.code,{children:"java.io.PrintStream"}),"的实例变量，其在内存中的地址为0x554fe8"]}),"\n",(0,o.jsxs)(n.p,{children:["我们再来看下",(0,o.jsx)(n.code,{children:"java.io.PrintStream.writeln"})," 函数的定义"]}),"\n",(0,o.jsx)(n.pre,{code:"private void writeln(String s) {\n		......        \n}\n",children:(0,o.jsx)(n.code,{children:"private void writeln(String s) {\n		......        \n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["我们这里可以看到writelin函数中有一个String类型的参数，而还原的代码中为什么传递了三个参数了，首先",(0,o.jsx)(n.code,{children:"writeln"}),"是一个类成员方法，只默认隐藏了一个",(0,o.jsx)(n.code,{children:"this"}),"变量指向调用者，即传递的第一个参数",(0,o.jsx)(n.code,{children:"java.io.PrintStream@0x554fe8"}),"，至于第三个参数rcx，是因为在进行汇编代码分析的过程中判断这个函数调用了三个参数，但实际上看定义我们知道这个函数实只调用两个参数，这也是本工具后续需要改进的地方。"]}),"\n",(0,o.jsx)(n.h2,{id:"",children:"一个复杂点的程序"}),"\n",(0,o.jsx)(n.p,{children:"我们接下来分析一个复杂点的程序，比如计算一个Fibonacci数列，代码如下"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'class Fibonacci {\n    public static void main(String[] args) {\n        int count = Integer.parseInt(args[0]);\n\n        int n1 = 0, n2 = 1, n3;\n        System.out.print(n1 + " " + n2);\n\n        for (int i = 2; i &lt; count; ++i){\n            n3 = n1 + n2;\n            System.out.print(" " + n3);\n            n1 = n2;\n            n2 = n3;\n        }\n        System.out.println();\n    }\n}\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Fibonacci</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">String</span><span style="color: var(--shiki-color-text)">[] args) {</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">int</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Integer</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">parseInt</span><span style="color: var(--shiki-color-text)">(args[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">int</span><span style="color: var(--shiki-color-text)"> n1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n3;</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">print</span><span style="color: var(--shiki-color-text)">(n1 </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> n2);</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">int</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt; count; </span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">i){</span></span>\n<span><span style="color: var(--shiki-color-text)">            n3 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n1 </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> n2;</span></span>\n<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">print</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> n3);</span></span>\n<span><span style="color: var(--shiki-color-text)">            n1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n2;</span></span>\n<span><span style="color: var(--shiki-color-text)">            n2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n3;</span></span>\n<span><span style="color: var(--shiki-color-text)">        }</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">println</span><span style="color: var(--shiki-color-text)">();</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"编译并执行"}),"\n",(0,o.jsx)(n.pre,{language:"bash",code:"javac Fibonacci.java\nnative-image -cp . Fibonacci\n./fibonacci 10\n0 1 1 2 3 5 8 13 21 34\n",children:(0,o.jsx)(n.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">javac Fibonacci.java</span></span>\n<span><span style="color: var(--shiki-color-text)">native-image -cp </span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-color-text)"> Fibonacci</span></span>\n<span><span style="color: var(--shiki-color-text)">./fibonacci 10</span></span>\n<span><span style="color: var(--shiki-color-text)">0 1 1 2 3 5 8 13 21 34</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"使用NativeImageAnalyzer还原后获得代码如下"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'rdi = rdi[0]\nret_0 = java.lang.Integer.parseInt(rdi, 10)\nsp_0x44 = ret_0\nret_1 = java.lang.StringConcatHelper.mix(1, 1)\nret_2 = java.lang.StringConcatHelper.mix(ret_1, 0)\nsp_0x20 = java.io.PrintStream@0x554fe8\nsp_0x18 = Class{[B}_1\ntlab_0 = Class{[B}_1\ntlab_0.length = ret_2&lt;&lt;ret_2&gt;&gt;32\nsp_0x10 = tlab_0\nret_28 = ?java.lang.StringConcatHelper.prepend(tlab_0, " ", ret_2)\nret_29 = java.lang.StringConcatHelper.prepend(ret_28, sp_0x10, 0)\nret_30 = ?java.lang.StringConcatHelper.newString(sp_0x10, ret_29)\njava.io.PrintStream.write(sp_0x20, ret_30)\nif(sp_0x44&gt;=3)\n{\n	ret_7 = java.lang.StringConcatHelper.mix(1, 1)\n	tlab_1 = sp_0x18\n	tlab_1.length = ret_7&lt;&lt;ret_7&gt;&gt;32\n	sp_0x10 = " "\n	sp_0x8 = tlab_1\n	ret_22 = ?java.lang.StringConcatHelper.prepend(tlab_1, " ", ret_7)\n	ret_23 = ?java.lang.StringConcatHelper.newString(sp_0x8, ret_22)\n	rsi = ret_23\n	java.io.PrintStream.write(sp_0x20, ret_23)\n	rdi = 1\n	rdx = 1\n	rcx = 3\n	while(true)\n	{\n		if(sp_0x44&lt;=rcx)\n		{\n			break\n		}\n		else\n		{\n			sp_0x34 = rcx\n			rdi = rdi+rdx\n			r9 = rdi\n			sp_0x30 = rdx\n			sp_0x2c = r9\n			ret_11 = java.lang.StringConcatHelper.mix(1, r9)\n			tlab_2 = sp_0x18\n			tlab_2.length = ret_11&lt;&lt;ret_11&gt;&gt;32\n			sp_0x8 = tlab_2\n			ret_17 = ?java.lang.StringConcatHelper.prepend(tlab_2, sp_0x10, ret_11)\n			ret_18 = ?java.lang.StringConcatHelper.newString(sp_0x8, ret_17)\n			rsi = ret_18\n			java.io.PrintStream.write(sp_0x20, ret_18)\n			rcx = sp_0x34+1\n			rdi = sp_0x30\n			rdx = sp_0x2c\n		}\n	}\n}\njava.io.PrintStream.newLine(sp_0x20, rsi)\nreturn\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-color-text)">rdi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rdi[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">Integer</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">parseInt</span><span style="color: var(--shiki-color-text)">(rdi</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">sp_0x44 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_0</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">mix</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">mix</span><span style="color: var(--shiki-color-text)">(ret_1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">sp_0x20 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-keyword)">0x554fe8</span></span>\n<span><span style="color: var(--shiki-color-text)">sp_0x18 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> Class{[B}</span><span style="color: var(--shiki-token-keyword)">_1</span></span>\n<span><span style="color: var(--shiki-color-text)">tlab_0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> Class{[B}</span><span style="color: var(--shiki-token-keyword)">_1</span></span>\n<span><span style="color: var(--shiki-token-constant)">tlab_0</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_2</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;ret_2</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-constant)">32</span></span>\n<span><span style="color: var(--shiki-color-text)">sp_0x10 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> tlab_0</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_28 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">prepend</span><span style="color: var(--shiki-color-text)">(tlab_0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_2)</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_29 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">prepend</span><span style="color: var(--shiki-color-text)">(ret_28</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sp_0x10</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_30 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">newString</span><span style="color: var(--shiki-color-text)">(sp_0x10</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_29)</span></span>\n<span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">write</span><span style="color: var(--shiki-color-text)">(sp_0x20</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_30)</span></span>\n<span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)">(sp_0x44</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">{</span></span>\n<span><span style="color: var(--shiki-color-text)">	ret_7 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">mix</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">	tlab_1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x18</span></span>\n<span><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">tlab_1</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_7</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;ret_7</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-constant)">32</span></span>\n<span><span style="color: var(--shiki-color-text)">	sp_0x10 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">	sp_0x8 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> tlab_1</span></span>\n<span><span style="color: var(--shiki-color-text)">	ret_22 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">prepend</span><span style="color: var(--shiki-color-text)">(tlab_1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_7)</span></span>\n<span><span style="color: var(--shiki-color-text)">	ret_23 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">newString</span><span style="color: var(--shiki-color-text)">(sp_0x8</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_22)</span></span>\n<span><span style="color: var(--shiki-color-text)">	rsi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_23</span></span>\n<span><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">write</span><span style="color: var(--shiki-color-text)">(sp_0x20</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_23)</span></span>\n<span><span style="color: var(--shiki-color-text)">	rdi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span>\n<span><span style="color: var(--shiki-color-text)">	rdx </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span>\n<span><span style="color: var(--shiki-color-text)">	rcx </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span></span>\n<span><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">	{</span></span>\n<span><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)">(sp_0x44</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">rcx)</span></span>\n<span><span style="color: var(--shiki-color-text)">		{</span></span>\n<span><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">break</span></span>\n<span><span style="color: var(--shiki-color-text)">		}</span></span>\n<span><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">else</span></span>\n<span><span style="color: var(--shiki-color-text)">		{</span></span>\n<span><span style="color: var(--shiki-color-text)">			sp_0x34 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rcx</span></span>\n<span><span style="color: var(--shiki-color-text)">			rdi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rdi</span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)">rdx</span></span>\n<span><span style="color: var(--shiki-color-text)">			r9 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rdi</span></span>\n<span><span style="color: var(--shiki-color-text)">			sp_0x30 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rdx</span></span>\n<span><span style="color: var(--shiki-color-text)">			sp_0x2c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> r9</span></span>\n<span><span style="color: var(--shiki-color-text)">			ret_11 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">mix</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> r9)</span></span>\n<span><span style="color: var(--shiki-color-text)">			tlab_2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x18</span></span>\n<span><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">tlab_2</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_11</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;ret_11</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-constant)">32</span></span>\n<span><span style="color: var(--shiki-color-text)">			sp_0x8 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> tlab_2</span></span>\n<span><span style="color: var(--shiki-color-text)">			ret_17 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">prepend</span><span style="color: var(--shiki-color-text)">(tlab_2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sp_0x10</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_11)</span></span>\n<span><span style="color: var(--shiki-color-text)">			ret_18 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">newString</span><span style="color: var(--shiki-color-text)">(sp_0x8</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_17)</span></span>\n<span><span style="color: var(--shiki-color-text)">			rsi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_18</span></span>\n<span><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">write</span><span style="color: var(--shiki-color-text)">(sp_0x20</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_18)</span></span>\n<span><span style="color: var(--shiki-color-text)">			rcx </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x34</span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-token-constant)">1</span></span>\n<span><span style="color: var(--shiki-color-text)">			rdi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x30</span></span>\n<span><span style="color: var(--shiki-color-text)">			rdx </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x2c</span></span>\n<span><span style="color: var(--shiki-color-text)">		}</span></span>\n<span><span style="color: var(--shiki-color-text)">	}</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">newLine</span><span style="color: var(--shiki-color-text)">(sp_0x20</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> rsi)</span></span>\n<span><span style="color: var(--shiki-token-keyword)">return</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"把还原后的代码与原代码比较下"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:"rdi = rdi[0]\nret_0 = java.lang.Integer.parseInt(rdi, 10)\nsp_0x44 = ret_0\n",children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-color-text)">rdi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rdi[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">Integer</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">parseInt</span><span style="color: var(--shiki-color-text)">(rdi</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">sp_0x44 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_0</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"对应的是"}),"\n",(0,o.jsx)(n.pre,{code:" int count = Integer.parseInt(args[0]);\n",children:(0,o.jsx)(n.code,{children:" int count = Integer.parseInt(args[0]);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["rdi是用来传递函数的第一个参数的寄存器，如果在Windows下则是rdx，rdi=rdi[0]",(0,o.jsx)(n.code,{children:"即对应了"}),"args[0]",(0,o.jsx)(n.code,{children:"，之后调用"}),"java.lang.Integer.parseInt",(0,o.jsx)(n.code,{children:"解析获得一个int数值，然后将返回值赋值给一个栈上变量"}),"sp_0x44"]}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'int n1 = 0, n2 = 1, n3;\nSystem.out.print(n1 + " " + n2);\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-token-keyword)">int</span><span style="color: var(--shiki-color-text)"> n1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n3;</span></span>\n<span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">print</span><span style="color: var(--shiki-color-text)">(n1 </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> n2);</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"对应的是"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'ret_1 = java.lang.StringConcatHelper.mix(1, 1)\nret_2 = java.lang.StringConcatHelper.mix(ret_1, 0)\nsp_0x20 = java.io.PrintStream@0x554fe8\nsp_0x18 = Class{[B}_1\ntlab_0 = Class{[B}_1\ntlab_0.length = ret_2&lt;&lt;ret_2&gt;&gt;32\nsp_0x10 = tlab_0\nret_28 = ?java.lang.StringConcatHelper.prepend(tlab_0, " ", ret_2)\nret_29 = java.lang.StringConcatHelper.prepend(ret_28, sp_0x10, 0)\nret_30 = ?java.lang.StringConcatHelper.newString(sp_0x10, ret_29)\njava.io.PrintStream.write(sp_0x20, ret_30)\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-color-text)">ret_1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">mix</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">mix</span><span style="color: var(--shiki-color-text)">(ret_1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">sp_0x20 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-color-text)">@</span><span style="color: var(--shiki-token-keyword)">0x554fe8</span></span>\n<span><span style="color: var(--shiki-color-text)">sp_0x18 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> Class{[B}</span><span style="color: var(--shiki-token-keyword)">_1</span></span>\n<span><span style="color: var(--shiki-color-text)">tlab_0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> Class{[B}</span><span style="color: var(--shiki-token-keyword)">_1</span></span>\n<span><span style="color: var(--shiki-token-constant)">tlab_0</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_2</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;ret_2</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-constant)">32</span></span>\n<span><span style="color: var(--shiki-color-text)">sp_0x10 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> tlab_0</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_28 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">prepend</span><span style="color: var(--shiki-color-text)">(tlab_0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_2)</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_29 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">prepend</span><span style="color: var(--shiki-color-text)">(ret_28</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sp_0x10</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">ret_30 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">newString</span><span style="color: var(--shiki-color-text)">(sp_0x10</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_29)</span></span>\n<span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">write</span><span style="color: var(--shiki-color-text)">(sp_0x20</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_30)</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(n.p,{children:["我们在Java代码中非常简单的字符串相加操作，在Java背后实际转为了",(0,o.jsx)(n.code,{children:"StringConcatHelper.mix"}),"，",(0,o.jsx)(n.code,{children:"StringConcatHelper.prepend"}),",",(0,o.jsx)(n.code,{children:"StringConcatHelper.newString"}),"三个函数的调用，其中",(0,o.jsx)(n.code,{children:"StringConcatHelper.mix"}),"计算字符串相加后的长度，",(0,o.jsx)(n.code,{children:"StringConcatHelper.prepend"}),"用来将具体承载字符串内容的byte[]数组组合在一起，",(0,o.jsx)(n.code,{children:"StringConcatHelper.newString"}),"则通过byte[]数组生成一个新的String对象"]}),"\n",(0,o.jsxs)(n.p,{children:["我们在上面这段代码看到了两个类型的变量名称，",(0,o.jsx)(n.code,{children:"sp_0x18"}),"与",(0,o.jsx)(n.code,{children:"tlab_0"}),"，sp_开头的变量，表示这是一个在栈上分配的变量，",(0,o.jsx)(n.code,{children:"tlab_"}),"开头的变量表示在Thread Local Allocation Buffers上分配的变量，这里仅是对这两种变量名称的由来做一个说明，在还原代码中这两类变量没有区别，关于Thread Local Allocation Buffers的相关资料，大家可以自行查找。"]}),"\n",(0,o.jsxs)(n.p,{children:["我们这里给",(0,o.jsx)(n.code,{children:"tlab_0"}),"赋值为",(0,o.jsx)(n.code,{children:"Class{[B}_1"}),", ",(0,o.jsx)(n.code,{children:"Class{[B}_1"}),"的含义是这是byte[]类型的对象实例, [B为byte[]类型的Java描述符，_1表示是这个类型的第一个变量，后续如果再定义了对应类型的变量则序号相应增加，如",(0,o.jsx)(n.code,{children:"Class{[B]}_2"}),",",(0,o.jsx)(n.code,{children:"Class{[B]}_3"}),"等，如果是其他类型也是同样的表示方式如",(0,o.jsx)(n.code,{children:"Class{java.lang.String}_1"}),", ",(0,o.jsx)(n.code,{children:"Class{java.util.HashMap}_2"}),"等"]}),"\n",(0,o.jsxs)(n.p,{children:["上面这段代码的逻辑简单解释了创建一个byte[]数组实例，并赋值给tlab0，数组长度为",(0,o.jsx)(n.code,{children:"ret_2 &lt;&lt; ret_2 &gt;&gt;32"}),"，数组的长度之所以是",(0,o.jsx)(n.code,{children:"ret_2 &lt;&lt; ret_2 &gt;&gt; 32"}),"，是因为String计算长度时需要根据编码对数组长度进行一定的换算，大家可以查找java.lang.String.java中的相关代码。接下来即通过prepend函数将0，1还有空格都并入到tlab0，再从tlab_0中生成一个新的String对象ret_30，传递给java.io.PrintStream.write函数打印输出。其实这里还原出来的prepend函数的参数，并不是很正确，参数的位置也不正确，这也是后面需要再完善的一个地方。"]}),"\n",(0,o.jsx)(n.p,{children:"两行的Java代码转换成实际的执行逻辑之后，还是比较复杂的，后续可以在目前已还原代码的基础上通过分析整合为简化的模式。"}),"\n",(0,o.jsx)(n.p,{children:"继续往下走"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'for (int i = 2; i &lt; count; ++i){\n  	n3 = n1 + n2;\n  	System.out.print(" " + n3);\n  	n1 = n2;\n  	n2 = n3;\n}\nSystem.out.println();\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">int</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt; count; </span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">i){</span></span>\n<span><span style="color: var(--shiki-color-text)">  	n3 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n1 </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> n2;</span></span>\n<span><span style="color: var(--shiki-color-text)">  	</span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">print</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> n3);</span></span>\n<span><span style="color: var(--shiki-color-text)">  	n1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n2;</span></span>\n<span><span style="color: var(--shiki-color-text)">  	n2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n3;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span><span style="color: var(--shiki-token-constant)">System</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">out</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">println</span><span style="color: var(--shiki-color-text)">();</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"对应的是"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:'if(sp_0x44&gt;=3)\n{\n	ret_7 = java.lang.StringConcatHelper.mix(1, 1)\n	tlab_1 = sp_0x18\n	tlab_1.length = ret_7&lt;&lt;ret_7&gt;&gt;32\n	sp_0x10 = " "\n	sp_0x8 = tlab_1\n	ret_22 = ?java.lang.StringConcatHelper.prepend(tlab_1, " ", ret_7)\n	ret_23 = ?java.lang.StringConcatHelper.newString(sp_0x8, ret_22)\n	rsi = ret_23\n	java.io.PrintStream.write(sp_0x20, ret_23)\n	rdi = 1\n	rdx = 1\n	rcx = 3\n	while(true)\n	{\n		if(sp_0x44&lt;=rcx)\n		{\n			break\n		}\n		else\n		{\n			sp_0x34 = rcx\n			rdi = rdi+rdx\n			r9 = rdi\n			sp_0x30 = rdx\n			sp_0x2c = r9\n			ret_11 = java.lang.StringConcatHelper.mix(1, r9)\n			tlab_2 = sp_0x18\n			tlab_2.length = ret_11&lt;&lt;ret_11&gt;&gt;32\n			sp_0x8 = tlab_2\n			ret_17 = ?java.lang.StringConcatHelper.prepend(tlab_2, sp_0x10, ret_11)\n			ret_18 = ?java.lang.StringConcatHelper.newString(sp_0x8, ret_17)\n			rsi = ret_18\n			java.io.PrintStream.write(sp_0x20, ret_18)\n			rcx = sp_0x34+1\n			rdi = sp_0x30\n			rdx = sp_0x2c\n		}\n	}\n}\njava.io.PrintStream.newLine(sp_0x20, rsi)\nreturn\n\n',children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)">(sp_0x44</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">{</span></span>\n<span><span style="color: var(--shiki-color-text)">	ret_7 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">mix</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">	tlab_1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x18</span></span>\n<span><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">tlab_1</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_7</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;ret_7</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-constant)">32</span></span>\n<span><span style="color: var(--shiki-color-text)">	sp_0x10 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">	sp_0x8 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> tlab_1</span></span>\n<span><span style="color: var(--shiki-color-text)">	ret_22 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">prepend</span><span style="color: var(--shiki-color-text)">(tlab_1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_7)</span></span>\n<span><span style="color: var(--shiki-color-text)">	ret_23 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">newString</span><span style="color: var(--shiki-color-text)">(sp_0x8</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_22)</span></span>\n<span><span style="color: var(--shiki-color-text)">	rsi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_23</span></span>\n<span><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">write</span><span style="color: var(--shiki-color-text)">(sp_0x20</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_23)</span></span>\n<span><span style="color: var(--shiki-color-text)">	rdi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span>\n<span><span style="color: var(--shiki-color-text)">	rdx </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span>\n<span><span style="color: var(--shiki-color-text)">	rcx </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span></span>\n<span><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">	{</span></span>\n<span><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)">(sp_0x44</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">rcx)</span></span>\n<span><span style="color: var(--shiki-color-text)">		{</span></span>\n<span><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">break</span></span>\n<span><span style="color: var(--shiki-color-text)">		}</span></span>\n<span><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">else</span></span>\n<span><span style="color: var(--shiki-color-text)">		{</span></span>\n<span><span style="color: var(--shiki-color-text)">			sp_0x34 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rcx</span></span>\n<span><span style="color: var(--shiki-color-text)">			rdi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rdi</span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)">rdx</span></span>\n<span><span style="color: var(--shiki-color-text)">			r9 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rdi</span></span>\n<span><span style="color: var(--shiki-color-text)">			sp_0x30 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> rdx</span></span>\n<span><span style="color: var(--shiki-color-text)">			sp_0x2c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> r9</span></span>\n<span><span style="color: var(--shiki-color-text)">			ret_11 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">mix</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> r9)</span></span>\n<span><span style="color: var(--shiki-color-text)">			tlab_2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x18</span></span>\n<span><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">tlab_2</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_11</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">lt;ret_11</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)">gt;</span><span style="color: var(--shiki-token-constant)">32</span></span>\n<span><span style="color: var(--shiki-color-text)">			sp_0x8 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> tlab_2</span></span>\n<span><span style="color: var(--shiki-color-text)">			ret_17 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">prepend</span><span style="color: var(--shiki-color-text)">(tlab_2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sp_0x10</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_11)</span></span>\n<span><span style="color: var(--shiki-color-text)">			ret_18 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">lang</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">StringConcatHelper</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">newString</span><span style="color: var(--shiki-color-text)">(sp_0x8</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_17)</span></span>\n<span><span style="color: var(--shiki-color-text)">			rsi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret_18</span></span>\n<span><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">write</span><span style="color: var(--shiki-color-text)">(sp_0x20</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret_18)</span></span>\n<span><span style="color: var(--shiki-color-text)">			rcx </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x34</span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-token-constant)">1</span></span>\n<span><span style="color: var(--shiki-color-text)">			rdi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x30</span></span>\n<span><span style="color: var(--shiki-color-text)">			rdx </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> sp_0x2c</span></span>\n<span><span style="color: var(--shiki-color-text)">		}</span></span>\n<span><span style="color: var(--shiki-color-text)">	}</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span><span style="color: var(--shiki-token-constant)">java</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">io</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-constant)">PrintStream</span><span style="color: var(--shiki-token-punctuation)">.</span><span style="color: var(--shiki-token-function)">newLine</span><span style="color: var(--shiki-color-text)">(sp_0x20</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> rsi)</span></span>\n<span><span style="color: var(--shiki-token-keyword)">return</span></span>\n<span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"sp_0x44"}),"为我们输入给程序的参数，即为count，count只有>=3才会执行Java代码中的for循环，这里将for循环还原为while循环，本质上语义是一质的，在while循环之外，程序代码执行了count=3的逻辑，如果count<=3，程序即执行完成，不会再进入while循环，这可能也是GraalVM在编译时做得一个优化。"]}),"\n",(0,o.jsx)(n.p,{children:"我们再看下循环的跳出条件"}),"\n",(0,o.jsx)(n.pre,{code:"if(sp_0x44&lt;=rcx)\n{\n		break\n}\n",children:(0,o.jsx)(n.code,{children:"if(sp_0x44&lt;=rcx)\n{\n		break\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"此处即对应了"}),"\n",(0,o.jsx)(n.pre,{code:"i &lt; count\n",children:(0,o.jsx)(n.code,{children:"i &lt; count\n"})}),"\n",(0,o.jsx)(n.p,{children:"同时rcx在每次循环过程中也在累加"}),"\n",(0,o.jsx)(n.pre,{code:"sp_0x34 = rcx\nrcx = sp_0x34+1\n",children:(0,o.jsx)(n.code,{children:"sp_0x34 = rcx\nrcx = sp_0x34+1\n"})}),"\n",(0,o.jsx)(n.p,{children:"即对应了"}),"\n",(0,o.jsx)(n.pre,{code:"++i\n",children:(0,o.jsx)(n.code,{children:"++i\n"})}),"\n",(0,o.jsx)(n.p,{children:"接下来，我们看看循环体中关于数值相加的逻辑如何在还原后的代码中体现，原始代码为"}),"\n",(0,o.jsx)(n.pre,{language:"java",code:"for(......){\n	......\n  n3 = n1 + n2;\n	n1 = n2;\n	n2 = n3;\n  ......\n}\n",children:(0,o.jsx)(n.code,{className:"language-java",children:'<span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-punctuation)">......</span><span style="color: var(--shiki-color-text)">){</span></span>\n<span><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-punctuation)">......</span></span>\n<span><span style="color: var(--shiki-color-text)">  n3 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n1 </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> n2;</span></span>\n<span><span style="color: var(--shiki-color-text)">	n1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n2;</span></span>\n<span><span style="color: var(--shiki-color-text)">	n2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> n3;</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-punctuation)">......</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.p,{children:"还原后的代码为"}),"\n",(0,o.jsx)(n.pre,{code:"while(true){\n	......\n  rdi = rdi+rdx 	-&gt; n3 = n1 + n2\n  r9 = rdi				-&gt; r9 = n3\n  sp_0x30 = rdx		-&gt; sp_0x30 = n2\n  sp_0x2c = r9		-&gt; sp_0x2c = n3\n  rdi = sp_0x30 	-&gt; n1 = sp_0x30 = n2\n  rdx = sp_0x2c		-&gt; n2 = sp_0x2c = n3\n  ......\n}\n",children:(0,o.jsx)(n.code,{children:"while(true){\n	......\n  rdi = rdi+rdx 	-&gt; n3 = n1 + n2\n  r9 = rdi				-&gt; r9 = n3\n  sp_0x30 = rdx		-&gt; sp_0x30 = n2\n  sp_0x2c = r9		-&gt; sp_0x2c = n3\n  rdi = sp_0x30 	-&gt; n1 = sp_0x30 = n2\n  rdx = sp_0x2c		-&gt; n2 = sp_0x2c = n3\n  ......\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"循环体中的其他代码即跟前面一样执行字符串相加与输出操作，还原后的代码基本体现了原代码的执行逻辑。"}),"\n",(0,o.jsx)(n.h2,{id:"",children:"还需要进一步完善的地方"}),"\n",(0,o.jsx)(n.p,{children:"目前这个工具已能够基本还原程序控制流，实现一定程度的数据流分析与函数名称还原，要成为一个完善可用的工具，还需要完成下面几点："}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"较为准确的函数名称、函数参数、函数返回值还原"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"较为准确的对象信息与字段的还原"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"较为准确的表达式与对象类型推断"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"语句整合与简化"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"",children:"关于二进制保护的思考"}),"\n",(0,o.jsx)(n.p,{children:"本项目的目的在于探讨NativeImage逆向还原的可行性，从目前的成果来看，NativeImage的逆向还原是可行的，这也给代码保护带来了更高的挑战，许多的开发者认为，将软件编译为二进制即可高枕无忧了，而忽略了对二进制代码的保护。对于C/C++编写的软件，目前许多工具，比如IDA已经有了非常好的还原效果，甚至暴露程度不低于Java程序，笔者甚至看到有些以二进制形式发行的软件，连函数名称的符号信息都不去除，此种情况下无异于裸奔。"}),"\n",(0,o.jsx)(n.p,{children:"任何的代码都是由逻辑组成，只要其包含逻辑，就有可能通过逆向的手段还原其逻辑，只不过在于还原难度的差别而已，而代码保护工作就是尽最大程度是加大这种还原的难度。"}),"\n",(0,o.jsx)(n.p,{children:"最后，在此求个关注，这是本公众号的第一篇文章，大家如果觉得文章内容有价值，欢迎转发关注。后续将努力为大家奉献关于程序开发、逆向保护、网络安全等方面有价值的内容，与大家共同交流学习，谢谢！"})]})}var e=!0;n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),s.components);return n?(0,o.jsx)(n,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}}},function(s){s.O(0,[774,888,179],function(){return s(s.s=5752)}),_N_E=s.O()}]);